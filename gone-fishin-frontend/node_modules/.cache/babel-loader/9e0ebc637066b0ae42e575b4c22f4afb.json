{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util = require(\"util\");\n\nvar validate_1 = require(\"./validate\");\n/*! The Firestore library version */\n\n\nvar libVersion;\n/*! The external function used to emit logs. */\n\nvar logFunction = null;\n/**\n * Log function to use for debug output. By default, we don't perform any\n * logging.\n *\n * @private\n */\n\nfunction logger(methodName, requestTag, logMessage) {\n  requestTag = requestTag || '#####';\n\n  if (logFunction) {\n    for (var _len = arguments.length, additionalArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      additionalArgs[_key - 3] = arguments[_key];\n    }\n\n    var formattedMessage = util.format.apply(util, [logMessage].concat(additionalArgs));\n    var time = new Date().toISOString();\n    logFunction(\"Firestore (\".concat(libVersion, \") \").concat(time, \" \").concat(requestTag, \" [\").concat(methodName, \"]: \") + formattedMessage);\n  }\n}\n\nexports.logger = logger;\n/**\n * Sets or disables the log function for all active Firestore instances.\n *\n * @param logger A log function that takes a message (such as `console.log`) or\n * `null` to turn off logging.\n */\n\nfunction setLogFunction(logger) {\n  if (logger !== null) validate_1.validateFunction('logger', logger);\n  logFunction = logger;\n}\n\nexports.setLogFunction = setLogFunction;\n/**\n * Sets the library version to be used in log messages.\n *\n * @private\n */\n\nfunction setLibVersion(version) {\n  libVersion = version;\n}\n\nexports.setLibVersion = setLibVersion;","map":{"version":3,"sources":["/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/@google-cloud/firestore/build/src/logger.js"],"names":["Object","defineProperty","exports","value","util","require","validate_1","libVersion","logFunction","logger","methodName","requestTag","logMessage","additionalArgs","formattedMessage","format","time","Date","toISOString","setLogFunction","validateFunction","setLibVersion","version"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;AACA;;;AACA,IAAIE,UAAJ;AACA;;AACA,IAAIC,WAAW,GAAG,IAAlB;AACA;;;;;;;AAMA,SAASC,MAAT,CAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,UAAxC,EAAuE;AACnED,EAAAA,UAAU,GAAGA,UAAU,IAAI,OAA3B;;AACA,MAAIH,WAAJ,EAAiB;AAAA,sCAFkCK,cAElC;AAFkCA,MAAAA,cAElC;AAAA;;AACb,QAAMC,gBAAgB,GAAGV,IAAI,CAACW,MAAL,OAAAX,IAAI,GAAQQ,UAAR,SAAuBC,cAAvB,EAA7B;AACA,QAAMG,IAAI,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAb;AACAV,IAAAA,WAAW,CAAC,qBAAcD,UAAd,eAA6BS,IAA7B,cAAqCL,UAArC,eAAoDD,UAApD,WACRI,gBADO,CAAX;AAEH;AACJ;;AACDZ,OAAO,CAACO,MAAR,GAAiBA,MAAjB;AACA;;;;;;;AAMA,SAASU,cAAT,CAAwBV,MAAxB,EAAgC;AAC5B,MAAIA,MAAM,KAAK,IAAf,EACIH,UAAU,CAACc,gBAAX,CAA4B,QAA5B,EAAsCX,MAAtC;AACJD,EAAAA,WAAW,GAAGC,MAAd;AACH;;AACDP,OAAO,CAACiB,cAAR,GAAyBA,cAAzB;AACA;;;;;;AAKA,SAASE,aAAT,CAAuBC,OAAvB,EAAgC;AAC5Bf,EAAAA,UAAU,GAAGe,OAAb;AACH;;AACDpB,OAAO,CAACmB,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util = require(\"util\");\nconst validate_1 = require(\"./validate\");\n/*! The Firestore library version */\nlet libVersion;\n/*! The external function used to emit logs. */\nlet logFunction = null;\n/**\n * Log function to use for debug output. By default, we don't perform any\n * logging.\n *\n * @private\n */\nfunction logger(methodName, requestTag, logMessage, ...additionalArgs) {\n    requestTag = requestTag || '#####';\n    if (logFunction) {\n        const formattedMessage = util.format(logMessage, ...additionalArgs);\n        const time = new Date().toISOString();\n        logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` +\n            formattedMessage);\n    }\n}\nexports.logger = logger;\n/**\n * Sets or disables the log function for all active Firestore instances.\n *\n * @param logger A log function that takes a message (such as `console.log`) or\n * `null` to turn off logging.\n */\nfunction setLogFunction(logger) {\n    if (logger !== null)\n        validate_1.validateFunction('logger', logger);\n    logFunction = logger;\n}\nexports.setLogFunction = setLogFunction;\n/**\n * Sets the library version to be used in log messages.\n *\n * @private\n */\nfunction setLibVersion(version) {\n    libVersion = version;\n}\nexports.setLibVersion = setLibVersion;\n//# sourceMappingURL=logger.js.map"]},"metadata":{},"sourceType":"script"}