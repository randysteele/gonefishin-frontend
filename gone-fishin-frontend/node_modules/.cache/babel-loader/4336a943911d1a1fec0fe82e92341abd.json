{"ast":null,"code":"/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.refreshToken = exports.cert = exports.applicationDefault = void 0;\n\nvar credential_internal_1 = require(\"./credential-internal\");\n\nvar globalAppDefaultCred;\nvar globalCertCreds = {};\nvar globalRefreshTokenCreds = {};\n/**\n * Returns a credential created from the\n * {@link\n *    https://developers.google.com/identity/protocols/application-default-credentials\n *    Google Application Default Credentials}\n * that grants admin access to Firebase services. This credential can be used\n * in the call to\n * {@link\n *   https://firebase.google.com/docs/reference/admin/node/admin#.initializeApp\n *  `admin.initializeApp()`}.\n *\n * Google Application Default Credentials are available on any Google\n * infrastructure, such as Google App Engine and Google Compute Engine.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/admin/setup#initialize_the_sdk\n *   Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * admin.initializeApp({\n *   credential: admin.credential.applicationDefault(),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param {!Object=} httpAgent Optional [HTTP Agent](https://nodejs.org/api/http.html#http_class_http_agent)\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @return {!admin.credential.Credential} A credential authenticated via Google\n *   Application Default Credentials that can be used to initialize an app.\n */\n\nfunction applicationDefault(httpAgent) {\n  if (typeof globalAppDefaultCred === 'undefined') {\n    globalAppDefaultCred = credential_internal_1.getApplicationDefault(httpAgent);\n  }\n\n  return globalAppDefaultCred;\n}\n\nexports.applicationDefault = applicationDefault;\n/**\n * Returns a credential created from the provided service account that grants\n * admin access to Firebase services. This credential can be used in the call\n * to\n * {@link\n *   https://firebase.google.com/docs/reference/admin/node/admin#.initializeApp\n *   `admin.initializeApp()`}.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/admin/setup#initialize_the_sdk\n *   Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a service account key JSON file\n * var serviceAccount = require(\"path/to/serviceAccountKey.json\");\n * admin.initializeApp({\n *   credential: admin.credential.cert(serviceAccount),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @example\n * ```javascript\n * // Providing a service account object inline\n * admin.initializeApp({\n *   credential: admin.credential.cert({\n *     projectId: \"<PROJECT_ID>\",\n *     clientEmail: \"foo@<PROJECT_ID>.iam.gserviceaccount.com\",\n *     privateKey: \"-----BEGIN PRIVATE KEY-----<KEY>-----END PRIVATE KEY-----\\n\"\n *   }),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param serviceAccountPathOrObject The path to a service\n *   account key JSON file or an object representing a service account key.\n * @param httpAgent Optional [HTTP Agent](https://nodejs.org/api/http.html#http_class_http_agent)\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @return A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\n\nfunction cert(serviceAccountPathOrObject, httpAgent) {\n  var stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n\n  if (!(stringifiedServiceAccount in globalCertCreds)) {\n    globalCertCreds[stringifiedServiceAccount] = new credential_internal_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n  }\n\n  return globalCertCreds[stringifiedServiceAccount];\n}\n\nexports.cert = cert;\n/**\n * Returns a credential created from the provided refresh token that grants\n * admin access to Firebase services. This credential can be used in the call\n * to\n * {@link\n *   https://firebase.google.com/docs/reference/admin/node/admin#.initializeApp\n *   `admin.initializeApp()`}.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/admin/setup#initialize_the_sdk\n *   Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a refresh token JSON file\n * var refreshToken = require(\"path/to/refreshToken.json\");\n * admin.initializeApp({\n *   credential: admin.credential.refreshToken(refreshToken),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param refreshTokenPathOrObject The path to a Google\n *   OAuth2 refresh token JSON file or an object representing a Google OAuth2\n *   refresh token.\n * @param httpAgent Optional [HTTP Agent](https://nodejs.org/api/http.html#http_class_http_agent)\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @return A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\n\nfunction refreshToken(refreshTokenPathOrObject, httpAgent) {\n  var stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n\n  if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n    globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_internal_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n  }\n\n  return globalRefreshTokenCreds[stringifiedRefreshToken];\n}\n\nexports.refreshToken = refreshToken;","map":{"version":3,"sources":["/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/firebase-admin/lib/credential/credential.js"],"names":["Object","defineProperty","exports","value","refreshToken","cert","applicationDefault","credential_internal_1","require","globalAppDefaultCred","globalCertCreds","globalRefreshTokenCreds","httpAgent","getApplicationDefault","serviceAccountPathOrObject","stringifiedServiceAccount","JSON","stringify","ServiceAccountCredential","refreshTokenPathOrObject","stringifiedRefreshToken","RefreshTokenCredential"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,IAAR,GAAeH,OAAO,CAACI,kBAAR,GAA6B,KAAK,CAAxE;;AACA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAIC,oBAAJ;AACA,IAAIC,eAAe,GAAG,EAAtB;AACA,IAAIC,uBAAuB,GAAG,EAA9B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASL,kBAAT,CAA4BM,SAA5B,EAAuC;AACnC,MAAI,OAAOH,oBAAP,KAAgC,WAApC,EAAiD;AAC7CA,IAAAA,oBAAoB,GAAGF,qBAAqB,CAACM,qBAAtB,CAA4CD,SAA5C,CAAvB;AACH;;AACD,SAAOH,oBAAP;AACH;;AACDP,OAAO,CAACI,kBAAR,GAA6BA,kBAA7B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,SAASD,IAAT,CAAcS,0BAAd,EAA0CF,SAA1C,EAAqD;AACjD,MAAIG,yBAAyB,GAAGC,IAAI,CAACC,SAAL,CAAeH,0BAAf,CAAhC;;AACA,MAAI,EAAEC,yBAAyB,IAAIL,eAA/B,CAAJ,EAAqD;AACjDA,IAAAA,eAAe,CAACK,yBAAD,CAAf,GAA6C,IAAIR,qBAAqB,CAACW,wBAA1B,CAAmDJ,0BAAnD,EAA+EF,SAA/E,CAA7C;AACH;;AACD,SAAOF,eAAe,CAACK,yBAAD,CAAtB;AACH;;AACDb,OAAO,CAACG,IAAR,GAAeA,IAAf;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASD,YAAT,CAAsBe,wBAAtB,EAAgDP,SAAhD,EAA2D;AACvD,MAAIQ,uBAAuB,GAAGJ,IAAI,CAACC,SAAL,CAAeE,wBAAf,CAA9B;;AACA,MAAI,EAAEC,uBAAuB,IAAIT,uBAA7B,CAAJ,EAA2D;AACvDA,IAAAA,uBAAuB,CAACS,uBAAD,CAAvB,GAAmD,IAAIb,qBAAqB,CAACc,sBAA1B,CAAiDF,wBAAjD,EAA2EP,SAA3E,CAAnD;AACH;;AACD,SAAOD,uBAAuB,CAACS,uBAAD,CAA9B;AACH;;AACDlB,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.refreshToken = exports.cert = exports.applicationDefault = void 0;\nvar credential_internal_1 = require(\"./credential-internal\");\nvar globalAppDefaultCred;\nvar globalCertCreds = {};\nvar globalRefreshTokenCreds = {};\n/**\n * Returns a credential created from the\n * {@link\n *    https://developers.google.com/identity/protocols/application-default-credentials\n *    Google Application Default Credentials}\n * that grants admin access to Firebase services. This credential can be used\n * in the call to\n * {@link\n *   https://firebase.google.com/docs/reference/admin/node/admin#.initializeApp\n *  `admin.initializeApp()`}.\n *\n * Google Application Default Credentials are available on any Google\n * infrastructure, such as Google App Engine and Google Compute Engine.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/admin/setup#initialize_the_sdk\n *   Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * admin.initializeApp({\n *   credential: admin.credential.applicationDefault(),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param {!Object=} httpAgent Optional [HTTP Agent](https://nodejs.org/api/http.html#http_class_http_agent)\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @return {!admin.credential.Credential} A credential authenticated via Google\n *   Application Default Credentials that can be used to initialize an app.\n */\nfunction applicationDefault(httpAgent) {\n    if (typeof globalAppDefaultCred === 'undefined') {\n        globalAppDefaultCred = credential_internal_1.getApplicationDefault(httpAgent);\n    }\n    return globalAppDefaultCred;\n}\nexports.applicationDefault = applicationDefault;\n/**\n * Returns a credential created from the provided service account that grants\n * admin access to Firebase services. This credential can be used in the call\n * to\n * {@link\n *   https://firebase.google.com/docs/reference/admin/node/admin#.initializeApp\n *   `admin.initializeApp()`}.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/admin/setup#initialize_the_sdk\n *   Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a service account key JSON file\n * var serviceAccount = require(\"path/to/serviceAccountKey.json\");\n * admin.initializeApp({\n *   credential: admin.credential.cert(serviceAccount),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @example\n * ```javascript\n * // Providing a service account object inline\n * admin.initializeApp({\n *   credential: admin.credential.cert({\n *     projectId: \"<PROJECT_ID>\",\n *     clientEmail: \"foo@<PROJECT_ID>.iam.gserviceaccount.com\",\n *     privateKey: \"-----BEGIN PRIVATE KEY-----<KEY>-----END PRIVATE KEY-----\\n\"\n *   }),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param serviceAccountPathOrObject The path to a service\n *   account key JSON file or an object representing a service account key.\n * @param httpAgent Optional [HTTP Agent](https://nodejs.org/api/http.html#http_class_http_agent)\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @return A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction cert(serviceAccountPathOrObject, httpAgent) {\n    var stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n    if (!(stringifiedServiceAccount in globalCertCreds)) {\n        globalCertCreds[stringifiedServiceAccount] = new credential_internal_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n    }\n    return globalCertCreds[stringifiedServiceAccount];\n}\nexports.cert = cert;\n/**\n * Returns a credential created from the provided refresh token that grants\n * admin access to Firebase services. This credential can be used in the call\n * to\n * {@link\n *   https://firebase.google.com/docs/reference/admin/node/admin#.initializeApp\n *   `admin.initializeApp()`}.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/admin/setup#initialize_the_sdk\n *   Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a refresh token JSON file\n * var refreshToken = require(\"path/to/refreshToken.json\");\n * admin.initializeApp({\n *   credential: admin.credential.refreshToken(refreshToken),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param refreshTokenPathOrObject The path to a Google\n *   OAuth2 refresh token JSON file or an object representing a Google OAuth2\n *   refresh token.\n * @param httpAgent Optional [HTTP Agent](https://nodejs.org/api/http.html#http_class_http_agent)\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @return A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction refreshToken(refreshTokenPathOrObject, httpAgent) {\n    var stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n    if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n        globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_internal_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n    }\n    return globalRefreshTokenCreds[stringifiedRefreshToken];\n}\nexports.refreshToken = refreshToken;\n"]},"metadata":{},"sourceType":"script"}