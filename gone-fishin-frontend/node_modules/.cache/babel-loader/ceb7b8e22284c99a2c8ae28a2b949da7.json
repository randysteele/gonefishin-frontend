{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _get = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _construct = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/construct\");\n\nvar _toConsumableArray = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _inherits = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"./util\");\n\nvar validate_1 = require(\"./validate\");\n/*!\n * The default database ID for this Firestore client. We do not yet expose the\n * ability to use different databases.\n */\n\n\nexports.DEFAULT_DATABASE_ID = '(default)';\n/*!\n * A regular expression to verify an absolute Resource Path in Firestore. It\n * extracts the project ID, the database name and the relative resource path\n * if available.\n *\n * @type {RegExp}\n */\n\nvar RESOURCE_PATH_RE = // Note: [\\s\\S] matches all characters including newlines.\n/^projects\\/([^/]*)\\/databases\\/([^/]*)(?:\\/documents\\/)?([\\s\\S]*)$/;\n/*!\n * A regular expression to verify whether a field name can be passed to the\n * backend without escaping.\n *\n * @type {RegExp}\n */\n\nvar UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/*!\n * A regular expression to verify field paths that are passed to the API as\n * strings. Field paths that do not match this expression have to be provided\n * as a [FieldPath]{@link FieldPath} object.\n *\n * @type {RegExp}\n */\n\nvar FIELD_PATH_RE = /^[^*~/[\\]]+$/;\n/**\n * An abstract class representing a Firestore path.\n *\n * Subclasses have to implement `split()` and `canonicalString()`.\n *\n * @private\n * @class\n */\n\nvar Path = /*#__PURE__*/function () {\n  /**\n   * Creates a new Path with the given segments.\n   *\n   * @private\n   * @hideconstructor\n   * @param segments Sequence of parts of a path.\n   */\n  function Path(segments) {\n    _classCallCheck(this, Path);\n\n    this.segments = segments;\n  }\n  /**\n   * Returns the number of segments of this field path.\n   *\n   * @private\n   */\n\n\n  _createClass(Path, [{\n    key: \"append\",\n\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    value: function append(relativePath) {\n      if (relativePath instanceof Path) {\n        return this.construct(this.segments.concat(relativePath.segments));\n      }\n\n      return this.construct(this.segments.concat(this.split(relativePath)));\n    }\n    /**\n     * Returns the path of the parent node.\n     *\n     * @private\n     * @returns The new path or null if we are already at the root.\n     */\n\n  }, {\n    key: \"parent\",\n    value: function parent() {\n      if (this.segments.length === 0) {\n        return null;\n      }\n\n      return this.construct(this.segments.slice(0, this.segments.length - 1));\n    }\n    /**\n     * Checks whether the current path is a prefix of the specified path.\n     *\n     * @private\n     * @param other The path to check against.\n     * @returns 'true' iff the current path is a prefix match with 'other'.\n     */\n\n  }, {\n    key: \"isPrefixOf\",\n    value: function isPrefixOf(other) {\n      if (other.segments.length < this.segments.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.segments.length; i++) {\n        if (this.segments[i] !== other.segments[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Compare the current path against another Path object.\n     *\n     * @private\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      var len = Math.min(this.segments.length, other.segments.length);\n\n      for (var i = 0; i < len; i++) {\n        if (this.segments[i] < other.segments[i]) {\n          return -1;\n        }\n\n        if (this.segments[i] > other.segments[i]) {\n          return 1;\n        }\n      }\n\n      if (this.segments.length < other.segments.length) {\n        return -1;\n      }\n\n      if (this.segments.length > other.segments.length) {\n        return 1;\n      }\n\n      return 0;\n    }\n    /**\n     * Returns a copy of the underlying segments.\n     *\n     * @private\n     * @returns A copy of the segments that make up this path.\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.segments.slice();\n    }\n    /**\n     * Returns true if this `Path` is equal to the provided value.\n     *\n     * @private\n     * @param other The value to compare against.\n     * @return true if this `Path` is equal to the provided value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || this.compareTo(other) === 0;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.segments.length;\n    }\n  }]);\n\n  return Path;\n}();\n/**\n * A slash-separated path for navigating resources within the current Firestore\n * instance.\n *\n * @private\n */\n\n\nvar ResourcePath = /*#__PURE__*/function (_Path) {\n  _inherits(ResourcePath, _Path);\n\n  var _super = _createSuper(ResourcePath);\n\n  /**\n   * Constructs a ResourcePath.\n   *\n   * @private\n   * @param segments Sequence of names of the parts of the path.\n   */\n  function ResourcePath() {\n    _classCallCheck(this, ResourcePath);\n\n    for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n      segments[_key] = arguments[_key];\n    }\n\n    return _super.call(this, segments);\n  }\n  /**\n   * Indicates whether this path points to a document.\n   * @private\n   */\n\n\n  _createClass(ResourcePath, [{\n    key: \"construct\",\n\n    /**\n     * Constructs a new instance of ResourcePath.\n     *\n     * @private\n     * @param segments Sequence of parts of the path.\n     * @returns The newly created ResourcePath.\n     */\n    value: function construct(segments) {\n      return _construct(ResourcePath, _toConsumableArray(segments));\n    }\n    /**\n     * Splits a string into path segments, using slashes as separators.\n     *\n     * @private\n     * @param relativePath The path to split.\n     * @returns The split path segments.\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(relativePath) {\n      // We may have an empty segment at the beginning or end if they had a\n      // leading or trailing slash (which we allow).\n      return relativePath.split('/').filter(function (segment) {\n        return segment.length > 0;\n      });\n    }\n    /**\n     * Converts this path to a fully qualified ResourcePath.\n     *\n     * @private\n     * @param projectIdIfMissing The project ID of the current Firestore project.\n     * The project ID is only used if it's not provided as part of this\n     * ResourcePath.\n     * @return A fully-qualified resource path pointing to the same element.\n     */\n\n  }, {\n    key: \"toQualifiedResourcePath\",\n    value: function toQualifiedResourcePath(projectIdIfMissing) {\n      return _construct(QualifiedResourcePath, [projectIdIfMissing, exports.DEFAULT_DATABASE_ID].concat(_toConsumableArray(this.segments)));\n    }\n  }, {\n    key: \"isDocument\",\n    get: function get() {\n      return this.segments.length > 0 && this.segments.length % 2 === 0;\n    }\n    /**\n     * Indicates whether this path points to a collection.\n     * @private\n     */\n\n  }, {\n    key: \"isCollection\",\n    get: function get() {\n      return this.segments.length % 2 === 1;\n    }\n    /**\n     * The last component of the path.\n     * @private\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (this.segments.length > 0) {\n        return this.segments[this.segments.length - 1];\n      }\n\n      return null;\n    }\n    /**\n     * Returns the location of this path relative to the root of the project's\n     * database.\n     * @private\n     */\n\n  }, {\n    key: \"relativeName\",\n    get: function get() {\n      return this.segments.join('/');\n    }\n  }]);\n\n  return ResourcePath;\n}(Path);\n\nexports.ResourcePath = ResourcePath;\n/**\n * A default instance pointing to the root collection.\n * @private\n */\n\nResourcePath.EMPTY = new ResourcePath();\n/**\n * A slash-separated path that includes a project and database ID for referring\n * to resources in any Firestore project.\n *\n * @private\n */\n\nvar QualifiedResourcePath = /*#__PURE__*/function (_ResourcePath) {\n  _inherits(QualifiedResourcePath, _ResourcePath);\n\n  var _super2 = _createSuper(QualifiedResourcePath);\n\n  /**\n   * Constructs a Firestore Resource Path.\n   *\n   * @private\n   * @param projectId The Firestore project id.\n   * @param databaseId The Firestore database id.\n   * @param segments Sequence of names of the parts of the path.\n   */\n  function QualifiedResourcePath(projectId, databaseId) {\n    var _this;\n\n    _classCallCheck(this, QualifiedResourcePath);\n\n    for (var _len2 = arguments.length, segments = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      segments[_key2 - 2] = arguments[_key2];\n    }\n\n    _this = _super2.call.apply(_super2, [this].concat(segments));\n    _this.projectId = projectId;\n    _this.databaseId = databaseId;\n    return _this;\n  }\n  /**\n   * String representation of the path relative to the database root.\n   * @private\n   */\n\n\n  _createClass(QualifiedResourcePath, [{\n    key: \"append\",\n\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    value: function append(relativePath) {\n      // `super.append()` calls `QualifiedResourcePath.construct()` when invoked\n      // from here and returns a QualifiedResourcePath.\n      return _get(_getPrototypeOf(QualifiedResourcePath.prototype), \"append\", this).call(this, relativePath);\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @returns The new path.\n     */\n\n  }, {\n    key: \"parent\",\n    value: function parent() {\n      return _get(_getPrototypeOf(QualifiedResourcePath.prototype), \"parent\", this).call(this);\n    }\n    /**\n     * String representation of a ResourcePath as expected by the API.\n     *\n     * @private\n     * @returns The representation as expected by the API.\n     */\n\n  }, {\n    key: \"construct\",\n\n    /**\n     * Constructs a new instance of ResourcePath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @param segments Sequence of names of the parts of the path.\n     * @returns The newly created QualifiedResourcePath.\n     */\n    value: function construct(segments) {\n      return _construct(QualifiedResourcePath, [this.projectId, this.databaseId].concat(_toConsumableArray(segments)));\n    }\n    /**\n     * Convenience method to match the ResourcePath API. This method always\n     * returns the current instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"toQualifiedResourcePath\",\n    value: function toQualifiedResourcePath() {\n      return this;\n    }\n    /**\n     * Compare the current path against another ResourcePath object.\n     *\n     * @private\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      if (other instanceof QualifiedResourcePath) {\n        if (this.projectId < other.projectId) {\n          return -1;\n        }\n\n        if (this.projectId > other.projectId) {\n          return 1;\n        }\n\n        if (this.databaseId < other.databaseId) {\n          return -1;\n        }\n\n        if (this.databaseId > other.databaseId) {\n          return 1;\n        }\n      }\n\n      return _get(_getPrototypeOf(QualifiedResourcePath.prototype), \"compareTo\", this).call(this, other);\n    }\n    /**\n     * Converts this ResourcePath to the Firestore Proto representation.\n     * @private\n     */\n\n  }, {\n    key: \"toProto\",\n    value: function toProto() {\n      return {\n        referenceValue: this.formattedName\n      };\n    }\n  }, {\n    key: \"relativeName\",\n    get: function get() {\n      return this.segments.join('/');\n    }\n    /**\n     * Creates a resource path from an absolute Firestore path.\n     *\n     * @private\n     * @param absolutePath A string representation of a Resource Path.\n     * @returns The new ResourcePath.\n     */\n\n  }, {\n    key: \"formattedName\",\n    get: function get() {\n      var components = ['projects', this.projectId, 'databases', this.databaseId, 'documents'].concat(_toConsumableArray(this.segments));\n      return components.join('/');\n    }\n  }], [{\n    key: \"fromSlashSeparatedString\",\n    value: function fromSlashSeparatedString(absolutePath) {\n      var elements = RESOURCE_PATH_RE.exec(absolutePath);\n\n      if (elements) {\n        var project = elements[1];\n        var database = elements[2];\n        var path = elements[3];\n        return new QualifiedResourcePath(project, database).append(path);\n      }\n\n      throw new Error(\"Resource name '\".concat(absolutePath, \"' is not valid.\"));\n    }\n  }]);\n\n  return QualifiedResourcePath;\n}(ResourcePath);\n\nexports.QualifiedResourcePath = QualifiedResourcePath;\n/**\n * Validates that the given string can be used as a relative or absolute\n * resource path.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param resourcePath The path to validate.\n * @throws if the string can't be used as a resource path.\n */\n\nfunction validateResourcePath(arg, resourcePath) {\n  if (typeof resourcePath !== 'string' || resourcePath === '') {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'resource path'), \" Path must be a non-empty string.\"));\n  }\n\n  if (resourcePath.indexOf('//') >= 0) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'resource path'), \" Paths must not contain //.\"));\n  }\n}\n\nexports.validateResourcePath = validateResourcePath;\n/**\n * A dot-separated path for navigating sub-objects (e.g. nested maps) within a document.\n *\n * @class\n */\n\nvar FieldPath = /*#__PURE__*/function (_Path2) {\n  _inherits(FieldPath, _Path2);\n\n  var _super3 = _createSuper(FieldPath);\n\n  /**\n   * Constructs a Firestore Field Path.\n   *\n   * @param {...string} segments Sequence of field names that form this path.\n   *\n   * @example\n   * let query = firestore.collection('col');\n   * let fieldPath = new FieldPath('f.o.o', 'bar');\n   *\n   * query.where(fieldPath, '==', 42).get().then(snapshot => {\n   *   snapshot.forEach(document => {\n   *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);\n   *   });\n   * });\n   */\n  function FieldPath() {\n    _classCallCheck(this, FieldPath);\n\n    for (var _len3 = arguments.length, segments = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      segments[_key3] = arguments[_key3];\n    }\n\n    if (Array.isArray(segments[0])) {\n      throw new Error('The FieldPath constructor no longer supports an array as its first argument. ' + 'Please unpack your array and call FieldPath() with individual arguments.');\n    }\n\n    validate_1.validateMinNumberOfArguments('FieldPath', segments, 1);\n\n    for (var i = 0; i < segments.length; ++i) {\n      validate_1.validateString(i, segments[i]);\n\n      if (segments[i].length === 0) {\n        throw new Error(\"Element at index \".concat(i, \" should not be an empty string.\"));\n      }\n    }\n\n    return _super3.call(this, segments);\n  }\n  /**\n   * A special FieldPath value to refer to the ID of a document. It can be used\n   * in queries to sort or filter by the document ID.\n   *\n   * @returns {FieldPath}\n   */\n\n\n  _createClass(FieldPath, [{\n    key: \"toString\",\n\n    /**\n     * Returns a string representation of this path.\n     *\n     * @private\n     * @returns A string representing this path.\n     */\n    value: function toString() {\n      return this.formattedName;\n    }\n    /**\n     * Splits a string into path segments, using dots as separators.\n     *\n     * @private\n     * @override\n     * @param {string} fieldPath The path to split.\n     * @returns {Array.<string>} - The split path segments.\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(fieldPath) {\n      return fieldPath.split('.');\n    }\n    /**\n     * Constructs a new instance of FieldPath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @override\n     * @param segments Sequence of field names.\n     * @returns The newly created FieldPath.\n     */\n\n  }, {\n    key: \"construct\",\n    value: function construct(segments) {\n      return _construct(FieldPath, _toConsumableArray(segments));\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldPath` is equal to the provided value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return _get(_getPrototypeOf(FieldPath.prototype), \"isEqual\", this).call(this, other);\n    }\n  }, {\n    key: \"formattedName\",\n\n    /**\n     * String representation of a FieldPath as expected by the API.\n     *\n     * @private\n     * @override\n     * @returns {string} The representation as expected by the API.\n     */\n    get: function get() {\n      return this.segments.map(function (str) {\n        return UNESCAPED_FIELD_NAME_RE.test(str) ? str : '`' + str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`') + '`';\n      }).join('.');\n    }\n  }], [{\n    key: \"documentId\",\n    value: function documentId() {\n      return FieldPath._DOCUMENT_ID;\n    }\n    /**\n     * Turns a field path argument into a [FieldPath]{@link FieldPath}.\n     * Supports FieldPaths as input (which are passed through) and dot-separated\n     * strings.\n     *\n     * @private\n     * @param {string|FieldPath} fieldPath The FieldPath to create.\n     * @returns {FieldPath} A field path representation.\n     */\n\n  }, {\n    key: \"fromArgument\",\n    value: function fromArgument(fieldPath) {\n      // validateFieldPath() is used in all public API entry points to validate\n      // that fromArgument() is only called with a Field Path or a string.\n      return fieldPath instanceof FieldPath ? fieldPath : _construct(FieldPath, _toConsumableArray(fieldPath.split('.')));\n    }\n  }]);\n\n  return FieldPath;\n}(Path);\n\nexports.FieldPath = FieldPath;\n/**\n * A special sentinel value to refer to the ID of a document.\n *\n * @private\n */\n\nFieldPath._DOCUMENT_ID = new FieldPath('__name__');\n/**\n * Validates that the provided value can be used as a field path argument.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param fieldPath The value to verify.\n * @throws if the string can't be used as a field path.\n */\n\nfunction validateFieldPath(arg, fieldPath) {\n  if (fieldPath instanceof FieldPath) {\n    return;\n  }\n\n  if (fieldPath === undefined) {\n    throw new Error(validate_1.invalidArgumentMessage(arg, 'field path') + ' The path cannot be omitted.');\n  }\n\n  if (util_1.isObject(fieldPath) && fieldPath.constructor.name === 'FieldPath') {\n    throw new Error(validate_1.customObjectMessage(arg, fieldPath));\n  }\n\n  if (typeof fieldPath !== 'string') {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'field path'), \" Paths can only be specified as strings or via a FieldPath object.\"));\n  }\n\n  if (fieldPath.indexOf('..') >= 0) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'field path'), \" Paths must not contain \\\"..\\\" in them.\"));\n  }\n\n  if (fieldPath.startsWith('.') || fieldPath.endsWith('.')) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'field path'), \" Paths must not start or end with \\\".\\\".\"));\n  }\n\n  if (!FIELD_PATH_RE.test(fieldPath)) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'field path'), \" Paths can't be empty and must not contain\\n    \\\"*~/[]\\\".\"));\n  }\n}\n\nexports.validateFieldPath = validateFieldPath;","map":{"version":3,"sources":["/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/@google-cloud/firestore/build/src/path.js"],"names":["Object","defineProperty","exports","value","util_1","require","validate_1","DEFAULT_DATABASE_ID","RESOURCE_PATH_RE","UNESCAPED_FIELD_NAME_RE","FIELD_PATH_RE","Path","segments","relativePath","construct","concat","split","length","slice","other","i","len","Math","min","compareTo","ResourcePath","filter","segment","projectIdIfMissing","QualifiedResourcePath","join","EMPTY","projectId","databaseId","referenceValue","formattedName","components","absolutePath","elements","exec","project","database","path","append","Error","validateResourcePath","arg","resourcePath","invalidArgumentMessage","indexOf","FieldPath","Array","isArray","validateMinNumberOfArguments","validateString","fieldPath","map","str","test","replace","_DOCUMENT_ID","validateFieldPath","undefined","isObject","constructor","name","customObjectMessage","startsWith","endsWith"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;AACA;;;;;;AAIAH,OAAO,CAACK,mBAAR,GAA8B,WAA9B;AACA;;;;;;;;AAOA,IAAMC,gBAAgB,GACtB;AACA,oEAFA;AAGA;;;;;;;AAMA,IAAMC,uBAAuB,GAAG,0BAAhC;AACA;;;;;;;;AAOA,IAAMC,aAAa,GAAG,cAAtB;AACA;;;;;;;;;IAQMC,I;AACF;;;;;;;AAOA,gBAAYC,QAAZ,EAAsB;AAAA;;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;AACD;;;;;;;;;;AAQA;;;;;;;2BAOOC,Y,EAAc;AACjB,UAAIA,YAAY,YAAYF,IAA5B,EAAkC;AAC9B,eAAO,KAAKG,SAAL,CAAe,KAAKF,QAAL,CAAcG,MAAd,CAAqBF,YAAY,CAACD,QAAlC,CAAf,CAAP;AACH;;AACD,aAAO,KAAKE,SAAL,CAAe,KAAKF,QAAL,CAAcG,MAAd,CAAqB,KAAKC,KAAL,CAAWH,YAAX,CAArB,CAAf,CAAP;AACH;AACD;;;;;;;;;6BAMS;AACL,UAAI,KAAKD,QAAL,CAAcK,MAAd,KAAyB,CAA7B,EAAgC;AAC5B,eAAO,IAAP;AACH;;AACD,aAAO,KAAKH,SAAL,CAAe,KAAKF,QAAL,CAAcM,KAAd,CAAoB,CAApB,EAAuB,KAAKN,QAAL,CAAcK,MAAd,GAAuB,CAA9C,CAAf,CAAP;AACH;AACD;;;;;;;;;;+BAOWE,K,EAAO;AACd,UAAIA,KAAK,CAACP,QAAN,CAAeK,MAAf,GAAwB,KAAKL,QAAL,CAAcK,MAA1C,EAAkD;AAC9C,eAAO,KAAP;AACH;;AACD,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,QAAL,CAAcK,MAAlC,EAA0CG,CAAC,EAA3C,EAA+C;AAC3C,YAAI,KAAKR,QAAL,CAAcQ,CAAd,MAAqBD,KAAK,CAACP,QAAN,CAAeQ,CAAf,CAAzB,EAA4C;AACxC,iBAAO,KAAP;AACH;AACJ;;AACD,aAAO,IAAP;AACH;AACD;;;;;;;;;;8BAOUD,K,EAAO;AACb,UAAME,GAAG,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKX,QAAL,CAAcK,MAAvB,EAA+BE,KAAK,CAACP,QAAN,CAAeK,MAA9C,CAAZ;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,GAApB,EAAyBD,CAAC,EAA1B,EAA8B;AAC1B,YAAI,KAAKR,QAAL,CAAcQ,CAAd,IAAmBD,KAAK,CAACP,QAAN,CAAeQ,CAAf,CAAvB,EAA0C;AACtC,iBAAO,CAAC,CAAR;AACH;;AACD,YAAI,KAAKR,QAAL,CAAcQ,CAAd,IAAmBD,KAAK,CAACP,QAAN,CAAeQ,CAAf,CAAvB,EAA0C;AACtC,iBAAO,CAAP;AACH;AACJ;;AACD,UAAI,KAAKR,QAAL,CAAcK,MAAd,GAAuBE,KAAK,CAACP,QAAN,CAAeK,MAA1C,EAAkD;AAC9C,eAAO,CAAC,CAAR;AACH;;AACD,UAAI,KAAKL,QAAL,CAAcK,MAAd,GAAuBE,KAAK,CAACP,QAAN,CAAeK,MAA1C,EAAkD;AAC9C,eAAO,CAAP;AACH;;AACD,aAAO,CAAP;AACH;AACD;;;;;;;;;8BAMU;AACN,aAAO,KAAKL,QAAL,CAAcM,KAAd,EAAP;AACH;AACD;;;;;;;;;;4BAOQC,K,EAAO;AACX,aAAO,SAASA,KAAT,IAAkB,KAAKK,SAAL,CAAeL,KAAf,MAA0B,CAAnD;AACH;;;wBAzFU;AACP,aAAO,KAAKP,QAAL,CAAcK,MAArB;AACH;;;;;AAyFL;;;;;;;;IAMMQ,Y;;;;;AACF;;;;;;AAMA,0BAAyB;AAAA;;AAAA,sCAAVb,QAAU;AAAVA,MAAAA,QAAU;AAAA;;AAAA,6BACfA,QADe;AAExB;AACD;;;;;;;;;AAgCA;;;;;;;8BAOUA,Q,EAAU;AAChB,wBAAWa,YAAX,qBAA2Bb,QAA3B;AACH;AACD;;;;;;;;;;0BAOMC,Y,EAAc;AAChB;AACA;AACA,aAAOA,YAAY,CAACG,KAAb,CAAmB,GAAnB,EAAwBU,MAAxB,CAA+B,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACV,MAAR,GAAiB,CAArB;AAAA,OAAtC,CAAP;AACH;AACD;;;;;;;;;;;;4CASwBW,kB,EAAoB;AACxC,wBAAWC,qBAAX,GAAiCD,kBAAjC,EAAqD1B,OAAO,CAACK,mBAA7D,4BAAqF,KAAKK,QAA1F;AACH;;;wBA7DgB;AACb,aAAO,KAAKA,QAAL,CAAcK,MAAd,GAAuB,CAAvB,IAA4B,KAAKL,QAAL,CAAcK,MAAd,GAAuB,CAAvB,KAA6B,CAAhE;AACH;AACD;;;;;;;wBAImB;AACf,aAAO,KAAKL,QAAL,CAAcK,MAAd,GAAuB,CAAvB,KAA6B,CAApC;AACH;AACD;;;;;;;wBAIS;AACL,UAAI,KAAKL,QAAL,CAAcK,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,eAAO,KAAKL,QAAL,CAAc,KAAKA,QAAL,CAAcK,MAAd,GAAuB,CAArC,CAAP;AACH;;AACD,aAAO,IAAP;AACH;AACD;;;;;;;;wBAKmB;AACf,aAAO,KAAKL,QAAL,CAAckB,IAAd,CAAmB,GAAnB,CAAP;AACH;;;;EAzCsBnB,I;;AA6E3BT,OAAO,CAACuB,YAAR,GAAuBA,YAAvB;AACA;;;;;AAIAA,YAAY,CAACM,KAAb,GAAqB,IAAIN,YAAJ,EAArB;AACA;;;;;;;IAMMI,qB;;;;;AACF;;;;;;;;AAQA,iCAAYG,SAAZ,EAAuBC,UAAvB,EAAgD;AAAA;;AAAA;;AAAA,uCAAVrB,QAAU;AAAVA,MAAAA,QAAU;AAAA;;AAC5C,sDAASA,QAAT;AACA,UAAKoB,SAAL,GAAiBA,SAAjB;AACA,UAAKC,UAAL,GAAkBA,UAAlB;AAH4C;AAI/C;AACD;;;;;;;;;AAwBA;;;;;;;2BAOOpB,Y,EAAc;AACjB;AACA;AACA,+FAAoBA,YAApB;AACH;AACD;;;;;;;;;6BAMS;AACL;AACH;AACD;;;;;;;;;;AAiBA;;;;;;;;;8BASUD,Q,EAAU;AAChB,wBAAWiB,qBAAX,GAAiC,KAAKG,SAAtC,EAAiD,KAAKC,UAAtD,4BAAqErB,QAArE;AACH;AACD;;;;;;;;;8CAM0B;AACtB,aAAO,IAAP;AACH;AACD;;;;;;;;;;8BAOUO,K,EAAO;AACb,UAAIA,KAAK,YAAYU,qBAArB,EAA4C;AACxC,YAAI,KAAKG,SAAL,GAAiBb,KAAK,CAACa,SAA3B,EAAsC;AAClC,iBAAO,CAAC,CAAR;AACH;;AACD,YAAI,KAAKA,SAAL,GAAiBb,KAAK,CAACa,SAA3B,EAAsC;AAClC,iBAAO,CAAP;AACH;;AACD,YAAI,KAAKC,UAAL,GAAkBd,KAAK,CAACc,UAA5B,EAAwC;AACpC,iBAAO,CAAC,CAAR;AACH;;AACD,YAAI,KAAKA,UAAL,GAAkBd,KAAK,CAACc,UAA5B,EAAwC;AACpC,iBAAO,CAAP;AACH;AACJ;;AACD,kGAAuBd,KAAvB;AACH;AACD;;;;;;;8BAIU;AACN,aAAO;AACHe,QAAAA,cAAc,EAAE,KAAKC;AADlB,OAAP;AAGH;;;wBA/GkB;AACf,aAAO,KAAKvB,QAAL,CAAckB,IAAd,CAAmB,GAAnB,CAAP;AACH;AACD;;;;;;;;;;wBA4CoB;AAChB,UAAMM,UAAU,IACZ,UADY,EAEZ,KAAKJ,SAFO,EAGZ,WAHY,EAIZ,KAAKC,UAJO,EAKZ,WALY,4BAMT,KAAKrB,QANI,EAAhB;AAQA,aAAOwB,UAAU,CAACN,IAAX,CAAgB,GAAhB,CAAP;AACH;;;6CA/C+BO,Y,EAAc;AAC1C,UAAMC,QAAQ,GAAG9B,gBAAgB,CAAC+B,IAAjB,CAAsBF,YAAtB,CAAjB;;AACA,UAAIC,QAAJ,EAAc;AACV,YAAME,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAxB;AACA,YAAMG,QAAQ,GAAGH,QAAQ,CAAC,CAAD,CAAzB;AACA,YAAMI,IAAI,GAAGJ,QAAQ,CAAC,CAAD,CAArB;AACA,eAAO,IAAIT,qBAAJ,CAA0BW,OAA1B,EAAmCC,QAAnC,EAA6CE,MAA7C,CAAoDD,IAApD,CAAP;AACH;;AACD,YAAM,IAAIE,KAAJ,0BAA4BP,YAA5B,qBAAN;AACH;;;;EArC+BZ,Y;;AAmIpCvB,OAAO,CAAC2B,qBAAR,GAAgCA,qBAAhC;AACA;;;;;;;;;;AASA,SAASgB,oBAAT,CAA8BC,GAA9B,EAAmCC,YAAnC,EAAiD;AAC7C,MAAI,OAAOA,YAAP,KAAwB,QAAxB,IAAoCA,YAAY,KAAK,EAAzD,EAA6D;AACzD,UAAM,IAAIH,KAAJ,WAAatC,UAAU,CAAC0C,sBAAX,CAAkCF,GAAlC,EAAuC,eAAvC,CAAb,uCAAN;AACH;;AACD,MAAIC,YAAY,CAACE,OAAb,CAAqB,IAArB,KAA8B,CAAlC,EAAqC;AACjC,UAAM,IAAIL,KAAJ,WAAatC,UAAU,CAAC0C,sBAAX,CAAkCF,GAAlC,EAAuC,eAAvC,CAAb,iCAAN;AACH;AACJ;;AACD5C,OAAO,CAAC2C,oBAAR,GAA+BA,oBAA/B;AACA;;;;;;IAKMK,S;;;;;AACF;;;;;;;;;;;;;;;AAeA,uBAAyB;AAAA;;AAAA,uCAAVtC,QAAU;AAAVA,MAAAA,QAAU;AAAA;;AACrB,QAAIuC,KAAK,CAACC,OAAN,CAAcxC,QAAQ,CAAC,CAAD,CAAtB,CAAJ,EAAgC;AAC5B,YAAM,IAAIgC,KAAJ,CAAU,kFACZ,0EADE,CAAN;AAEH;;AACDtC,IAAAA,UAAU,CAAC+C,4BAAX,CAAwC,WAAxC,EAAqDzC,QAArD,EAA+D,CAA/D;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAAQ,CAACK,MAA7B,EAAqC,EAAEG,CAAvC,EAA0C;AACtCd,MAAAA,UAAU,CAACgD,cAAX,CAA0BlC,CAA1B,EAA6BR,QAAQ,CAACQ,CAAD,CAArC;;AACA,UAAIR,QAAQ,CAACQ,CAAD,CAAR,CAAYH,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,cAAM,IAAI2B,KAAJ,4BAA8BxB,CAA9B,qCAAN;AACH;AACJ;;AAXoB,8BAYfR,QAZe;AAaxB;AACD;;;;;;;;;;;AAyCA;;;;;;+BAMW;AACP,aAAO,KAAKuB,aAAZ;AACH;AACD;;;;;;;;;;;0BAQMoB,S,EAAW;AACb,aAAOA,SAAS,CAACvC,KAAV,CAAgB,GAAhB,CAAP;AACH;AACD;;;;;;;;;;;;;8BAUUJ,Q,EAAU;AAChB,wBAAWsC,SAAX,qBAAwBtC,QAAxB;AACH;AACD;;;;;;;;;4BAMQO,K,EAAO;AACX,oFAAqBA,KAArB;AACH;;;;AAzDD;;;;;;;wBAOoB;AAChB,aAAO,KAAKP,QAAL,CACF4C,GADE,CACE,UAAAC,GAAG,EAAI;AACZ,eAAOhD,uBAAuB,CAACiD,IAAxB,CAA6BD,GAA7B,IACDA,GADC,GAED,MAAMA,GAAG,CAACE,OAAJ,CAAY,IAAZ,EAAkB,MAAlB,EAA0BA,OAA1B,CAAkC,GAAlC,EAAuC,KAAvC,CAAN,GAAsD,GAF5D;AAGH,OALM,EAMF7B,IANE,CAMG,GANH,CAAP;AAOH;;;iCAlCmB;AAChB,aAAOoB,SAAS,CAACU,YAAjB;AACH;AACD;;;;;;;;;;;;iCASoBL,S,EAAW;AAC3B;AACA;AACA,aAAOA,SAAS,YAAYL,SAArB,GACDK,SADC,cAEGL,SAFH,qBAEgBK,SAAS,CAACvC,KAAV,CAAgB,GAAhB,CAFhB,EAAP;AAGH;;;;EAtDmBL,I;;AAkHxBT,OAAO,CAACgD,SAAR,GAAoBA,SAApB;AACA;;;;;;AAKAA,SAAS,CAACU,YAAV,GAAyB,IAAIV,SAAJ,CAAc,UAAd,CAAzB;AACA;;;;;;;;;AAQA,SAASW,iBAAT,CAA2Bf,GAA3B,EAAgCS,SAAhC,EAA2C;AACvC,MAAIA,SAAS,YAAYL,SAAzB,EAAoC;AAChC;AACH;;AACD,MAAIK,SAAS,KAAKO,SAAlB,EAA6B;AACzB,UAAM,IAAIlB,KAAJ,CAAUtC,UAAU,CAAC0C,sBAAX,CAAkCF,GAAlC,EAAuC,YAAvC,IAAuD,8BAAjE,CAAN;AACH;;AACD,MAAI1C,MAAM,CAAC2D,QAAP,CAAgBR,SAAhB,KAA8BA,SAAS,CAACS,WAAV,CAAsBC,IAAtB,KAA+B,WAAjE,EAA8E;AAC1E,UAAM,IAAIrB,KAAJ,CAAUtC,UAAU,CAAC4D,mBAAX,CAA+BpB,GAA/B,EAAoCS,SAApC,CAAV,CAAN;AACH;;AACD,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AAC/B,UAAM,IAAIX,KAAJ,WAAatC,UAAU,CAAC0C,sBAAX,CAAkCF,GAAlC,EAAuC,YAAvC,CAAb,wEAAN;AACH;;AACD,MAAIS,SAAS,CAACN,OAAV,CAAkB,IAAlB,KAA2B,CAA/B,EAAkC;AAC9B,UAAM,IAAIL,KAAJ,WAAatC,UAAU,CAAC0C,sBAAX,CAAkCF,GAAlC,EAAuC,YAAvC,CAAb,6CAAN;AACH;;AACD,MAAIS,SAAS,CAACY,UAAV,CAAqB,GAArB,KAA6BZ,SAAS,CAACa,QAAV,CAAmB,GAAnB,CAAjC,EAA0D;AACtD,UAAM,IAAIxB,KAAJ,WAAatC,UAAU,CAAC0C,sBAAX,CAAkCF,GAAlC,EAAuC,YAAvC,CAAb,8CAAN;AACH;;AACD,MAAI,CAACpC,aAAa,CAACgD,IAAd,CAAmBH,SAAnB,CAAL,EAAoC;AAChC,UAAM,IAAIX,KAAJ,WAAatC,UAAU,CAAC0C,sBAAX,CAAkCF,GAAlC,EAAuC,YAAvC,CAAb,gEAAN;AAEH;AACJ;;AACD5C,OAAO,CAAC2D,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/*!\n * The default database ID for this Firestore client. We do not yet expose the\n * ability to use different databases.\n */\nexports.DEFAULT_DATABASE_ID = '(default)';\n/*!\n * A regular expression to verify an absolute Resource Path in Firestore. It\n * extracts the project ID, the database name and the relative resource path\n * if available.\n *\n * @type {RegExp}\n */\nconst RESOURCE_PATH_RE = \n// Note: [\\s\\S] matches all characters including newlines.\n/^projects\\/([^/]*)\\/databases\\/([^/]*)(?:\\/documents\\/)?([\\s\\S]*)$/;\n/*!\n * A regular expression to verify whether a field name can be passed to the\n * backend without escaping.\n *\n * @type {RegExp}\n */\nconst UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/*!\n * A regular expression to verify field paths that are passed to the API as\n * strings. Field paths that do not match this expression have to be provided\n * as a [FieldPath]{@link FieldPath} object.\n *\n * @type {RegExp}\n */\nconst FIELD_PATH_RE = /^[^*~/[\\]]+$/;\n/**\n * An abstract class representing a Firestore path.\n *\n * Subclasses have to implement `split()` and `canonicalString()`.\n *\n * @private\n * @class\n */\nclass Path {\n    /**\n     * Creates a new Path with the given segments.\n     *\n     * @private\n     * @hideconstructor\n     * @param segments Sequence of parts of a path.\n     */\n    constructor(segments) {\n        this.segments = segments;\n    }\n    /**\n     * Returns the number of segments of this field path.\n     *\n     * @private\n     */\n    get size() {\n        return this.segments.length;\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    append(relativePath) {\n        if (relativePath instanceof Path) {\n            return this.construct(this.segments.concat(relativePath.segments));\n        }\n        return this.construct(this.segments.concat(this.split(relativePath)));\n    }\n    /**\n     * Returns the path of the parent node.\n     *\n     * @private\n     * @returns The new path or null if we are already at the root.\n     */\n    parent() {\n        if (this.segments.length === 0) {\n            return null;\n        }\n        return this.construct(this.segments.slice(0, this.segments.length - 1));\n    }\n    /**\n     * Checks whether the current path is a prefix of the specified path.\n     *\n     * @private\n     * @param other The path to check against.\n     * @returns 'true' iff the current path is a prefix match with 'other'.\n     */\n    isPrefixOf(other) {\n        if (other.segments.length < this.segments.length) {\n            return false;\n        }\n        for (let i = 0; i < this.segments.length; i++) {\n            if (this.segments[i] !== other.segments[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Compare the current path against another Path object.\n     *\n     * @private\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n    compareTo(other) {\n        const len = Math.min(this.segments.length, other.segments.length);\n        for (let i = 0; i < len; i++) {\n            if (this.segments[i] < other.segments[i]) {\n                return -1;\n            }\n            if (this.segments[i] > other.segments[i]) {\n                return 1;\n            }\n        }\n        if (this.segments.length < other.segments.length) {\n            return -1;\n        }\n        if (this.segments.length > other.segments.length) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     * Returns a copy of the underlying segments.\n     *\n     * @private\n     * @returns A copy of the segments that make up this path.\n     */\n    toArray() {\n        return this.segments.slice();\n    }\n    /**\n     * Returns true if this `Path` is equal to the provided value.\n     *\n     * @private\n     * @param other The value to compare against.\n     * @return true if this `Path` is equal to the provided value.\n     */\n    isEqual(other) {\n        return this === other || this.compareTo(other) === 0;\n    }\n}\n/**\n * A slash-separated path for navigating resources within the current Firestore\n * instance.\n *\n * @private\n */\nclass ResourcePath extends Path {\n    /**\n     * Constructs a ResourcePath.\n     *\n     * @private\n     * @param segments Sequence of names of the parts of the path.\n     */\n    constructor(...segments) {\n        super(segments);\n    }\n    /**\n     * Indicates whether this path points to a document.\n     * @private\n     */\n    get isDocument() {\n        return this.segments.length > 0 && this.segments.length % 2 === 0;\n    }\n    /**\n     * Indicates whether this path points to a collection.\n     * @private\n     */\n    get isCollection() {\n        return this.segments.length % 2 === 1;\n    }\n    /**\n     * The last component of the path.\n     * @private\n     */\n    get id() {\n        if (this.segments.length > 0) {\n            return this.segments[this.segments.length - 1];\n        }\n        return null;\n    }\n    /**\n     * Returns the location of this path relative to the root of the project's\n     * database.\n     * @private\n     */\n    get relativeName() {\n        return this.segments.join('/');\n    }\n    /**\n     * Constructs a new instance of ResourcePath.\n     *\n     * @private\n     * @param segments Sequence of parts of the path.\n     * @returns The newly created ResourcePath.\n     */\n    construct(segments) {\n        return new ResourcePath(...segments);\n    }\n    /**\n     * Splits a string into path segments, using slashes as separators.\n     *\n     * @private\n     * @param relativePath The path to split.\n     * @returns The split path segments.\n     */\n    split(relativePath) {\n        // We may have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        return relativePath.split('/').filter(segment => segment.length > 0);\n    }\n    /**\n     * Converts this path to a fully qualified ResourcePath.\n     *\n     * @private\n     * @param projectIdIfMissing The project ID of the current Firestore project.\n     * The project ID is only used if it's not provided as part of this\n     * ResourcePath.\n     * @return A fully-qualified resource path pointing to the same element.\n     */\n    toQualifiedResourcePath(projectIdIfMissing) {\n        return new QualifiedResourcePath(projectIdIfMissing, exports.DEFAULT_DATABASE_ID, ...this.segments);\n    }\n}\nexports.ResourcePath = ResourcePath;\n/**\n * A default instance pointing to the root collection.\n * @private\n */\nResourcePath.EMPTY = new ResourcePath();\n/**\n * A slash-separated path that includes a project and database ID for referring\n * to resources in any Firestore project.\n *\n * @private\n */\nclass QualifiedResourcePath extends ResourcePath {\n    /**\n     * Constructs a Firestore Resource Path.\n     *\n     * @private\n     * @param projectId The Firestore project id.\n     * @param databaseId The Firestore database id.\n     * @param segments Sequence of names of the parts of the path.\n     */\n    constructor(projectId, databaseId, ...segments) {\n        super(...segments);\n        this.projectId = projectId;\n        this.databaseId = databaseId;\n    }\n    /**\n     * String representation of the path relative to the database root.\n     * @private\n     */\n    get relativeName() {\n        return this.segments.join('/');\n    }\n    /**\n     * Creates a resource path from an absolute Firestore path.\n     *\n     * @private\n     * @param absolutePath A string representation of a Resource Path.\n     * @returns The new ResourcePath.\n     */\n    static fromSlashSeparatedString(absolutePath) {\n        const elements = RESOURCE_PATH_RE.exec(absolutePath);\n        if (elements) {\n            const project = elements[1];\n            const database = elements[2];\n            const path = elements[3];\n            return new QualifiedResourcePath(project, database).append(path);\n        }\n        throw new Error(`Resource name '${absolutePath}' is not valid.`);\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    append(relativePath) {\n        // `super.append()` calls `QualifiedResourcePath.construct()` when invoked\n        // from here and returns a QualifiedResourcePath.\n        return super.append(relativePath);\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @returns The new path.\n     */\n    parent() {\n        return super.parent();\n    }\n    /**\n     * String representation of a ResourcePath as expected by the API.\n     *\n     * @private\n     * @returns The representation as expected by the API.\n     */\n    get formattedName() {\n        const components = [\n            'projects',\n            this.projectId,\n            'databases',\n            this.databaseId,\n            'documents',\n            ...this.segments,\n        ];\n        return components.join('/');\n    }\n    /**\n     * Constructs a new instance of ResourcePath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @param segments Sequence of names of the parts of the path.\n     * @returns The newly created QualifiedResourcePath.\n     */\n    construct(segments) {\n        return new QualifiedResourcePath(this.projectId, this.databaseId, ...segments);\n    }\n    /**\n     * Convenience method to match the ResourcePath API. This method always\n     * returns the current instance.\n     *\n     * @private\n     */\n    toQualifiedResourcePath() {\n        return this;\n    }\n    /**\n     * Compare the current path against another ResourcePath object.\n     *\n     * @private\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n    compareTo(other) {\n        if (other instanceof QualifiedResourcePath) {\n            if (this.projectId < other.projectId) {\n                return -1;\n            }\n            if (this.projectId > other.projectId) {\n                return 1;\n            }\n            if (this.databaseId < other.databaseId) {\n                return -1;\n            }\n            if (this.databaseId > other.databaseId) {\n                return 1;\n            }\n        }\n        return super.compareTo(other);\n    }\n    /**\n     * Converts this ResourcePath to the Firestore Proto representation.\n     * @private\n     */\n    toProto() {\n        return {\n            referenceValue: this.formattedName,\n        };\n    }\n}\nexports.QualifiedResourcePath = QualifiedResourcePath;\n/**\n * Validates that the given string can be used as a relative or absolute\n * resource path.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param resourcePath The path to validate.\n * @throws if the string can't be used as a resource path.\n */\nfunction validateResourcePath(arg, resourcePath) {\n    if (typeof resourcePath !== 'string' || resourcePath === '') {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'resource path')} Path must be a non-empty string.`);\n    }\n    if (resourcePath.indexOf('//') >= 0) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'resource path')} Paths must not contain //.`);\n    }\n}\nexports.validateResourcePath = validateResourcePath;\n/**\n * A dot-separated path for navigating sub-objects (e.g. nested maps) within a document.\n *\n * @class\n */\nclass FieldPath extends Path {\n    /**\n     * Constructs a Firestore Field Path.\n     *\n     * @param {...string} segments Sequence of field names that form this path.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     * let fieldPath = new FieldPath('f.o.o', 'bar');\n     *\n     * query.where(fieldPath, '==', 42).get().then(snapshot => {\n     *   snapshot.forEach(document => {\n     *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);\n     *   });\n     * });\n     */\n    constructor(...segments) {\n        if (Array.isArray(segments[0])) {\n            throw new Error('The FieldPath constructor no longer supports an array as its first argument. ' +\n                'Please unpack your array and call FieldPath() with individual arguments.');\n        }\n        validate_1.validateMinNumberOfArguments('FieldPath', segments, 1);\n        for (let i = 0; i < segments.length; ++i) {\n            validate_1.validateString(i, segments[i]);\n            if (segments[i].length === 0) {\n                throw new Error(`Element at index ${i} should not be an empty string.`);\n            }\n        }\n        super(segments);\n    }\n    /**\n     * A special FieldPath value to refer to the ID of a document. It can be used\n     * in queries to sort or filter by the document ID.\n     *\n     * @returns {FieldPath}\n     */\n    static documentId() {\n        return FieldPath._DOCUMENT_ID;\n    }\n    /**\n     * Turns a field path argument into a [FieldPath]{@link FieldPath}.\n     * Supports FieldPaths as input (which are passed through) and dot-separated\n     * strings.\n     *\n     * @private\n     * @param {string|FieldPath} fieldPath The FieldPath to create.\n     * @returns {FieldPath} A field path representation.\n     */\n    static fromArgument(fieldPath) {\n        // validateFieldPath() is used in all public API entry points to validate\n        // that fromArgument() is only called with a Field Path or a string.\n        return fieldPath instanceof FieldPath\n            ? fieldPath\n            : new FieldPath(...fieldPath.split('.'));\n    }\n    /**\n     * String representation of a FieldPath as expected by the API.\n     *\n     * @private\n     * @override\n     * @returns {string} The representation as expected by the API.\n     */\n    get formattedName() {\n        return this.segments\n            .map(str => {\n            return UNESCAPED_FIELD_NAME_RE.test(str)\n                ? str\n                : '`' + str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`') + '`';\n        })\n            .join('.');\n    }\n    /**\n     * Returns a string representation of this path.\n     *\n     * @private\n     * @returns A string representing this path.\n     */\n    toString() {\n        return this.formattedName;\n    }\n    /**\n     * Splits a string into path segments, using dots as separators.\n     *\n     * @private\n     * @override\n     * @param {string} fieldPath The path to split.\n     * @returns {Array.<string>} - The split path segments.\n     */\n    split(fieldPath) {\n        return fieldPath.split('.');\n    }\n    /**\n     * Constructs a new instance of FieldPath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @override\n     * @param segments Sequence of field names.\n     * @returns The newly created FieldPath.\n     */\n    construct(segments) {\n        return new FieldPath(...segments);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldPath` is equal to the provided value.\n     */\n    isEqual(other) {\n        return super.isEqual(other);\n    }\n}\nexports.FieldPath = FieldPath;\n/**\n * A special sentinel value to refer to the ID of a document.\n *\n * @private\n */\nFieldPath._DOCUMENT_ID = new FieldPath('__name__');\n/**\n * Validates that the provided value can be used as a field path argument.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param fieldPath The value to verify.\n * @throws if the string can't be used as a field path.\n */\nfunction validateFieldPath(arg, fieldPath) {\n    if (fieldPath instanceof FieldPath) {\n        return;\n    }\n    if (fieldPath === undefined) {\n        throw new Error(validate_1.invalidArgumentMessage(arg, 'field path') + ' The path cannot be omitted.');\n    }\n    if (util_1.isObject(fieldPath) && fieldPath.constructor.name === 'FieldPath') {\n        throw new Error(validate_1.customObjectMessage(arg, fieldPath));\n    }\n    if (typeof fieldPath !== 'string') {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths can only be specified as strings or via a FieldPath object.`);\n    }\n    if (fieldPath.indexOf('..') >= 0) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths must not contain \"..\" in them.`);\n    }\n    if (fieldPath.startsWith('.') || fieldPath.endsWith('.')) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths must not start or end with \".\".`);\n    }\n    if (!FIELD_PATH_RE.test(fieldPath)) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths can't be empty and must not contain\n    \"*~/[]\".`);\n    }\n}\nexports.validateFieldPath = validateFieldPath;\n//# sourceMappingURL=path.js.map"]},"metadata":{},"sourceType":"script"}