{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _slicedToArray = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar google_gax_1 = require(\"google-gax\");\n\nvar stream_1 = require(\"stream\");\n\nvar url_1 = require(\"url\");\n\nvar backoff_1 = require(\"./backoff\");\n\nvar bulk_writer_1 = require(\"./bulk-writer\");\n\nvar bundle_1 = require(\"./bundle\");\n\nvar convert_1 = require(\"./convert\");\n\nvar document_1 = require(\"./document\");\n\nvar logger_1 = require(\"./logger\");\n\nvar path_1 = require(\"./path\");\n\nvar pool_1 = require(\"./pool\");\n\nvar reference_1 = require(\"./reference\");\n\nvar reference_2 = require(\"./reference\");\n\nvar serializer_1 = require(\"./serializer\");\n\nvar timestamp_1 = require(\"./timestamp\");\n\nvar transaction_1 = require(\"./transaction\");\n\nvar util_1 = require(\"./util\");\n\nvar validate_1 = require(\"./validate\");\n\nvar write_batch_1 = require(\"./write-batch\");\n\nvar firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\n\nvar serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\n\nvar reference_3 = require(\"./reference\");\n\nexports.CollectionReference = reference_3.CollectionReference;\nexports.DocumentReference = reference_3.DocumentReference;\nexports.QuerySnapshot = reference_3.QuerySnapshot;\nexports.Query = reference_3.Query;\n\nvar bulk_writer_2 = require(\"./bulk-writer\");\n\nexports.BulkWriter = bulk_writer_2.BulkWriter;\n\nvar document_2 = require(\"./document\");\n\nexports.DocumentSnapshot = document_2.DocumentSnapshot;\nexports.QueryDocumentSnapshot = document_2.QueryDocumentSnapshot;\n\nvar field_value_1 = require(\"./field-value\");\n\nexports.FieldValue = field_value_1.FieldValue;\n\nvar write_batch_2 = require(\"./write-batch\");\n\nexports.WriteBatch = write_batch_2.WriteBatch;\nexports.WriteResult = write_batch_2.WriteResult;\n\nvar transaction_2 = require(\"./transaction\");\n\nexports.Transaction = transaction_2.Transaction;\n\nvar timestamp_2 = require(\"./timestamp\");\n\nexports.Timestamp = timestamp_2.Timestamp;\n\nvar document_change_1 = require(\"./document-change\");\n\nexports.DocumentChange = document_change_1.DocumentChange;\n\nvar path_2 = require(\"./path\");\n\nexports.FieldPath = path_2.FieldPath;\n\nvar geo_point_1 = require(\"./geo-point\");\n\nexports.GeoPoint = geo_point_1.GeoPoint;\n\nvar logger_2 = require(\"./logger\");\n\nexports.setLogFunction = logger_2.setLogFunction;\n\nvar google_gax_2 = require(\"google-gax\");\n\nexports.GrpcStatus = google_gax_2.Status;\n\nvar libVersion = require('../../package.json').version;\n\nlogger_1.setLibVersion(libVersion);\n/*!\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\n */\n\n/**\n * @namespace google.protobuf\n */\n\n/**\n * @namespace google.rpc\n */\n\n/**\n * @namespace google.longrunning\n */\n\n/**\n * @namespace google.firestore.v1\n */\n\n/**\n * @namespace google.firestore.v1beta1\n */\n\n/**\n * @namespace google.firestore.admin.v1\n */\n\n/*!\n * @see v1\n */\n\nvar v1; // Lazy-loaded in `_runRequest()`\n\n/*!\n * @see v1beta1\n */\n\nvar v1beta1; // Lazy-loaded upon access.\n\n/*!\n * HTTP header for the resource prefix to improve routing and project isolation\n * by the backend.\n */\n\nvar CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/*!\n * The maximum number of times to retry idempotent requests.\n */\n\nvar MAX_REQUEST_RETRIES = 5;\n/*!\n * The default number of idle GRPC channel to keep.\n */\n\nvar DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\n * The maximum number of concurrent requests supported by a single GRPC channel,\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\n * operations, we need to use more than one GAPIC client since these clients\n * multiplex all requests over a single channel.\n */\n\nvar MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\n * Document data (e.g. for use with\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\n * to values.\n *\n * @typedef {Object.<string, *>} DocumentData\n */\n\n/**\n * Converter used by [withConverter()]{@link Query#withConverter} to transform\n * user objects of type T into Firestore data.\n *\n * Using the converter allows you to specify generic type arguments when storing\n * and retrieving objects from Firestore.\n *\n * @example\n * class Post {\n *   constructor(readonly title: string, readonly author: string) {}\n *\n *   toString(): string {\n *     return this.title + ', by ' + this.author;\n *   }\n * }\n *\n * const postConverter = {\n *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n *     return {title: post.title, author: post.author};\n *   },\n *   fromFirestore(\n *     data: FirebaseFirestore.QueryDocumentSnapshot\n *   ): Post {\n *     const data = snapshot.data();\n *     return new Post(data.title, data.author);\n *   }\n * };\n *\n * const postSnap = await Firestore()\n *   .collection('posts')\n *   .withConverter(postConverter)\n *   .doc().get();\n * const post = postSnap.data();\n * if (post !== undefined) {\n *   post.title; // string\n *   post.toString(); // Should be defined\n *   post.someNonExistentProperty; // TS error\n * }\n *\n * @property {Function} toFirestore Called by the Firestore SDK to convert a\n * custom model object of type T into a plain Javascript object (suitable for\n * writing directly to the Firestore database).\n * @property {Function} fromFirestore Called by the Firestore SDK to convert\n * Firestore data into an object of type T.\n * @typedef {Object} FirestoreDataConverter\n */\n\n/**\n * Update data (for use with [update]{@link DocumentReference#update})\n * that contains paths (e.g. 'foo' or 'foo.baz') mapped to values. Fields that\n * contain dots reference nested fields within the document.\n *\n * @typedef {Object.<string, *>} UpdateData\n */\n\n/**\n * An options object that configures conditional behavior of\n * [update()]{@link DocumentReference#update} and\n * [delete()]{@link DocumentReference#delete} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\n * can be restricted to only apply to documents that match the specified\n * conditions.\n *\n * @example\n * const documentRef = firestore.doc('coll/doc');\n *\n * documentRef.get().then(snapshot => {\n *   const updateTime = snapshot.updateTime;\n *\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\n *   return documentRef.delete({ lastUpdateTime: updateTime });\n * });\n *\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\n *  enforces that the document was last updated at lastUpdateTime. Fails the\n *  operation if the document was last updated at a different time.\n * @typedef {Object} Precondition\n */\n\n/**\n * An options object that configures the behavior of\n * [set()]{@link DocumentReference#set} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a SetOptions object with\n * { merge : true }.\n *\n * @property {boolean} merge Changes the behavior of a set() call to only\n * replace the values specified in its data argument. Fields omitted from the\n * set() call remain untouched.\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\n * set() calls to only replace the specified field paths. Any field path that is\n * not specified is ignored and remains untouched.\n * It is an error to pass a SetOptions object to a set() call that is missing a\n * value for any of the fields specified here.\n * @typedef {Object} SetOptions\n */\n\n/**\n * An options object that can be used to configure the behavior of\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\n * calls can be configured to only return a subset of fields.\n *\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\n * to return and reduces the amount of data transmitted by the backend.\n * Adding a field mask does not filter results. Documents do not need to\n * contain values for all the fields in the mask to be part of the result set.\n * @typedef {Object} ReadOptions\n */\n\n/**\n * The Firestore client represents a Firestore Database and is the entry point\n * for all Firestore operations.\n *\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\n *\n * @class\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n\nvar Firestore = /*#__PURE__*/function () {\n  /**\n   * @param {Object=} settings [Configuration object](#/docs).\n   * @param {string=} settings.projectId The project ID from the Google\n   * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\n   * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\n   * environments that support\n   * {@link https://cloud.google.com/docs/authentication Application Default\n   * Credentials}\n   * @param {string=} settings.keyFilename Local file containing the Service\n   * Account credentials as downloaded from the Google Developers Console. Can\n   * be omitted in environments that support\n   * {@link https://cloud.google.com/docs/authentication Application Default\n   * Credentials}. To configure Firestore with custom credentials, use\n   * `settings.credentials` and provide the `client_email` and `private_key` of\n   * your service account.\n   * @param {{client_email:string=, private_key:string=}=} settings.credentials\n   * The `client_email` and `private_key` properties of the service account\n   * to use with your Firestore project. Can be omitted in environments that\n   * support {@link https://cloud.google.com/docs/authentication Application\n   * Default Credentials}. If your credentials are stored in a JSON file, you\n   * can specify a `keyFilename` instead.\n   * @param {string=} settings.host The host to connect to.\n   * @param {boolean=} settings.ssl Whether to use SSL when connecting.\n   * @param {number=} settings.maxIdleChannels The maximum number of idle GRPC\n   * channels to keep. A smaller number of idle channels reduces memory usage\n   * but increases request latency for clients with fluctuating request rates.\n   * If set to 0, shuts down all GRPC channels when the client becomes idle.\n   * Defaults to 1.\n   * @param {boolean=} settings.ignoreUndefinedProperties Whether to skip nested\n   * properties that are set to `undefined` during object serialization. If set\n   * to `true`, these properties are skipped and not written to Firestore. If\n   * set `false` or omitted, the SDK throws an exception when it encounters\n   * properties of type `undefined`.\n   */\n  function Firestore(settings) {\n    var _this = this;\n\n    _classCallCheck(this, Firestore);\n\n    /**\n     * The configuration options for the GAPIC client.\n     * @private\n     */\n    this._settings = {};\n    /**\n     * Whether the initialization settings can still be changed by invoking\n     * `settings()`.\n     * @private\n     */\n\n    this._settingsFrozen = false;\n    /**\n     * The serializer to use for the Protobuf transformation.\n     * @private\n     */\n\n    this._serializer = null;\n    /**\n     * The project ID for this client.\n     *\n     * The project ID is auto-detected during the first request unless a project\n     * ID is passed to the constructor (or provided via `.settings()`).\n     * @private\n     */\n\n    this._projectId = undefined;\n    /**\n     * Count of listeners that have been registered on the client.\n     *\n     * The client can only be terminated when there are no pending writes or\n     * registered listeners.\n     * @private\n     */\n\n    this.registeredListenersCount = 0;\n    /**\n     * Number of pending operations on the client.\n     *\n     * The client can only be terminated when there are no pending writes or\n     * registered listeners.\n     * @private\n     */\n\n    this.bulkWritersCount = 0;\n    var libraryHeader = {\n      libName: 'gccl',\n      libVersion: libVersion\n    };\n\n    if (settings && settings.firebaseVersion) {\n      libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n    }\n\n    this.validateAndApplySettings(_objectSpread(_objectSpread({}, settings), libraryHeader));\n    var retryConfig = serviceConfig.retry_params.default;\n    this._backoffSettings = {\n      initialDelayMs: retryConfig.initial_retry_delay_millis,\n      maxDelayMs: retryConfig.max_retry_delay_millis,\n      backoffFactor: retryConfig.retry_delay_multiplier\n    };\n    var maxIdleChannels = this._settings.maxIdleChannels === undefined ? DEFAULT_MAX_IDLE_CHANNELS : this._settings.maxIdleChannels;\n    this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels,\n    /* clientFactory= */\n    function () {\n      var _a;\n\n      var client;\n\n      if (_this._settings.ssl === false) {\n        var grpcModule = (_a = _this._settings.grpc) !== null && _a !== void 0 ? _a : google_gax_1.grpc;\n        var sslCreds = grpcModule.credentials.createInsecure();\n        client = new module.exports.v1(_objectSpread({\n          sslCreds: sslCreds\n        }, _this._settings));\n      } else {\n        client = new module.exports.v1(_this._settings);\n      }\n\n      logger_1.logger('Firestore', null, 'Initialized Firestore GAPIC Client');\n      return client;\n    },\n    /* clientDestructor= */\n    function (client) {\n      return client.close();\n    });\n    logger_1.logger('Firestore', null, 'Initialized Firestore');\n  }\n  /**\n   * Specifies custom settings to be used to configure the `Firestore`\n   * instance. Can only be invoked once and before any other Firestore method.\n   *\n   * If settings are provided via both `settings()` and the `Firestore`\n   * constructor, both settings objects are merged and any settings provided via\n   * `settings()` take precedence.\n   *\n   * @param {object} settings The settings to use for all Firestore operations.\n   */\n\n\n  _createClass(Firestore, [{\n    key: \"settings\",\n    value: function settings(_settings) {\n      validate_1.validateObject('settings', _settings);\n      validate_1.validateString('settings.projectId', _settings.projectId, {\n        optional: true\n      });\n\n      if (this._settingsFrozen) {\n        throw new Error('Firestore has already been initialized. You can only call ' + 'settings() once, and only before calling any other methods on a ' + 'Firestore object.');\n      }\n\n      var mergedSettings = _objectSpread(_objectSpread({}, this._settings), _settings);\n\n      this.validateAndApplySettings(mergedSettings);\n      this._settingsFrozen = true;\n    }\n  }, {\n    key: \"validateAndApplySettings\",\n    value: function validateAndApplySettings(settings) {\n      var _a;\n\n      if (settings.projectId !== undefined) {\n        validate_1.validateString('settings.projectId', settings.projectId);\n        this._projectId = settings.projectId;\n      }\n\n      var url = null; // If the environment variable is set, it should always take precedence\n      // over any user passed in settings.\n\n      if (process.env.FIRESTORE_EMULATOR_HOST) {\n        validate_1.validateHost('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n        settings = _objectSpread(_objectSpread({}, settings), {}, {\n          host: process.env.FIRESTORE_EMULATOR_HOST,\n          ssl: false\n        });\n        url = new url_1.URL(\"http://\".concat(settings.host));\n      } else if (settings.host !== undefined) {\n        validate_1.validateHost('settings.host', settings.host);\n        url = new url_1.URL(\"http://\".concat(settings.host));\n      } // Only store the host if a valid value was provided in `host`.\n\n\n      if (url !== null) {\n        if (settings.servicePath !== undefined && settings.servicePath !== url.hostname || settings.apiEndpoint !== undefined && settings.apiEndpoint !== url.hostname) {\n          // eslint-disable-next-line no-console\n          console.warn(\"The provided host (\".concat(url.hostname, \") in \\\"settings\\\" does not \") + \"match the existing host (\".concat((_a = settings.servicePath) !== null && _a !== void 0 ? _a : settings.apiEndpoint, \"). Using the provided host.\"));\n        }\n\n        settings.servicePath = url.hostname;\n\n        if (url.port !== '' && settings.port === undefined) {\n          settings.port = Number(url.port);\n        } // We need to remove the `host` and `apiEndpoint` setting, in case a user\n        // calls `settings()`, which will compare the the provided `host` to the\n        // existing hostname stored on `servicePath`.\n\n\n        delete settings.host;\n        delete settings.apiEndpoint;\n      }\n\n      if (settings.ssl !== undefined) {\n        validate_1.validateBoolean('settings.ssl', settings.ssl);\n      }\n\n      if (settings.maxIdleChannels !== undefined) {\n        validate_1.validateInteger('settings.maxIdleChannels', settings.maxIdleChannels, {\n          minValue: 0\n        });\n      }\n\n      this._settings = settings;\n      this._serializer = new serializer_1.Serializer(this);\n    }\n    /**\n     * Returns the Project ID for this Firestore instance. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"doc\",\n\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path.\n     *\n     * @param {string} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The\n     * [DocumentReference]{@link DocumentReference} instance.\n     *\n     * @example\n     * let documentRef = firestore.doc('collection/document');\n     * console.log(`Path of document is ${documentRef.path}`);\n     */\n    value: function doc(documentPath) {\n      path_1.validateResourcePath('documentPath', documentPath);\n      var path = path_1.ResourcePath.EMPTY.append(documentPath);\n\n      if (!path.isDocument) {\n        throw new Error(\"Value for argument \\\"documentPath\\\" must point to a document, but was \\\"\".concat(documentPath, \"\\\". Your path does not contain an even number of components.\"));\n      }\n\n      return new reference_2.DocumentReference(this, path);\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} The\n     * [CollectionReference]{@link CollectionReference} instance.\n     *\n     * @example\n     * let collectionRef = firestore.collection('collection');\n     *\n     * // Add a document with an auto-generated ID.\n     * collectionRef.add({foo: 'bar'}).then((documentRef) => {\n     *   console.log(`Added document at ${documentRef.path})`);\n     * });\n     */\n\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      path_1.validateResourcePath('collectionPath', collectionPath);\n      var path = path_1.ResourcePath.EMPTY.append(collectionPath);\n\n      if (!path.isCollection) {\n        throw new Error(\"Value for argument \\\"collectionPath\\\" must point to a collection, but was \\\"\".concat(collectionPath, \"\\\". Your path does not contain an odd number of components.\"));\n      }\n\n      return new reference_1.CollectionReference(this, path);\n    }\n    /**\n     * Creates and returns a new Query that includes all documents in the\n     * database that are contained in a collection or subcollection with the\n     * given collectionId.\n     *\n     * @param {string} collectionId Identifies the collections to query over.\n     * Every collection or subcollection with this ID as the last segment of its\n     * path will be included. Cannot contain a slash.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\n     * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\n     *\n     * Promise.all([docA, docB]).then(() => {\n     *    let query = firestore.collectionGroup('mygroup');\n     *    query = query.where('foo', '==', 'bar');\n     *    return query.get().then(snapshot => {\n     *       console.log(`Found ${snapshot.size} documents.`);\n     *    });\n     * });\n     */\n\n  }, {\n    key: \"collectionGroup\",\n    value: function collectionGroup(collectionId) {\n      if (collectionId.indexOf('/') !== -1) {\n        throw new Error(\"Invalid collectionId '\".concat(collectionId, \"'. Collection IDs must not contain '/'.\"));\n      }\n\n      return new reference_1.Query(this, reference_1.QueryOptions.forCollectionGroupQuery(collectionId));\n    }\n    /**\n     * Creates a [WriteBatch]{@link WriteBatch}, used for performing\n     * multiple writes as a single atomic operation.\n     *\n     * @returns {WriteBatch} A WriteBatch that operates on this Firestore\n     * client.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     *\n     * // Add two documents in an atomic batch.\n     * let data = { foo: 'bar' };\n     * writeBatch.set(firestore.doc('col/doc1'), data);\n     * writeBatch.set(firestore.doc('col/doc2'), data);\n     *\n     * writeBatch.commit().then(res => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      return new write_batch_1.WriteBatch(this);\n    }\n    /**\n     * Creates a [BulkWriter]{@link BulkWriter}, used for performing\n     * multiple writes in parallel. Gradually ramps up writes as specified\n     * by the 500/50/5 rule.\n     *\n     * @see [500/50/5 Documentation]{@link https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic}\n     *\n     * @param {object=} options BulkWriter options.\n     * @param {boolean=} options.disableThrottling Whether to disable throttling\n     * as specified by the 500/50/5 rule.\n     * @returns {WriteBatch} A BulkWriter that operates on this Firestore\n     * client.\n     *\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(firestore.doc('col/doc1'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Added document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.update(firestore.doc('col/doc2'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Updated document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.delete(firestore.doc('col/doc3'))\n     *   .then(res => {\n     *     console.log(`Deleted document at ${res.writeTime}`);\n     *   });\n     * await bulkWriter.close().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     */\n\n  }, {\n    key: \"bulkWriter\",\n    value: function bulkWriter(options) {\n      return new bulk_writer_1.BulkWriter(this, options);\n    }\n  }, {\n    key: \"snapshot_\",\n    value: function snapshot_(documentOrName, readTime, encoding) {\n      // TODO: Assert that Firestore Project ID is valid.\n      var convertTimestamp;\n      var convertFields;\n\n      if (encoding === undefined || encoding === 'protobufJS') {\n        convertTimestamp = function convertTimestamp(data) {\n          return data;\n        };\n\n        convertFields = function convertFields(data) {\n          return data;\n        };\n      } else if (encoding === 'json') {\n        // Google Cloud Functions calls us with Proto3 JSON format data, which we\n        // must convert to Protobuf JS.\n        convertTimestamp = convert_1.timestampFromJson;\n        convertFields = convert_1.fieldsFromJson;\n      } else {\n        throw new Error('Unsupported encoding format. Expected \"json\" or \"protobufJS\", ' + \"but was \\\"\".concat(encoding, \"\\\".\"));\n      }\n\n      var ref;\n      var document;\n\n      if (typeof documentOrName === 'string') {\n        ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n        document = new document_1.DocumentSnapshotBuilder(ref);\n      } else {\n        ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n        document = new document_1.DocumentSnapshotBuilder(ref);\n        document.fieldsProto = documentOrName.fields ? convertFields(documentOrName.fields) : {};\n        document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n        document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n      }\n\n      if (readTime) {\n        document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n      }\n\n      return document.build();\n    }\n    /**\n     * Creates a new `BundleBuilder` instance to package selected Firestore data into\n     * a bundle.\n     *\n     * @param bundleId. The id of the bundle. When loaded on clients, client SDKs use this id\n     * and the timestamp associated with the built bundle to tell if it has been loaded already.\n     * If not specified, a random identifier will be used.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_bundle\",\n    value: function _bundle(name) {\n      return new bundle_1.BundleBuilder(name || util_1.autoId());\n    }\n    /**\n     * Executes the given updateFunction and commits the changes applied within\n     * the transaction.\n     *\n     * You can use the transaction object passed to 'updateFunction' to read and\n     * modify Firestore documents under lock. Transactions are committed once\n     * 'updateFunction' resolves and attempted up to five times on failure.\n     *\n     * @param {function(Transaction)} updateFunction The function to execute\n     * within the transaction context.\n     * @param {object=} transactionOptions Transaction options.\n     * @param {number=} transactionOptions.maxAttempts - The maximum number of\n     * attempts for this transaction.\n     * @returns {Promise} If the transaction completed successfully or was\n     * explicitly aborted (by the updateFunction returning a failed Promise), the\n     * Promise returned by the updateFunction will be returned here. Else if the\n     * transaction failed, a rejected Promise with the corresponding failure\n     * error will be returned.\n     *\n     * @example\n     * let counterTransaction = firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       let count =  doc.get('count') || 0;\n     *       if (count > 10) {\n     *         return Promise.reject('Reached maximum count');\n     *       }\n     *       transaction.update(documentRef, { count: ++count });\n     *       return Promise.resolve(count);\n     *     }\n     *\n     *     transaction.create(documentRef, { count: 1 });\n     *     return Promise.resolve(1);\n     *   });\n     * });\n     *\n     * counterTransaction.then(res => {\n     *   console.log(`Count updated to ${res}`);\n     * });\n     */\n\n  }, {\n    key: \"runTransaction\",\n    value: function runTransaction(updateFunction, transactionOptions) {\n      validate_1.validateFunction('updateFunction', updateFunction);\n      var defaultAttempts = 5;\n      var tag = util_1.requestTag();\n      var maxAttempts;\n\n      if (transactionOptions) {\n        validate_1.validateObject('transactionOptions', transactionOptions);\n        validate_1.validateInteger('transactionOptions.maxAttempts', transactionOptions.maxAttempts, {\n          optional: true,\n          minValue: 1\n        });\n        maxAttempts = transactionOptions.maxAttempts || defaultAttempts;\n      } else {\n        maxAttempts = defaultAttempts;\n      }\n\n      var transaction = new transaction_1.Transaction(this, tag);\n      return this.initializeIfNeeded(tag).then(function () {\n        return transaction.runTransaction(updateFunction, maxAttempts);\n      });\n    }\n    /**\n     * Fetches the root collections that are associated with this Firestore\n     * database.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * firestore.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found collection with id: ${collection.id}`);\n     *   }\n     * });\n     */\n\n  }, {\n    key: \"listCollections\",\n    value: function listCollections() {\n      var rootDocument = new reference_2.DocumentReference(this, path_1.ResourcePath.EMPTY);\n      return rootDocument.listCollections();\n    }\n    /**\n     * Retrieves multiple documents from Firestore.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * let docRef1 = firestore.doc('col/doc1');\n     * let docRef2 = firestore.doc('col/doc2');\n     *\n     * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\n     *   console.log(`First document: ${JSON.stringify(docs[0])}`);\n     *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\n     * });\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var _this2 = this;\n\n      for (var _len = arguments.length, documentRefsOrReadOptions = new Array(_len), _key = 0; _key < _len; _key++) {\n        documentRefsOrReadOptions[_key] = arguments[_key];\n      }\n\n      validate_1.validateMinNumberOfArguments('Firestore.getAll', documentRefsOrReadOptions, 1);\n\n      var _transaction_1$parseG = transaction_1.parseGetAllArguments(documentRefsOrReadOptions),\n          documents = _transaction_1$parseG.documents,\n          fieldMask = _transaction_1$parseG.fieldMask;\n\n      var tag = util_1.requestTag(); // Capture the error stack to preserve stack tracing across async calls.\n\n      var stack = Error().stack;\n      return this.initializeIfNeeded(tag).then(function () {\n        return _this2.getAll_(documents, fieldMask, tag);\n      }).catch(function (err) {\n        throw util_1.wrapError(err, stack);\n      });\n    }\n    /**\n     * Internal method to retrieve multiple documents from Firestore, optionally\n     * as part of a transaction.\n     *\n     * @private\n     * @param docRefs The documents to receive.\n     * @param fieldMask An optional field mask to apply to this read.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param transactionId The transaction ID to use for this read.\n     * @returns A Promise that contains an array with the resulting documents.\n     */\n\n  }, {\n    key: \"getAll_\",\n    value: function getAll_(docRefs, fieldMask, requestTag, transactionId) {\n      var _this3 = this;\n\n      var requestedDocuments = new Set();\n      var retrievedDocuments = new Map();\n\n      var _iterator = _createForOfIteratorHelper(docRefs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var docRef = _step.value;\n          requestedDocuments.add(docRef.formattedName);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var request = {\n        database: this.formattedName,\n        transaction: transactionId,\n        documents: Array.from(requestedDocuments)\n      };\n\n      if (fieldMask) {\n        var fieldPaths = fieldMask.map(function (fieldPath) {\n          return fieldPath.formattedName;\n        });\n        request.mask = {\n          fieldPaths: fieldPaths\n        };\n      }\n\n      return this.requestStream('batchGetDocuments', request, requestTag).then(function (stream) {\n        return new Promise(function (resolve, reject) {\n          stream.on('error', function (err) {\n            logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with error:', err);\n            reject(err);\n          }).on('data', function (response) {\n            try {\n              var document;\n\n              if (response.found) {\n                logger_1.logger('Firestore.getAll_', requestTag, 'Received document: %s', response.found.name);\n                document = _this3.snapshot_(response.found, response.readTime);\n              } else {\n                logger_1.logger('Firestore.getAll_', requestTag, 'Document missing: %s', response.missing);\n                document = _this3.snapshot_(response.missing, response.readTime);\n              }\n\n              var path = document.ref.path;\n              retrievedDocuments.set(path, document);\n            } catch (err) {\n              logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with exception:', err);\n              reject(err);\n            }\n          }).on('end', function () {\n            logger_1.logger('Firestore.getAll_', requestTag, 'Received %d results', retrievedDocuments.size); // BatchGetDocuments doesn't preserve document order. We use\n            // the request order to sort the resulting documents.\n\n            var orderedDocuments = [];\n\n            var _iterator2 = _createForOfIteratorHelper(docRefs),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var docRef = _step2.value;\n                var document = retrievedDocuments.get(docRef.path);\n\n                if (document !== undefined) {\n                  // Recreate the DocumentSnapshot with the DocumentReference\n                  // containing the original converter.\n                  var finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n                  finalDoc.fieldsProto = document._fieldsProto;\n                  finalDoc.readTime = document.readTime;\n                  finalDoc.createTime = document.createTime;\n                  finalDoc.updateTime = document.updateTime;\n                  orderedDocuments.push(finalDoc.build());\n                } else {\n                  reject(new Error(\"Did not receive document for \\\"\".concat(docRef.path, \"\\\".\")));\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            resolve(orderedDocuments);\n          });\n          stream.resume();\n        });\n      });\n    }\n    /**\n     * Registers a listener on this client, incrementing the listener count. This\n     * is used to verify that all listeners are unsubscribed when terminate() is\n     * called.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"registerListener\",\n    value: function registerListener() {\n      this.registeredListenersCount += 1;\n    }\n    /**\n     * Unregisters a listener on this client, decrementing the listener count.\n     * This is used to verify that all listeners are unsubscribed when terminate()\n     * is called.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"unregisterListener\",\n    value: function unregisterListener() {\n      this.registeredListenersCount -= 1;\n    }\n    /**\n     * Increments the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_incrementBulkWritersCount\",\n    value: function _incrementBulkWritersCount() {\n      this.bulkWritersCount += 1;\n    }\n    /**\n     * Decrements the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_decrementBulkWritersCount\",\n    value: function _decrementBulkWritersCount() {\n      this.bulkWritersCount -= 1;\n    }\n    /**\n     * Terminates the Firestore client and closes all open streams.\n     *\n     * @return A Promise that resolves when the client is terminated.\n     */\n\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      if (this.registeredListenersCount > 0 || this.bulkWritersCount > 0) {\n        return Promise.reject('All onSnapshot() listeners must be unsubscribed, and all BulkWriter ' + 'instances must be closed before terminating the client. ' + \"There are \".concat(this.registeredListenersCount, \" active listeners and \") + \"\".concat(this.bulkWritersCount, \" open BulkWriter instances.\"));\n      }\n\n      return this._clientPool.terminate();\n    }\n    /**\n     * Initializes the client if it is not already initialized. All methods in the\n     * SDK can be used after this method completes.\n     *\n     * @private\n     * @param requestTag A unique client-assigned identifier that caused this\n     * initialization.\n     * @return A Promise that resolves when the client is initialized.\n     */\n\n  }, {\n    key: \"initializeIfNeeded\",\n    value: function () {\n      var _initializeIfNeeded = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(requestTag) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._settingsFrozen = true;\n\n                if (this._settings.ssl === false) {\n                  // If SSL is false, we assume that we are talking to the emulator. We\n                  // provide an Authorization header by default so that the connection is\n                  // recognized as admin in Firestore Emulator. (If for some reason we're\n                  // not connecting to the emulator, then this will result in denials with\n                  // invalid token, rather than behave like clients not logged in. The user\n                  // can then provide their own Authorization header, which will take\n                  // precedence).\n                  this._settings.customHeaders = _objectSpread({\n                    Authorization: 'Bearer owner'\n                  }, this._settings.customHeaders);\n                }\n\n                if (!(this._projectId === undefined)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.prev = 3;\n                _context.next = 6;\n                return this._clientPool.run(requestTag, function (gapicClient) {\n                  return gapicClient.getProjectId();\n                });\n\n              case 6:\n                this._projectId = _context.sent;\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', _context.t0);\n                return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 10]]);\n      }));\n\n      function initializeIfNeeded(_x) {\n        return _initializeIfNeeded.apply(this, arguments);\n      }\n\n      return initializeIfNeeded;\n    }()\n    /**\n     * Returns GAX call options that set the cloud resource header.\n     * @private\n     */\n\n  }, {\n    key: \"createCallOptions\",\n    value: function createCallOptions(methodName, retryCodes) {\n      var callOptions = {\n        otherArgs: {\n          headers: _objectSpread(_defineProperty({}, CLOUD_RESOURCE_HEADER, this.formattedName), this._settings.customHeaders)\n        }\n      };\n\n      if (retryCodes) {\n        var retryParams = util_1.getRetryParams(methodName);\n        callOptions.retry = new google_gax_1.RetryOptions(retryCodes, retryParams);\n      }\n\n      return callOptions;\n    }\n    /**\n     * A function returning a Promise that can be retried.\n     *\n     * @private\n     * @callback retryFunction\n     * @returns {Promise} A Promise indicating the function's success.\n     */\n\n    /**\n     * Helper method that retries failed Promises.\n     *\n     * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\n     * schedules the first attempt immediately, and then waits 100 milliseconds\n     * for further attempts.\n     *\n     * @private\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param func Method returning a Promise than can be retried.\n     * @returns A Promise with the function's result if successful within\n     * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\n     */\n\n  }, {\n    key: \"_retry\",\n    value: function () {\n      var _retry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(methodName, requestTag, func) {\n        var backoff, lastError, attempt;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                backoff = new backoff_1.ExponentialBackoff();\n                lastError = undefined;\n                attempt = 0;\n\n              case 3:\n                if (!(attempt < MAX_REQUEST_RETRIES)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                if (lastError) {\n                  logger_1.logger('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n                }\n\n                _context2.prev = 5;\n                _context2.next = 8;\n                return backoff.backoffAndWait();\n\n              case 8:\n                _context2.next = 10;\n                return func();\n\n              case 10:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](5);\n                lastError = _context2.t0;\n\n                if (!util_1.isPermanentRpcError(_context2.t0, methodName)) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                return _context2.abrupt(\"break\", 21);\n\n              case 18:\n                ++attempt;\n                _context2.next = 3;\n                break;\n\n              case 21:\n                logger_1.logger('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n                return _context2.abrupt(\"return\", Promise.reject(lastError));\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[5, 13]]);\n      }));\n\n      function _retry(_x2, _x3, _x4) {\n        return _retry2.apply(this, arguments);\n      }\n\n      return _retry;\n    }()\n    /**\n     * Waits for the provided stream to become active and returns a paused but\n     * healthy stream. If an error occurs before the first byte is read, the\n     * method rejects the returned Promise.\n     *\n     * @private\n     * @param backendStream The Node stream to monitor.\n     * @param lifetime A Promise that resolves when the stream receives an 'end',\n     * 'close' or 'finish' message.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param request If specified, the request that should be written to the\n     * stream after opening.\n     * @returns A guaranteed healthy stream that should be used instead of\n     * `backendStream`.\n     */\n\n  }, {\n    key: \"_initializeStream\",\n    value: function _initializeStream(backendStream, lifetime, requestTag, request) {\n      var resultStream = new stream_1.PassThrough({\n        objectMode: true\n      });\n      resultStream.pause();\n      /**\n       * Whether we have resolved the Promise and returned the stream to the\n       * caller.\n       */\n\n      var streamInitialized = false;\n      return new Promise(function (resolve, reject) {\n        function streamReady() {\n          if (!streamInitialized) {\n            streamInitialized = true;\n            logger_1.logger('Firestore._initializeStream', requestTag, 'Releasing stream');\n            resolve(resultStream);\n          }\n        }\n\n        function streamEnded() {\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream end');\n          resultStream.unpipe(backendStream);\n          resolve(resultStream);\n          lifetime.resolve();\n        }\n\n        function streamFailed(err) {\n          if (!streamInitialized) {\n            // If we receive an error before we were able to receive any data,\n            // reject this stream.\n            logger_1.logger('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n            reject(err);\n          } else {\n            logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream error:', err); // We execute the forwarding of the 'error' event via setImmediate() as\n            // V8 guarantees that the Promise chain returned from this method\n            // is resolved before any code executed via setImmediate(). This\n            // allows the caller to attach an error handler.\n\n            setImmediate(function () {\n              resultStream.emit('error', err);\n            });\n          }\n        }\n\n        backendStream.on('data', function () {\n          return streamReady();\n        });\n        backendStream.on('error', function (err) {\n          return streamFailed(err);\n        });\n        backendStream.on('end', function () {\n          return streamEnded();\n        });\n        backendStream.on('close', function () {\n          return streamEnded();\n        });\n        backendStream.on('finish', function () {\n          return streamEnded();\n        });\n        backendStream.pipe(resultStream);\n\n        if (request) {\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n          backendStream.write(request, 'utf-8', function (err) {\n            if (err) {\n              streamFailed(err);\n            } else {\n              logger_1.logger('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n              streamReady();\n            }\n          });\n        }\n      });\n    }\n    /**\n     * A funnel for all non-streaming API requests, assigning a project ID where\n     * necessary within the request options.\n     *\n     * @private\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param retryCodes If provided, a custom list of retry codes. If not\n     * provided, retry is based on the behavior as defined in the ServiceConfig.\n     * @returns A Promise with the request result.\n     */\n\n  }, {\n    key: \"request\",\n    value: function request(methodName, _request, requestTag, retryCodes) {\n      var callOptions = this.createCallOptions(methodName, retryCodes);\n      return this._clientPool.run(requestTag, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(gapicClient) {\n          var _yield$gapicClient$me, _yield$gapicClient$me2, result;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  logger_1.logger('Firestore.request', requestTag, 'Sending request: %j', _request);\n                  _context3.next = 4;\n                  return gapicClient[methodName](_request, callOptions);\n\n                case 4:\n                  _yield$gapicClient$me = _context3.sent;\n                  _yield$gapicClient$me2 = _slicedToArray(_yield$gapicClient$me, 1);\n                  result = _yield$gapicClient$me2[0];\n                  logger_1.logger('Firestore.request', requestTag, 'Received response: %j', result);\n                  return _context3.abrupt(\"return\", result);\n\n                case 11:\n                  _context3.prev = 11;\n                  _context3.t0 = _context3[\"catch\"](0);\n                  logger_1.logger('Firestore.request', requestTag, 'Received error:', _context3.t0);\n                  return _context3.abrupt(\"return\", Promise.reject(_context3.t0));\n\n                case 15:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[0, 11]]);\n        }));\n\n        return function (_x5) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n    /**\n     * A funnel for streaming API requests, assigning a project ID where necessary\n     * within the request options.\n     *\n     * The stream is returned in paused state and needs to be resumed once all\n     * listeners are attached.\n     *\n     * @private\n     * @param methodName Name of the streaming Veneer API endpoint that\n     * takes a request and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @returns A Promise with the resulting read-only stream.\n     */\n\n  }, {\n    key: \"requestStream\",\n    value: function requestStream(methodName, request, requestTag) {\n      var _this4 = this;\n\n      var callOptions = this.createCallOptions(methodName);\n      var bidirectional = methodName === 'listen';\n      return this._retry(methodName, requestTag, function () {\n        var result = new util_1.Deferred();\n\n        _this4._clientPool.run(requestTag, /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(gapicClient) {\n            var stream, logStream, lifetime, resultStream;\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    logger_1.logger('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n                    _context4.prev = 1;\n                    stream = bidirectional ? gapicClient[methodName](callOptions) : gapicClient[methodName](request, callOptions);\n                    logStream = new stream_1.Transform({\n                      objectMode: true,\n                      transform: function transform(chunk, encoding, callback) {\n                        logger_1.logger('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n                        callback();\n                      }\n                    });\n                    stream.pipe(logStream);\n                    lifetime = new util_1.Deferred();\n                    _context4.next = 8;\n                    return _this4._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\n\n                  case 8:\n                    resultStream = _context4.sent;\n                    resultStream.on('end', function () {\n                      return stream.end();\n                    });\n                    result.resolve(resultStream); // While we return the stream to the callee early, we don't want to\n                    // release the GAPIC client until the callee has finished processing the\n                    // stream.\n\n                    return _context4.abrupt(\"return\", lifetime.promise);\n\n                  case 14:\n                    _context4.prev = 14;\n                    _context4.t0 = _context4[\"catch\"](1);\n                    result.reject(_context4.t0);\n\n                  case 17:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4, null, [[1, 14]]);\n          }));\n\n          return function (_x6) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n\n        return result.promise;\n      });\n    }\n  }, {\n    key: \"projectId\",\n    get: function get() {\n      if (this._projectId === undefined) {\n        throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n      }\n\n      return this._projectId;\n    }\n    /**\n     * Returns the root path of the database. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"formattedName\",\n    get: function get() {\n      return \"projects/\".concat(this.projectId, \"/databases/\").concat(path_1.DEFAULT_DATABASE_ID);\n    }\n  }]);\n\n  return Firestore;\n}();\n\nexports.Firestore = Firestore;\n/**\n * A logging function that takes a single string.\n *\n * @callback Firestore~logFunction\n * @param {string} Log message\n */\n// tslint:disable-next-line:no-default-export\n\n/**\n * The default export of the `@google-cloud/firestore` package is the\n * {@link Firestore} class.\n *\n * See {@link Firestore} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Firestore} @google-cloud/firestore\n * @alias nodejs-firestore\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n// tslint:disable-next-line:no-default-export\n\nexports.default = Firestore; // Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\n\nvar existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\n * {@link v1beta1} factory function.\n *\n * @private\n * @name Firestore.v1beta1\n * @see v1beta1\n * @type {function}\n */\n\nObject.defineProperty(module.exports, 'v1beta1', {\n  // The v1beta1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load and cache the module.\n  get: function get() {\n    if (!v1beta1) {\n      v1beta1 = require('./v1beta1');\n    }\n\n    return v1beta1;\n  }\n});\n/**\n * {@link v1} factory function.\n *\n * @private\n * @name Firestore.v1\n * @see v1\n * @type {function}\n */\n\nObject.defineProperty(module.exports, 'v1', {\n  // The v1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load and cache the module.\n  get: function get() {\n    if (!v1) {\n      v1 = require('./v1');\n    }\n\n    return v1;\n  }\n});","map":{"version":3,"sources":["/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/@google-cloud/firestore/build/src/index.js"],"names":["Object","defineProperty","exports","value","google_gax_1","require","stream_1","url_1","backoff_1","bulk_writer_1","bundle_1","convert_1","document_1","logger_1","path_1","pool_1","reference_1","reference_2","serializer_1","timestamp_1","transaction_1","util_1","validate_1","write_batch_1","firestore_client_config_json_1","serviceConfig","interfaces","reference_3","CollectionReference","DocumentReference","QuerySnapshot","Query","bulk_writer_2","BulkWriter","document_2","DocumentSnapshot","QueryDocumentSnapshot","field_value_1","FieldValue","write_batch_2","WriteBatch","WriteResult","transaction_2","Transaction","timestamp_2","Timestamp","document_change_1","DocumentChange","path_2","FieldPath","geo_point_1","GeoPoint","logger_2","setLogFunction","google_gax_2","GrpcStatus","Status","libVersion","version","setLibVersion","v1","v1beta1","CLOUD_RESOURCE_HEADER","MAX_REQUEST_RETRIES","DEFAULT_MAX_IDLE_CHANNELS","MAX_CONCURRENT_REQUESTS_PER_CLIENT","Firestore","settings","_settings","_settingsFrozen","_serializer","_projectId","undefined","registeredListenersCount","bulkWritersCount","libraryHeader","libName","firebaseVersion","validateAndApplySettings","retryConfig","retry_params","default","_backoffSettings","initialDelayMs","initial_retry_delay_millis","maxDelayMs","max_retry_delay_millis","backoffFactor","retry_delay_multiplier","maxIdleChannels","_clientPool","ClientPool","_a","client","ssl","grpcModule","grpc","sslCreds","credentials","createInsecure","module","logger","close","validateObject","validateString","projectId","optional","Error","mergedSettings","url","process","env","FIRESTORE_EMULATOR_HOST","validateHost","host","URL","servicePath","hostname","apiEndpoint","console","warn","port","Number","validateBoolean","validateInteger","minValue","Serializer","documentPath","validateResourcePath","path","ResourcePath","EMPTY","append","isDocument","collectionPath","isCollection","collectionId","indexOf","QueryOptions","forCollectionGroupQuery","options","documentOrName","readTime","encoding","convertTimestamp","convertFields","data","timestampFromJson","fieldsFromJson","ref","document","QualifiedResourcePath","fromSlashSeparatedString","DocumentSnapshotBuilder","name","fieldsProto","fields","createTime","fromProto","updateTime","build","BundleBuilder","autoId","updateFunction","transactionOptions","validateFunction","defaultAttempts","tag","requestTag","maxAttempts","transaction","initializeIfNeeded","then","runTransaction","rootDocument","listCollections","documentRefsOrReadOptions","validateMinNumberOfArguments","parseGetAllArguments","documents","fieldMask","stack","getAll_","catch","err","wrapError","docRefs","transactionId","requestedDocuments","Set","retrievedDocuments","Map","docRef","add","formattedName","request","database","Array","from","fieldPaths","map","fieldPath","mask","requestStream","stream","Promise","resolve","reject","on","response","found","snapshot_","missing","set","size","orderedDocuments","get","finalDoc","_fieldsProto","push","resume","terminate","customHeaders","Authorization","run","gapicClient","getProjectId","methodName","retryCodes","callOptions","otherArgs","headers","retryParams","getRetryParams","retry","RetryOptions","func","backoff","ExponentialBackoff","lastError","attempt","backoffAndWait","isPermanentRpcError","backendStream","lifetime","resultStream","PassThrough","objectMode","pause","streamInitialized","streamReady","streamEnded","unpipe","streamFailed","setImmediate","emit","pipe","write","createCallOptions","result","bidirectional","_retry","Deferred","logStream","Transform","transform","chunk","callback","_initializeStream","end","promise","DEFAULT_DATABASE_ID","existingExports","assign"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst google_gax_1 = require(\"google-gax\");\nconst stream_1 = require(\"stream\");\nconst url_1 = require(\"url\");\nconst backoff_1 = require(\"./backoff\");\nconst bulk_writer_1 = require(\"./bulk-writer\");\nconst bundle_1 = require(\"./bundle\");\nconst convert_1 = require(\"./convert\");\nconst document_1 = require(\"./document\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst pool_1 = require(\"./pool\");\nconst reference_1 = require(\"./reference\");\nconst reference_2 = require(\"./reference\");\nconst serializer_1 = require(\"./serializer\");\nconst timestamp_1 = require(\"./timestamp\");\nconst transaction_1 = require(\"./transaction\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst write_batch_1 = require(\"./write-batch\");\nconst firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\nvar reference_3 = require(\"./reference\");\nexports.CollectionReference = reference_3.CollectionReference;\nexports.DocumentReference = reference_3.DocumentReference;\nexports.QuerySnapshot = reference_3.QuerySnapshot;\nexports.Query = reference_3.Query;\nvar bulk_writer_2 = require(\"./bulk-writer\");\nexports.BulkWriter = bulk_writer_2.BulkWriter;\nvar document_2 = require(\"./document\");\nexports.DocumentSnapshot = document_2.DocumentSnapshot;\nexports.QueryDocumentSnapshot = document_2.QueryDocumentSnapshot;\nvar field_value_1 = require(\"./field-value\");\nexports.FieldValue = field_value_1.FieldValue;\nvar write_batch_2 = require(\"./write-batch\");\nexports.WriteBatch = write_batch_2.WriteBatch;\nexports.WriteResult = write_batch_2.WriteResult;\nvar transaction_2 = require(\"./transaction\");\nexports.Transaction = transaction_2.Transaction;\nvar timestamp_2 = require(\"./timestamp\");\nexports.Timestamp = timestamp_2.Timestamp;\nvar document_change_1 = require(\"./document-change\");\nexports.DocumentChange = document_change_1.DocumentChange;\nvar path_2 = require(\"./path\");\nexports.FieldPath = path_2.FieldPath;\nvar geo_point_1 = require(\"./geo-point\");\nexports.GeoPoint = geo_point_1.GeoPoint;\nvar logger_2 = require(\"./logger\");\nexports.setLogFunction = logger_2.setLogFunction;\nvar google_gax_2 = require(\"google-gax\");\nexports.GrpcStatus = google_gax_2.Status;\nconst libVersion = require('../../package.json').version;\nlogger_1.setLibVersion(libVersion);\n/*!\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\n */\n/**\n * @namespace google.protobuf\n */\n/**\n * @namespace google.rpc\n */\n/**\n * @namespace google.longrunning\n */\n/**\n * @namespace google.firestore.v1\n */\n/**\n * @namespace google.firestore.v1beta1\n */\n/**\n * @namespace google.firestore.admin.v1\n */\n/*!\n * @see v1\n */\nlet v1; // Lazy-loaded in `_runRequest()`\n/*!\n * @see v1beta1\n */\nlet v1beta1; // Lazy-loaded upon access.\n/*!\n * HTTP header for the resource prefix to improve routing and project isolation\n * by the backend.\n */\nconst CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/*!\n * The maximum number of times to retry idempotent requests.\n */\nconst MAX_REQUEST_RETRIES = 5;\n/*!\n * The default number of idle GRPC channel to keep.\n */\nconst DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\n * The maximum number of concurrent requests supported by a single GRPC channel,\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\n * operations, we need to use more than one GAPIC client since these clients\n * multiplex all requests over a single channel.\n */\nconst MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\n * Document data (e.g. for use with\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\n * to values.\n *\n * @typedef {Object.<string, *>} DocumentData\n */\n/**\n * Converter used by [withConverter()]{@link Query#withConverter} to transform\n * user objects of type T into Firestore data.\n *\n * Using the converter allows you to specify generic type arguments when storing\n * and retrieving objects from Firestore.\n *\n * @example\n * class Post {\n *   constructor(readonly title: string, readonly author: string) {}\n *\n *   toString(): string {\n *     return this.title + ', by ' + this.author;\n *   }\n * }\n *\n * const postConverter = {\n *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n *     return {title: post.title, author: post.author};\n *   },\n *   fromFirestore(\n *     data: FirebaseFirestore.QueryDocumentSnapshot\n *   ): Post {\n *     const data = snapshot.data();\n *     return new Post(data.title, data.author);\n *   }\n * };\n *\n * const postSnap = await Firestore()\n *   .collection('posts')\n *   .withConverter(postConverter)\n *   .doc().get();\n * const post = postSnap.data();\n * if (post !== undefined) {\n *   post.title; // string\n *   post.toString(); // Should be defined\n *   post.someNonExistentProperty; // TS error\n * }\n *\n * @property {Function} toFirestore Called by the Firestore SDK to convert a\n * custom model object of type T into a plain Javascript object (suitable for\n * writing directly to the Firestore database).\n * @property {Function} fromFirestore Called by the Firestore SDK to convert\n * Firestore data into an object of type T.\n * @typedef {Object} FirestoreDataConverter\n */\n/**\n * Update data (for use with [update]{@link DocumentReference#update})\n * that contains paths (e.g. 'foo' or 'foo.baz') mapped to values. Fields that\n * contain dots reference nested fields within the document.\n *\n * @typedef {Object.<string, *>} UpdateData\n */\n/**\n * An options object that configures conditional behavior of\n * [update()]{@link DocumentReference#update} and\n * [delete()]{@link DocumentReference#delete} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\n * can be restricted to only apply to documents that match the specified\n * conditions.\n *\n * @example\n * const documentRef = firestore.doc('coll/doc');\n *\n * documentRef.get().then(snapshot => {\n *   const updateTime = snapshot.updateTime;\n *\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\n *   return documentRef.delete({ lastUpdateTime: updateTime });\n * });\n *\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\n *  enforces that the document was last updated at lastUpdateTime. Fails the\n *  operation if the document was last updated at a different time.\n * @typedef {Object} Precondition\n */\n/**\n * An options object that configures the behavior of\n * [set()]{@link DocumentReference#set} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a SetOptions object with\n * { merge : true }.\n *\n * @property {boolean} merge Changes the behavior of a set() call to only\n * replace the values specified in its data argument. Fields omitted from the\n * set() call remain untouched.\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\n * set() calls to only replace the specified field paths. Any field path that is\n * not specified is ignored and remains untouched.\n * It is an error to pass a SetOptions object to a set() call that is missing a\n * value for any of the fields specified here.\n * @typedef {Object} SetOptions\n */\n/**\n * An options object that can be used to configure the behavior of\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\n * calls can be configured to only return a subset of fields.\n *\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\n * to return and reduces the amount of data transmitted by the backend.\n * Adding a field mask does not filter results. Documents do not need to\n * contain values for all the fields in the mask to be part of the result set.\n * @typedef {Object} ReadOptions\n */\n/**\n * The Firestore client represents a Firestore Database and is the entry point\n * for all Firestore operations.\n *\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\n *\n * @class\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\nclass Firestore {\n    /**\n     * @param {Object=} settings [Configuration object](#/docs).\n     * @param {string=} settings.projectId The project ID from the Google\n     * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\n     * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\n     * environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}\n     * @param {string=} settings.keyFilename Local file containing the Service\n     * Account credentials as downloaded from the Google Developers Console. Can\n     * be omitted in environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}. To configure Firestore with custom credentials, use\n     * `settings.credentials` and provide the `client_email` and `private_key` of\n     * your service account.\n     * @param {{client_email:string=, private_key:string=}=} settings.credentials\n     * The `client_email` and `private_key` properties of the service account\n     * to use with your Firestore project. Can be omitted in environments that\n     * support {@link https://cloud.google.com/docs/authentication Application\n     * Default Credentials}. If your credentials are stored in a JSON file, you\n     * can specify a `keyFilename` instead.\n     * @param {string=} settings.host The host to connect to.\n     * @param {boolean=} settings.ssl Whether to use SSL when connecting.\n     * @param {number=} settings.maxIdleChannels The maximum number of idle GRPC\n     * channels to keep. A smaller number of idle channels reduces memory usage\n     * but increases request latency for clients with fluctuating request rates.\n     * If set to 0, shuts down all GRPC channels when the client becomes idle.\n     * Defaults to 1.\n     * @param {boolean=} settings.ignoreUndefinedProperties Whether to skip nested\n     * properties that are set to `undefined` during object serialization. If set\n     * to `true`, these properties are skipped and not written to Firestore. If\n     * set `false` or omitted, the SDK throws an exception when it encounters\n     * properties of type `undefined`.\n     */\n    constructor(settings) {\n        /**\n         * The configuration options for the GAPIC client.\n         * @private\n         */\n        this._settings = {};\n        /**\n         * Whether the initialization settings can still be changed by invoking\n         * `settings()`.\n         * @private\n         */\n        this._settingsFrozen = false;\n        /**\n         * The serializer to use for the Protobuf transformation.\n         * @private\n         */\n        this._serializer = null;\n        /**\n         * The project ID for this client.\n         *\n         * The project ID is auto-detected during the first request unless a project\n         * ID is passed to the constructor (or provided via `.settings()`).\n         * @private\n         */\n        this._projectId = undefined;\n        /**\n         * Count of listeners that have been registered on the client.\n         *\n         * The client can only be terminated when there are no pending writes or\n         * registered listeners.\n         * @private\n         */\n        this.registeredListenersCount = 0;\n        /**\n         * Number of pending operations on the client.\n         *\n         * The client can only be terminated when there are no pending writes or\n         * registered listeners.\n         * @private\n         */\n        this.bulkWritersCount = 0;\n        const libraryHeader = {\n            libName: 'gccl',\n            libVersion,\n        };\n        if (settings && settings.firebaseVersion) {\n            libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n        }\n        this.validateAndApplySettings({ ...settings, ...libraryHeader });\n        const retryConfig = serviceConfig.retry_params.default;\n        this._backoffSettings = {\n            initialDelayMs: retryConfig.initial_retry_delay_millis,\n            maxDelayMs: retryConfig.max_retry_delay_millis,\n            backoffFactor: retryConfig.retry_delay_multiplier,\n        };\n        const maxIdleChannels = this._settings.maxIdleChannels === undefined\n            ? DEFAULT_MAX_IDLE_CHANNELS\n            : this._settings.maxIdleChannels;\n        this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels, \n        /* clientFactory= */ () => {\n            var _a;\n            let client;\n            if (this._settings.ssl === false) {\n                const grpcModule = (_a = this._settings.grpc) !== null && _a !== void 0 ? _a : google_gax_1.grpc;\n                const sslCreds = grpcModule.credentials.createInsecure();\n                client = new module.exports.v1({\n                    sslCreds,\n                    ...this._settings,\n                });\n            }\n            else {\n                client = new module.exports.v1(this._settings);\n            }\n            logger_1.logger('Firestore', null, 'Initialized Firestore GAPIC Client');\n            return client;\n        }, \n        /* clientDestructor= */ client => client.close());\n        logger_1.logger('Firestore', null, 'Initialized Firestore');\n    }\n    /**\n     * Specifies custom settings to be used to configure the `Firestore`\n     * instance. Can only be invoked once and before any other Firestore method.\n     *\n     * If settings are provided via both `settings()` and the `Firestore`\n     * constructor, both settings objects are merged and any settings provided via\n     * `settings()` take precedence.\n     *\n     * @param {object} settings The settings to use for all Firestore operations.\n     */\n    settings(settings) {\n        validate_1.validateObject('settings', settings);\n        validate_1.validateString('settings.projectId', settings.projectId, { optional: true });\n        if (this._settingsFrozen) {\n            throw new Error('Firestore has already been initialized. You can only call ' +\n                'settings() once, and only before calling any other methods on a ' +\n                'Firestore object.');\n        }\n        const mergedSettings = { ...this._settings, ...settings };\n        this.validateAndApplySettings(mergedSettings);\n        this._settingsFrozen = true;\n    }\n    validateAndApplySettings(settings) {\n        var _a;\n        if (settings.projectId !== undefined) {\n            validate_1.validateString('settings.projectId', settings.projectId);\n            this._projectId = settings.projectId;\n        }\n        let url = null;\n        // If the environment variable is set, it should always take precedence\n        // over any user passed in settings.\n        if (process.env.FIRESTORE_EMULATOR_HOST) {\n            validate_1.validateHost('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n            settings = {\n                ...settings,\n                host: process.env.FIRESTORE_EMULATOR_HOST,\n                ssl: false,\n            };\n            url = new url_1.URL(`http://${settings.host}`);\n        }\n        else if (settings.host !== undefined) {\n            validate_1.validateHost('settings.host', settings.host);\n            url = new url_1.URL(`http://${settings.host}`);\n        }\n        // Only store the host if a valid value was provided in `host`.\n        if (url !== null) {\n            if ((settings.servicePath !== undefined &&\n                settings.servicePath !== url.hostname) ||\n                (settings.apiEndpoint !== undefined &&\n                    settings.apiEndpoint !== url.hostname)) {\n                // eslint-disable-next-line no-console\n                console.warn(`The provided host (${url.hostname}) in \"settings\" does not ` +\n                    `match the existing host (${(_a = settings.servicePath) !== null && _a !== void 0 ? _a : settings.apiEndpoint}). Using the provided host.`);\n            }\n            settings.servicePath = url.hostname;\n            if (url.port !== '' && settings.port === undefined) {\n                settings.port = Number(url.port);\n            }\n            // We need to remove the `host` and `apiEndpoint` setting, in case a user\n            // calls `settings()`, which will compare the the provided `host` to the\n            // existing hostname stored on `servicePath`.\n            delete settings.host;\n            delete settings.apiEndpoint;\n        }\n        if (settings.ssl !== undefined) {\n            validate_1.validateBoolean('settings.ssl', settings.ssl);\n        }\n        if (settings.maxIdleChannels !== undefined) {\n            validate_1.validateInteger('settings.maxIdleChannels', settings.maxIdleChannels, {\n                minValue: 0,\n            });\n        }\n        this._settings = settings;\n        this._serializer = new serializer_1.Serializer(this);\n    }\n    /**\n     * Returns the Project ID for this Firestore instance. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     */\n    get projectId() {\n        if (this._projectId === undefined) {\n            throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n        }\n        return this._projectId;\n    }\n    /**\n     * Returns the root path of the database. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     */\n    get formattedName() {\n        return `projects/${this.projectId}/databases/${path_1.DEFAULT_DATABASE_ID}`;\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path.\n     *\n     * @param {string} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The\n     * [DocumentReference]{@link DocumentReference} instance.\n     *\n     * @example\n     * let documentRef = firestore.doc('collection/document');\n     * console.log(`Path of document is ${documentRef.path}`);\n     */\n    doc(documentPath) {\n        path_1.validateResourcePath('documentPath', documentPath);\n        const path = path_1.ResourcePath.EMPTY.append(documentPath);\n        if (!path.isDocument) {\n            throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n        }\n        return new reference_2.DocumentReference(this, path);\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} The\n     * [CollectionReference]{@link CollectionReference} instance.\n     *\n     * @example\n     * let collectionRef = firestore.collection('collection');\n     *\n     * // Add a document with an auto-generated ID.\n     * collectionRef.add({foo: 'bar'}).then((documentRef) => {\n     *   console.log(`Added document at ${documentRef.path})`);\n     * });\n     */\n    collection(collectionPath) {\n        path_1.validateResourcePath('collectionPath', collectionPath);\n        const path = path_1.ResourcePath.EMPTY.append(collectionPath);\n        if (!path.isCollection) {\n            throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n        }\n        return new reference_1.CollectionReference(this, path);\n    }\n    /**\n     * Creates and returns a new Query that includes all documents in the\n     * database that are contained in a collection or subcollection with the\n     * given collectionId.\n     *\n     * @param {string} collectionId Identifies the collections to query over.\n     * Every collection or subcollection with this ID as the last segment of its\n     * path will be included. Cannot contain a slash.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\n     * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\n     *\n     * Promise.all([docA, docB]).then(() => {\n     *    let query = firestore.collectionGroup('mygroup');\n     *    query = query.where('foo', '==', 'bar');\n     *    return query.get().then(snapshot => {\n     *       console.log(`Found ${snapshot.size} documents.`);\n     *    });\n     * });\n     */\n    collectionGroup(collectionId) {\n        if (collectionId.indexOf('/') !== -1) {\n            throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);\n        }\n        return new reference_1.Query(this, reference_1.QueryOptions.forCollectionGroupQuery(collectionId));\n    }\n    /**\n     * Creates a [WriteBatch]{@link WriteBatch}, used for performing\n     * multiple writes as a single atomic operation.\n     *\n     * @returns {WriteBatch} A WriteBatch that operates on this Firestore\n     * client.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     *\n     * // Add two documents in an atomic batch.\n     * let data = { foo: 'bar' };\n     * writeBatch.set(firestore.doc('col/doc1'), data);\n     * writeBatch.set(firestore.doc('col/doc2'), data);\n     *\n     * writeBatch.commit().then(res => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    batch() {\n        return new write_batch_1.WriteBatch(this);\n    }\n    /**\n     * Creates a [BulkWriter]{@link BulkWriter}, used for performing\n     * multiple writes in parallel. Gradually ramps up writes as specified\n     * by the 500/50/5 rule.\n     *\n     * @see [500/50/5 Documentation]{@link https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic}\n     *\n     * @param {object=} options BulkWriter options.\n     * @param {boolean=} options.disableThrottling Whether to disable throttling\n     * as specified by the 500/50/5 rule.\n     * @returns {WriteBatch} A BulkWriter that operates on this Firestore\n     * client.\n     *\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(firestore.doc('col/doc1'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Added document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.update(firestore.doc('col/doc2'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Updated document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.delete(firestore.doc('col/doc3'))\n     *   .then(res => {\n     *     console.log(`Deleted document at ${res.writeTime}`);\n     *   });\n     * await bulkWriter.close().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     */\n    bulkWriter(options) {\n        return new bulk_writer_1.BulkWriter(this, options);\n    }\n    snapshot_(documentOrName, readTime, encoding) {\n        // TODO: Assert that Firestore Project ID is valid.\n        let convertTimestamp;\n        let convertFields;\n        if (encoding === undefined || encoding === 'protobufJS') {\n            convertTimestamp = data => data;\n            convertFields = data => data;\n        }\n        else if (encoding === 'json') {\n            // Google Cloud Functions calls us with Proto3 JSON format data, which we\n            // must convert to Protobuf JS.\n            convertTimestamp = convert_1.timestampFromJson;\n            convertFields = convert_1.fieldsFromJson;\n        }\n        else {\n            throw new Error('Unsupported encoding format. Expected \"json\" or \"protobufJS\", ' +\n                `but was \"${encoding}\".`);\n        }\n        let ref;\n        let document;\n        if (typeof documentOrName === 'string') {\n            ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n        }\n        else {\n            ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n            document.fieldsProto = documentOrName.fields\n                ? convertFields(documentOrName.fields)\n                : {};\n            document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n            document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n        }\n        if (readTime) {\n            document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n        }\n        return document.build();\n    }\n    /**\n     * Creates a new `BundleBuilder` instance to package selected Firestore data into\n     * a bundle.\n     *\n     * @param bundleId. The id of the bundle. When loaded on clients, client SDKs use this id\n     * and the timestamp associated with the built bundle to tell if it has been loaded already.\n     * If not specified, a random identifier will be used.\n     *\n     * @private\n     */\n    _bundle(name) {\n        return new bundle_1.BundleBuilder(name || util_1.autoId());\n    }\n    /**\n     * Executes the given updateFunction and commits the changes applied within\n     * the transaction.\n     *\n     * You can use the transaction object passed to 'updateFunction' to read and\n     * modify Firestore documents under lock. Transactions are committed once\n     * 'updateFunction' resolves and attempted up to five times on failure.\n     *\n     * @param {function(Transaction)} updateFunction The function to execute\n     * within the transaction context.\n     * @param {object=} transactionOptions Transaction options.\n     * @param {number=} transactionOptions.maxAttempts - The maximum number of\n     * attempts for this transaction.\n     * @returns {Promise} If the transaction completed successfully or was\n     * explicitly aborted (by the updateFunction returning a failed Promise), the\n     * Promise returned by the updateFunction will be returned here. Else if the\n     * transaction failed, a rejected Promise with the corresponding failure\n     * error will be returned.\n     *\n     * @example\n     * let counterTransaction = firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       let count =  doc.get('count') || 0;\n     *       if (count > 10) {\n     *         return Promise.reject('Reached maximum count');\n     *       }\n     *       transaction.update(documentRef, { count: ++count });\n     *       return Promise.resolve(count);\n     *     }\n     *\n     *     transaction.create(documentRef, { count: 1 });\n     *     return Promise.resolve(1);\n     *   });\n     * });\n     *\n     * counterTransaction.then(res => {\n     *   console.log(`Count updated to ${res}`);\n     * });\n     */\n    runTransaction(updateFunction, transactionOptions) {\n        validate_1.validateFunction('updateFunction', updateFunction);\n        const defaultAttempts = 5;\n        const tag = util_1.requestTag();\n        let maxAttempts;\n        if (transactionOptions) {\n            validate_1.validateObject('transactionOptions', transactionOptions);\n            validate_1.validateInteger('transactionOptions.maxAttempts', transactionOptions.maxAttempts, { optional: true, minValue: 1 });\n            maxAttempts = transactionOptions.maxAttempts || defaultAttempts;\n        }\n        else {\n            maxAttempts = defaultAttempts;\n        }\n        const transaction = new transaction_1.Transaction(this, tag);\n        return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction, maxAttempts));\n    }\n    /**\n     * Fetches the root collections that are associated with this Firestore\n     * database.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * firestore.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found collection with id: ${collection.id}`);\n     *   }\n     * });\n     */\n    listCollections() {\n        const rootDocument = new reference_2.DocumentReference(this, path_1.ResourcePath.EMPTY);\n        return rootDocument.listCollections();\n    }\n    /**\n     * Retrieves multiple documents from Firestore.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * let docRef1 = firestore.doc('col/doc1');\n     * let docRef2 = firestore.doc('col/doc2');\n     *\n     * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\n     *   console.log(`First document: ${JSON.stringify(docs[0])}`);\n     *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\n     * });\n     */\n    getAll(...documentRefsOrReadOptions) {\n        validate_1.validateMinNumberOfArguments('Firestore.getAll', documentRefsOrReadOptions, 1);\n        const { documents, fieldMask } = transaction_1.parseGetAllArguments(documentRefsOrReadOptions);\n        const tag = util_1.requestTag();\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        return this.initializeIfNeeded(tag)\n            .then(() => this.getAll_(documents, fieldMask, tag))\n            .catch(err => {\n            throw util_1.wrapError(err, stack);\n        });\n    }\n    /**\n     * Internal method to retrieve multiple documents from Firestore, optionally\n     * as part of a transaction.\n     *\n     * @private\n     * @param docRefs The documents to receive.\n     * @param fieldMask An optional field mask to apply to this read.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param transactionId The transaction ID to use for this read.\n     * @returns A Promise that contains an array with the resulting documents.\n     */\n    getAll_(docRefs, fieldMask, requestTag, transactionId) {\n        const requestedDocuments = new Set();\n        const retrievedDocuments = new Map();\n        for (const docRef of docRefs) {\n            requestedDocuments.add(docRef.formattedName);\n        }\n        const request = {\n            database: this.formattedName,\n            transaction: transactionId,\n            documents: Array.from(requestedDocuments),\n        };\n        if (fieldMask) {\n            const fieldPaths = fieldMask.map(fieldPath => fieldPath.formattedName);\n            request.mask = { fieldPaths };\n        }\n        return this.requestStream('batchGetDocuments', request, requestTag).then(stream => {\n            return new Promise((resolve, reject) => {\n                stream\n                    .on('error', err => {\n                    logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with error:', err);\n                    reject(err);\n                })\n                    .on('data', (response) => {\n                    try {\n                        let document;\n                        if (response.found) {\n                            logger_1.logger('Firestore.getAll_', requestTag, 'Received document: %s', response.found.name);\n                            document = this.snapshot_(response.found, response.readTime);\n                        }\n                        else {\n                            logger_1.logger('Firestore.getAll_', requestTag, 'Document missing: %s', response.missing);\n                            document = this.snapshot_(response.missing, response.readTime);\n                        }\n                        const path = document.ref.path;\n                        retrievedDocuments.set(path, document);\n                    }\n                    catch (err) {\n                        logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with exception:', err);\n                        reject(err);\n                    }\n                })\n                    .on('end', () => {\n                    logger_1.logger('Firestore.getAll_', requestTag, 'Received %d results', retrievedDocuments.size);\n                    // BatchGetDocuments doesn't preserve document order. We use\n                    // the request order to sort the resulting documents.\n                    const orderedDocuments = [];\n                    for (const docRef of docRefs) {\n                        const document = retrievedDocuments.get(docRef.path);\n                        if (document !== undefined) {\n                            // Recreate the DocumentSnapshot with the DocumentReference\n                            // containing the original converter.\n                            const finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n                            finalDoc.fieldsProto = document._fieldsProto;\n                            finalDoc.readTime = document.readTime;\n                            finalDoc.createTime = document.createTime;\n                            finalDoc.updateTime = document.updateTime;\n                            orderedDocuments.push(finalDoc.build());\n                        }\n                        else {\n                            reject(new Error(`Did not receive document for \"${docRef.path}\".`));\n                        }\n                    }\n                    resolve(orderedDocuments);\n                });\n                stream.resume();\n            });\n        });\n    }\n    /**\n     * Registers a listener on this client, incrementing the listener count. This\n     * is used to verify that all listeners are unsubscribed when terminate() is\n     * called.\n     *\n     * @private\n     */\n    registerListener() {\n        this.registeredListenersCount += 1;\n    }\n    /**\n     * Unregisters a listener on this client, decrementing the listener count.\n     * This is used to verify that all listeners are unsubscribed when terminate()\n     * is called.\n     *\n     * @private\n     */\n    unregisterListener() {\n        this.registeredListenersCount -= 1;\n    }\n    /**\n     * Increments the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     */\n    _incrementBulkWritersCount() {\n        this.bulkWritersCount += 1;\n    }\n    /**\n     * Decrements the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     */\n    _decrementBulkWritersCount() {\n        this.bulkWritersCount -= 1;\n    }\n    /**\n     * Terminates the Firestore client and closes all open streams.\n     *\n     * @return A Promise that resolves when the client is terminated.\n     */\n    terminate() {\n        if (this.registeredListenersCount > 0 || this.bulkWritersCount > 0) {\n            return Promise.reject('All onSnapshot() listeners must be unsubscribed, and all BulkWriter ' +\n                'instances must be closed before terminating the client. ' +\n                `There are ${this.registeredListenersCount} active listeners and ` +\n                `${this.bulkWritersCount} open BulkWriter instances.`);\n        }\n        return this._clientPool.terminate();\n    }\n    /**\n     * Initializes the client if it is not already initialized. All methods in the\n     * SDK can be used after this method completes.\n     *\n     * @private\n     * @param requestTag A unique client-assigned identifier that caused this\n     * initialization.\n     * @return A Promise that resolves when the client is initialized.\n     */\n    async initializeIfNeeded(requestTag) {\n        this._settingsFrozen = true;\n        if (this._settings.ssl === false) {\n            // If SSL is false, we assume that we are talking to the emulator. We\n            // provide an Authorization header by default so that the connection is\n            // recognized as admin in Firestore Emulator. (If for some reason we're\n            // not connecting to the emulator, then this will result in denials with\n            // invalid token, rather than behave like clients not logged in. The user\n            // can then provide their own Authorization header, which will take\n            // precedence).\n            this._settings.customHeaders = {\n                Authorization: 'Bearer owner',\n                ...this._settings.customHeaders,\n            };\n        }\n        if (this._projectId === undefined) {\n            try {\n                this._projectId = await this._clientPool.run(requestTag, gapicClient => gapicClient.getProjectId());\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n            }\n            catch (err) {\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', err);\n                return Promise.reject(err);\n            }\n        }\n    }\n    /**\n     * Returns GAX call options that set the cloud resource header.\n     * @private\n     */\n    createCallOptions(methodName, retryCodes) {\n        const callOptions = {\n            otherArgs: {\n                headers: {\n                    [CLOUD_RESOURCE_HEADER]: this.formattedName,\n                    ...this._settings.customHeaders,\n                },\n            },\n        };\n        if (retryCodes) {\n            const retryParams = util_1.getRetryParams(methodName);\n            callOptions.retry = new google_gax_1.RetryOptions(retryCodes, retryParams);\n        }\n        return callOptions;\n    }\n    /**\n     * A function returning a Promise that can be retried.\n     *\n     * @private\n     * @callback retryFunction\n     * @returns {Promise} A Promise indicating the function's success.\n     */\n    /**\n     * Helper method that retries failed Promises.\n     *\n     * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\n     * schedules the first attempt immediately, and then waits 100 milliseconds\n     * for further attempts.\n     *\n     * @private\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param func Method returning a Promise than can be retried.\n     * @returns A Promise with the function's result if successful within\n     * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\n     */\n    async _retry(methodName, requestTag, func) {\n        const backoff = new backoff_1.ExponentialBackoff();\n        let lastError = undefined;\n        for (let attempt = 0; attempt < MAX_REQUEST_RETRIES; ++attempt) {\n            if (lastError) {\n                logger_1.logger('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n            }\n            try {\n                await backoff.backoffAndWait();\n                return await func();\n            }\n            catch (err) {\n                lastError = err;\n                if (util_1.isPermanentRpcError(err, methodName)) {\n                    break;\n                }\n            }\n        }\n        logger_1.logger('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n        return Promise.reject(lastError);\n    }\n    /**\n     * Waits for the provided stream to become active and returns a paused but\n     * healthy stream. If an error occurs before the first byte is read, the\n     * method rejects the returned Promise.\n     *\n     * @private\n     * @param backendStream The Node stream to monitor.\n     * @param lifetime A Promise that resolves when the stream receives an 'end',\n     * 'close' or 'finish' message.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param request If specified, the request that should be written to the\n     * stream after opening.\n     * @returns A guaranteed healthy stream that should be used instead of\n     * `backendStream`.\n     */\n    _initializeStream(backendStream, lifetime, requestTag, request) {\n        const resultStream = new stream_1.PassThrough({ objectMode: true });\n        resultStream.pause();\n        /**\n         * Whether we have resolved the Promise and returned the stream to the\n         * caller.\n         */\n        let streamInitialized = false;\n        return new Promise((resolve, reject) => {\n            function streamReady() {\n                if (!streamInitialized) {\n                    streamInitialized = true;\n                    logger_1.logger('Firestore._initializeStream', requestTag, 'Releasing stream');\n                    resolve(resultStream);\n                }\n            }\n            function streamEnded() {\n                logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream end');\n                resultStream.unpipe(backendStream);\n                resolve(resultStream);\n                lifetime.resolve();\n            }\n            function streamFailed(err) {\n                if (!streamInitialized) {\n                    // If we receive an error before we were able to receive any data,\n                    // reject this stream.\n                    logger_1.logger('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n                    reject(err);\n                }\n                else {\n                    logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream error:', err);\n                    // We execute the forwarding of the 'error' event via setImmediate() as\n                    // V8 guarantees that the Promise chain returned from this method\n                    // is resolved before any code executed via setImmediate(). This\n                    // allows the caller to attach an error handler.\n                    setImmediate(() => {\n                        resultStream.emit('error', err);\n                    });\n                }\n            }\n            backendStream.on('data', () => streamReady());\n            backendStream.on('error', err => streamFailed(err));\n            backendStream.on('end', () => streamEnded());\n            backendStream.on('close', () => streamEnded());\n            backendStream.on('finish', () => streamEnded());\n            backendStream.pipe(resultStream);\n            if (request) {\n                logger_1.logger('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n                backendStream.write(request, 'utf-8', err => {\n                    if (err) {\n                        streamFailed(err);\n                    }\n                    else {\n                        logger_1.logger('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n                        streamReady();\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * A funnel for all non-streaming API requests, assigning a project ID where\n     * necessary within the request options.\n     *\n     * @private\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param retryCodes If provided, a custom list of retry codes. If not\n     * provided, retry is based on the behavior as defined in the ServiceConfig.\n     * @returns A Promise with the request result.\n     */\n    request(methodName, request, requestTag, retryCodes) {\n        const callOptions = this.createCallOptions(methodName, retryCodes);\n        return this._clientPool.run(requestTag, async (gapicClient) => {\n            try {\n                logger_1.logger('Firestore.request', requestTag, 'Sending request: %j', request);\n                const [result] = await gapicClient[methodName](request, callOptions);\n                logger_1.logger('Firestore.request', requestTag, 'Received response: %j', result);\n                return result;\n            }\n            catch (err) {\n                logger_1.logger('Firestore.request', requestTag, 'Received error:', err);\n                return Promise.reject(err);\n            }\n        });\n    }\n    /**\n     * A funnel for streaming API requests, assigning a project ID where necessary\n     * within the request options.\n     *\n     * The stream is returned in paused state and needs to be resumed once all\n     * listeners are attached.\n     *\n     * @private\n     * @param methodName Name of the streaming Veneer API endpoint that\n     * takes a request and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @returns A Promise with the resulting read-only stream.\n     */\n    requestStream(methodName, request, requestTag) {\n        const callOptions = this.createCallOptions(methodName);\n        const bidirectional = methodName === 'listen';\n        return this._retry(methodName, requestTag, () => {\n            const result = new util_1.Deferred();\n            this._clientPool.run(requestTag, async (gapicClient) => {\n                logger_1.logger('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n                try {\n                    const stream = bidirectional\n                        ? gapicClient[methodName](callOptions)\n                        : gapicClient[methodName](request, callOptions);\n                    const logStream = new stream_1.Transform({\n                        objectMode: true,\n                        transform: (chunk, encoding, callback) => {\n                            logger_1.logger('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n                            callback();\n                        },\n                    });\n                    stream.pipe(logStream);\n                    const lifetime = new util_1.Deferred();\n                    const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\n                    resultStream.on('end', () => stream.end());\n                    result.resolve(resultStream);\n                    // While we return the stream to the callee early, we don't want to\n                    // release the GAPIC client until the callee has finished processing the\n                    // stream.\n                    return lifetime.promise;\n                }\n                catch (e) {\n                    result.reject(e);\n                }\n            });\n            return result.promise;\n        });\n    }\n}\nexports.Firestore = Firestore;\n/**\n * A logging function that takes a single string.\n *\n * @callback Firestore~logFunction\n * @param {string} Log message\n */\n// tslint:disable-next-line:no-default-export\n/**\n * The default export of the `@google-cloud/firestore` package is the\n * {@link Firestore} class.\n *\n * See {@link Firestore} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Firestore} @google-cloud/firestore\n * @alias nodejs-firestore\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n// tslint:disable-next-line:no-default-export\nexports.default = Firestore;\n// Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\nconst existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\n * {@link v1beta1} factory function.\n *\n * @private\n * @name Firestore.v1beta1\n * @see v1beta1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1beta1', {\n    // The v1beta1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load and cache the module.\n    get: () => {\n        if (!v1beta1) {\n            v1beta1 = require('./v1beta1');\n        }\n        return v1beta1;\n    },\n});\n/**\n * {@link v1} factory function.\n *\n * @private\n * @name Firestore.v1\n * @see v1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1', {\n    // The v1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load and cache the module.\n    get: () => {\n        if (!v1) {\n            v1 = require('./v1');\n        }\n        return v1;\n    },\n});\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}