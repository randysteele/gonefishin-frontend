{"ast":null,"code":"/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TenantAwareAuthRequestHandler = exports.AuthRequestHandler = exports.AbstractAuthRequestHandler = exports.FIREBASE_AUTH_SIGN_UP_NEW_USER = exports.FIREBASE_AUTH_SET_ACCOUNT_INFO = exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = exports.FIREBASE_AUTH_DELETE_ACCOUNT = exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = exports.FIREBASE_AUTH_GET_ACCOUNT_INFO = exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = exports.FIREBASE_AUTH_UPLOAD_ACCOUNT = exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = exports.EMAIL_ACTION_REQUEST_TYPES = exports.RESERVED_CLAIMS = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar identifier_1 = require(\"./identifier\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar user_import_builder_1 = require(\"./user-import-builder\");\n\nvar utils = require(\"../utils/index\");\n\nvar action_code_settings_builder_1 = require(\"./action-code-settings-builder\");\n\nvar auth_config_1 = require(\"./auth-config\");\n\nvar tenant_1 = require(\"./tenant\");\n/** Firebase Auth request header. */\n\n\nvar FIREBASE_AUTH_HEADER = {\n  'X-Client-Version': \"Node/Admin/\" + utils.getSdkVersion()\n};\n/** Firebase Auth request timeout duration in milliseconds. */\n\nvar FIREBASE_AUTH_TIMEOUT = 25000;\n/** List of reserved claims which cannot be provided when creating a custom token. */\n\nexports.RESERVED_CLAIMS = ['acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti', 'nbf', 'nonce', 'sub', 'firebase'];\n/** List of supported email action request types. */\n\nexports.EMAIL_ACTION_REQUEST_TYPES = ['PASSWORD_RESET', 'VERIFY_EMAIL', 'EMAIL_SIGNIN'];\n/** Maximum allowed number of characters in the custom claims payload. */\n\nvar MAX_CLAIMS_PAYLOAD_SIZE = 1000;\n/** Maximum allowed number of users to batch download at one time. */\n\nvar MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE = 1000;\n/** Maximum allowed number of users to batch upload at one time. */\n\nvar MAX_UPLOAD_ACCOUNT_BATCH_SIZE = 1000;\n/** Maximum allowed number of users to batch get at one time. */\n\nvar MAX_GET_ACCOUNTS_BATCH_SIZE = 100;\n/** Maximum allowed number of users to batch delete at one time. */\n\nvar MAX_DELETE_ACCOUNTS_BATCH_SIZE = 1000;\n/** Minimum allowed session cookie duration in seconds (5 minutes). */\n\nvar MIN_SESSION_COOKIE_DURATION_SECS = 5 * 60;\n/** Maximum allowed session cookie duration in seconds (2 weeks). */\n\nvar MAX_SESSION_COOKIE_DURATION_SECS = 14 * 24 * 60 * 60;\n/** Maximum allowed number of provider configurations to batch download at one time. */\n\nvar MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE = 100;\n/** The Firebase Auth backend base URL format. */\n\nvar FIREBASE_AUTH_BASE_URL_FORMAT = 'https://identitytoolkit.googleapis.com/{version}/projects/{projectId}{api}';\n/** The Firebase Auth backend multi-tenancy base URL format. */\n\nvar FIREBASE_AUTH_TENANT_URL_FORMAT = FIREBASE_AUTH_BASE_URL_FORMAT.replace('projects/{projectId}', 'projects/{projectId}/tenants/{tenantId}');\n/** Maximum allowed number of tenants to download at one time. */\n\nvar MAX_LIST_TENANT_PAGE_SIZE = 1000;\n/**\n * Enum for the user write operation type.\n */\n\nvar WriteOperationType;\n\n(function (WriteOperationType) {\n  WriteOperationType[\"Create\"] = \"create\";\n  WriteOperationType[\"Update\"] = \"update\";\n  WriteOperationType[\"Upload\"] = \"upload\";\n})(WriteOperationType || (WriteOperationType = {}));\n/** Defines a base utility to help with resource URL construction. */\n\n\nvar AuthResourceUrlBuilder =\n/** @class */\nfunction () {\n  /**\n   * The resource URL builder constructor.\n   *\n   * @param {string} projectId The resource project ID.\n   * @param {string} version The endpoint API version.\n   * @constructor\n   */\n  function AuthResourceUrlBuilder(app, version) {\n    if (version === void 0) {\n      version = 'v1';\n    }\n\n    this.app = app;\n    this.version = version;\n    this.urlFormat = FIREBASE_AUTH_BASE_URL_FORMAT;\n  }\n  /**\n   * Returns the resource URL corresponding to the provided parameters.\n   *\n   * @param {string=} api The backend API name.\n   * @param {object=} params The optional additional parameters to substitute in the\n   *     URL path.\n   * @return {Promise<string>} The corresponding resource URL.\n   */\n\n\n  AuthResourceUrlBuilder.prototype.getUrl = function (api, params) {\n    var _this = this;\n\n    return this.getProjectId().then(function (projectId) {\n      var baseParams = {\n        version: _this.version,\n        projectId: projectId,\n        api: api || ''\n      };\n      var baseUrl = utils.formatString(_this.urlFormat, baseParams); // Substitute additional api related parameters.\n\n      return utils.formatString(baseUrl, params || {});\n    });\n  };\n\n  AuthResourceUrlBuilder.prototype.getProjectId = function () {\n    var _this = this;\n\n    if (this.projectId) {\n      return Promise.resolve(this.projectId);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Failed to determine project ID for Auth. Initialize the ' + 'SDK with service account credentials or set project ID as an app option. ' + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n      }\n\n      _this.projectId = projectId;\n      return projectId;\n    });\n  };\n\n  return AuthResourceUrlBuilder;\n}();\n/** Tenant aware resource builder utility. */\n\n\nvar TenantAwareAuthResourceUrlBuilder =\n/** @class */\nfunction (_super) {\n  __extends(TenantAwareAuthResourceUrlBuilder, _super);\n  /**\n   * The tenant aware resource URL builder constructor.\n   *\n   * @param {string} projectId The resource project ID.\n   * @param {string} version The endpoint API version.\n   * @param {string} tenantId The tenant ID.\n   * @constructor\n   */\n\n\n  function TenantAwareAuthResourceUrlBuilder(app, version, tenantId) {\n    var _this = _super.call(this, app, version) || this;\n\n    _this.app = app;\n    _this.version = version;\n    _this.tenantId = tenantId;\n    _this.urlFormat = FIREBASE_AUTH_TENANT_URL_FORMAT;\n    return _this;\n  }\n  /**\n   * Returns the resource URL corresponding to the provided parameters.\n   *\n   * @param {string=} api The backend API name.\n   * @param {object=} params The optional additional parameters to substitute in the\n   *     URL path.\n   * @return {Promise<string>} The corresponding resource URL.\n   */\n\n\n  TenantAwareAuthResourceUrlBuilder.prototype.getUrl = function (api, params) {\n    var _this = this;\n\n    return _super.prototype.getUrl.call(this, api, params).then(function (url) {\n      return utils.formatString(url, {\n        tenantId: _this.tenantId\n      });\n    });\n  };\n\n  return TenantAwareAuthResourceUrlBuilder;\n}(AuthResourceUrlBuilder);\n/**\n * Validates an AuthFactorInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request The AuthFactorInfo request object.\n * @param writeOperationType The write operation type.\n */\n\n\nfunction validateAuthFactorInfo(request, writeOperationType) {\n  var validKeys = {\n    mfaEnrollmentId: true,\n    displayName: true,\n    phoneInfo: true,\n    enrolledAt: true\n  }; // Remove unsupported keys from the original request.\n\n  for (var key in request) {\n    if (!(key in validKeys)) {\n      delete request[key];\n    }\n  } // No enrollment ID is available for signupNewUser. Use another identifier.\n\n\n  var authFactorInfoIdentifier = request.mfaEnrollmentId || request.phoneInfo || JSON.stringify(request);\n  var uidRequired = writeOperationType !== WriteOperationType.Create;\n\n  if ((typeof request.mfaEnrollmentId !== 'undefined' || uidRequired) && !validator.isNonEmptyString(request.mfaEnrollmentId)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, \"The second factor \\\"uid\\\" must be a valid non-empty string.\");\n  }\n\n  if (typeof request.displayName !== 'undefined' && !validator.isString(request.displayName)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, \"The second factor \\\"displayName\\\" for \\\"\" + authFactorInfoIdentifier + \"\\\" must be a valid string.\");\n  } // enrolledAt must be a valid UTC date string.\n\n\n  if (typeof request.enrolledAt !== 'undefined' && !validator.isISODateString(request.enrolledAt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLMENT_TIME, \"The second factor \\\"enrollmentTime\\\" for \\\"\" + authFactorInfoIdentifier + \"\\\" must be a valid \" + \"UTC date string.\");\n  } // Validate required fields depending on second factor type.\n\n\n  if (typeof request.phoneInfo !== 'undefined') {\n    // phoneNumber should be a string and a valid phone number.\n    if (!validator.isPhoneNumber(request.phoneInfo)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER, \"The second factor \\\"phoneNumber\\\" for \\\"\" + authFactorInfoIdentifier + \"\\\" must be a non-empty \" + \"E.164 standard compliant identifier string.\");\n    }\n  } else {\n    // Invalid second factor. For example, a phone second factor may have been provided without\n    // a phone number. A TOTP based second factor may require a secret key, etc.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS, \"MFAInfo object provided is invalid.\");\n  }\n}\n/**\n * Validates a providerUserInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param {any} request The providerUserInfo request object.\n */\n\n\nfunction validateProviderUserInfo(request) {\n  var validKeys = {\n    rawId: true,\n    providerId: true,\n    email: true,\n    displayName: true,\n    photoUrl: true\n  }; // Remove invalid keys from original request.\n\n  for (var key in request) {\n    if (!(key in validKeys)) {\n      delete request[key];\n    }\n  }\n\n  if (!validator.isNonEmptyString(request.providerId)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n  }\n\n  if (typeof request.displayName !== 'undefined' && typeof request.displayName !== 'string') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, \"The provider \\\"displayName\\\" for \\\"\" + request.providerId + \"\\\" must be a valid string.\");\n  }\n\n  if (!validator.isNonEmptyString(request.rawId)) {\n    // This is called localId on the backend but the developer specifies this as\n    // uid externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, \"The provider \\\"uid\\\" for \\\"\" + request.providerId + \"\\\" must be a valid non-empty string.\");\n  } // email should be a string and a valid email.\n\n\n  if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL, \"The provider \\\"email\\\" for \\\"\" + request.providerId + \"\\\" must be a valid email string.\");\n  } // photoUrl should be a URL.\n\n\n  if (typeof request.photoUrl !== 'undefined' && !validator.isURL(request.photoUrl)) {\n    // This is called photoUrl on the backend but the developer specifies this as\n    // photoURL externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL, \"The provider \\\"photoURL\\\" for \\\"\" + request.providerId + \"\\\" must be a valid URL string.\");\n  }\n}\n/**\n * Validates a create/edit request object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request The create/edit request object.\n * @param writeOperationType The write operation type.\n */\n\n\nfunction validateCreateEditRequest(request, writeOperationType) {\n  var uploadAccountRequest = writeOperationType === WriteOperationType.Upload; // Hash set of whitelisted parameters.\n\n  var validKeys = {\n    displayName: true,\n    localId: true,\n    email: true,\n    password: true,\n    rawPassword: true,\n    emailVerified: true,\n    photoUrl: true,\n    disabled: true,\n    disableUser: true,\n    deleteAttribute: true,\n    deleteProvider: true,\n    sanityCheck: true,\n    phoneNumber: true,\n    customAttributes: true,\n    validSince: true,\n    // Pass tenantId only for uploadAccount requests.\n    tenantId: uploadAccountRequest,\n    passwordHash: uploadAccountRequest,\n    salt: uploadAccountRequest,\n    createdAt: uploadAccountRequest,\n    lastLoginAt: uploadAccountRequest,\n    providerUserInfo: uploadAccountRequest,\n    mfaInfo: uploadAccountRequest,\n    // Only for non-uploadAccount requests.\n    mfa: !uploadAccountRequest\n  }; // Remove invalid keys from original request.\n\n  for (var key in request) {\n    if (!(key in validKeys)) {\n      delete request[key];\n    }\n  }\n\n  if (typeof request.tenantId !== 'undefined' && !validator.isNonEmptyString(request.tenantId)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n  } // For any invalid parameter, use the external key name in the error description.\n  // displayName should be a string.\n\n\n  if (typeof request.displayName !== 'undefined' && !validator.isString(request.displayName)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME);\n  }\n\n  if ((typeof request.localId !== 'undefined' || uploadAccountRequest) && !validator.isUid(request.localId)) {\n    // This is called localId on the backend but the developer specifies this as\n    // uid externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n  } // email should be a string and a valid email.\n\n\n  if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n  } // phoneNumber should be a string and a valid phone number.\n\n\n  if (typeof request.phoneNumber !== 'undefined' && !validator.isPhoneNumber(request.phoneNumber)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n  } // password should be a string and a minimum of 6 chars.\n\n\n  if (typeof request.password !== 'undefined' && !validator.isPassword(request.password)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n  } // rawPassword should be a string and a minimum of 6 chars.\n\n\n  if (typeof request.rawPassword !== 'undefined' && !validator.isPassword(request.rawPassword)) {\n    // This is called rawPassword on the backend but the developer specifies this as\n    // password externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n  } // emailVerified should be a boolean.\n\n\n  if (typeof request.emailVerified !== 'undefined' && typeof request.emailVerified !== 'boolean') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL_VERIFIED);\n  } // photoUrl should be a URL.\n\n\n  if (typeof request.photoUrl !== 'undefined' && !validator.isURL(request.photoUrl)) {\n    // This is called photoUrl on the backend but the developer specifies this as\n    // photoURL externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL);\n  } // disabled should be a boolean.\n\n\n  if (typeof request.disabled !== 'undefined' && typeof request.disabled !== 'boolean') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n  } // validSince should be a number.\n\n\n  if (typeof request.validSince !== 'undefined' && !validator.isNumber(request.validSince)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TOKENS_VALID_AFTER_TIME);\n  } // createdAt should be a number.\n\n\n  if (typeof request.createdAt !== 'undefined' && !validator.isNumber(request.createdAt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREATION_TIME);\n  } // lastSignInAt should be a number.\n\n\n  if (typeof request.lastLoginAt !== 'undefined' && !validator.isNumber(request.lastLoginAt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_LAST_SIGN_IN_TIME);\n  } // disableUser should be a boolean.\n\n\n  if (typeof request.disableUser !== 'undefined' && typeof request.disableUser !== 'boolean') {\n    // This is called disableUser on the backend but the developer specifies this as\n    // disabled externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n  } // customAttributes should be stringified JSON with no blacklisted claims.\n  // The payload should not exceed 1KB.\n\n\n  if (typeof request.customAttributes !== 'undefined') {\n    var developerClaims_1;\n\n    try {\n      developerClaims_1 = JSON.parse(request.customAttributes);\n    } catch (error) {\n      // JSON parsing error. This should never happen as we stringify the claims internally.\n      // However, we still need to check since setAccountInfo via edit requests could pass\n      // this field.\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CLAIMS, error.message);\n    }\n\n    var invalidClaims_1 = []; // Check for any invalid claims.\n\n    exports.RESERVED_CLAIMS.forEach(function (blacklistedClaim) {\n      if (Object.prototype.hasOwnProperty.call(developerClaims_1, blacklistedClaim)) {\n        invalidClaims_1.push(blacklistedClaim);\n      }\n    }); // Throw an error if an invalid claim is detected.\n\n    if (invalidClaims_1.length > 0) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.FORBIDDEN_CLAIM, invalidClaims_1.length > 1 ? \"Developer claims \\\"\" + invalidClaims_1.join('\", \"') + \"\\\" are reserved and cannot be specified.\" : \"Developer claim \\\"\" + invalidClaims_1[0] + \"\\\" is reserved and cannot be specified.\");\n    } // Check claims payload does not exceed maxmimum size.\n\n\n    if (request.customAttributes.length > MAX_CLAIMS_PAYLOAD_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.CLAIMS_TOO_LARGE, \"Developer claims payload should not exceed \" + MAX_CLAIMS_PAYLOAD_SIZE + \" characters.\");\n    }\n  } // passwordHash has to be a base64 encoded string.\n\n\n  if (typeof request.passwordHash !== 'undefined' && !validator.isString(request.passwordHash)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_HASH);\n  } // salt has to be a base64 encoded string.\n\n\n  if (typeof request.salt !== 'undefined' && !validator.isString(request.salt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_SALT);\n  } // providerUserInfo has to be an array of valid UserInfo requests.\n\n\n  if (typeof request.providerUserInfo !== 'undefined' && !validator.isArray(request.providerUserInfo)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_DATA);\n  } else if (validator.isArray(request.providerUserInfo)) {\n    request.providerUserInfo.forEach(function (providerUserInfoEntry) {\n      validateProviderUserInfo(providerUserInfoEntry);\n    });\n  } // mfaInfo is used for importUsers.\n  // mfa.enrollments is used for setAccountInfo.\n  // enrollments has to be an array of valid AuthFactorInfo requests.\n\n\n  var enrollments = null;\n\n  if (request.mfaInfo) {\n    enrollments = request.mfaInfo;\n  } else if (request.mfa && request.mfa.enrollments) {\n    enrollments = request.mfa.enrollments;\n  }\n\n  if (enrollments) {\n    if (!validator.isArray(enrollments)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS);\n    }\n\n    enrollments.forEach(function (authFactorInfoEntry) {\n      validateAuthFactorInfo(authFactorInfoEntry, writeOperationType);\n    });\n  }\n}\n/** Instantiates the createSessionCookie endpoint settings. */\n\n\nexports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = new api_request_1.ApiSettings(':createSessionCookie', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  // Validate the ID token is a non-empty string.\n  if (!validator.isNonEmptyString(request.idToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN);\n  } // Validate the custom session cookie duration.\n\n\n  if (!validator.isNumber(request.validDuration) || request.validDuration < MIN_SESSION_COOKIE_DURATION_SECS || request.validDuration > MAX_SESSION_COOKIE_DURATION_SECS) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION);\n  }\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain the session cookie.\n  if (!validator.isNonEmptyString(response.sessionCookie)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR);\n  }\n});\n/** Instantiates the uploadAccount endpoint settings. */\n\nexports.FIREBASE_AUTH_UPLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchCreate', 'POST');\n/** Instantiates the downloadAccount endpoint settings. */\n\nexports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchGet', 'GET') // Set request validator.\n.setRequestValidator(function (request) {\n  // Validate next page token.\n  if (typeof request.nextPageToken !== 'undefined' && !validator.isNonEmptyString(request.nextPageToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n  } // Validate max results.\n\n\n  if (!validator.isNumber(request.maxResults) || request.maxResults <= 0 || request.maxResults > MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Required \\\"maxResults\\\" must be a positive integer that does not exceed \" + (MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE + \".\"));\n  }\n});\n/** Instantiates the getAccountInfo endpoint settings. */\n\nexports.FIREBASE_AUTH_GET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  if (!response.users) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n  }\n});\n/**\n * Instantiates the getAccountInfo endpoint settings for use when fetching info\n * for multiple accounts.\n */\n\nexports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n});\n/** Instantiates the deleteAccount endpoint settings. */\n\nexports.FIREBASE_AUTH_DELETE_ACCOUNT = new api_request_1.ApiSettings('/accounts:delete', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  if (!request.localId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n});\nexports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = new api_request_1.ApiSettings('/accounts:batchDelete', 'POST').setRequestValidator(function (request) {\n  if (!request.localIds) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifiers');\n  }\n\n  if (typeof request.force === 'undefined' || request.force !== true) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing force=true field');\n  }\n}).setResponseValidator(function (response) {\n  var errors = response.errors || [];\n  errors.forEach(function (batchDeleteErrorInfo) {\n    if (typeof batchDeleteErrorInfo.index === 'undefined') {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.index field');\n    }\n\n    if (!batchDeleteErrorInfo.localId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.localId field');\n    } // Allow the (error) message to be missing/undef.\n\n  });\n});\n/** Instantiates the setAccountInfo endpoint settings for updating existing accounts. */\n\nexports.FIREBASE_AUTH_SET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:update', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  // localId is a required parameter.\n  if (typeof request.localId === 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  } // Throw error when tenantId is passed in POST body.\n\n\n  if (typeof request.tenantId !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"UpdateRequest\" property.');\n  }\n\n  validateCreateEditRequest(request, WriteOperationType.Update);\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  // If the localId is not returned, then the request failed.\n  if (!response.localId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n  }\n});\n/**\n * Instantiates the signupNewUser endpoint settings for creating a new user with or without\n * uid being specified. The backend will create a new one if not provided and return it.\n */\n\nexports.FIREBASE_AUTH_SIGN_UP_NEW_USER = new api_request_1.ApiSettings('/accounts', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  // signupNewUser does not support customAttributes.\n  if (typeof request.customAttributes !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"customAttributes\\\" cannot be set when creating a new user.\");\n  } // signupNewUser does not support validSince.\n\n\n  if (typeof request.validSince !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"validSince\\\" cannot be set when creating a new user.\");\n  } // Throw error when tenantId is passed in POST body.\n\n\n  if (typeof request.tenantId !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"CreateRequest\" property.');\n  }\n\n  validateCreateEditRequest(request, WriteOperationType.Create);\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  // If the localId is not returned, then the request failed.\n  if (!response.localId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new user');\n  }\n});\nvar FIREBASE_AUTH_GET_OOB_CODE = new api_request_1.ApiSettings('/accounts:sendOobCode', 'POST') // Set request validator.\n.setRequestValidator(function (request) {\n  if (!validator.isEmail(request.email)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n  }\n\n  if (exports.EMAIL_ACTION_REQUEST_TYPES.indexOf(request.requestType) === -1) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + request.requestType + \"\\\" is not a supported email action request type.\");\n  }\n}) // Set response validator.\n.setResponseValidator(function (response) {\n  // If the oobLink is not returned, then the request failed.\n  if (!response.oobLink) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create the email action link');\n  }\n});\n/** Instantiates the retrieve OIDC configuration endpoint settings. */\n\nvar GET_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'GET') // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain the OIDC provider resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get OIDC configuration');\n  }\n});\n/** Instantiates the delete OIDC configuration endpoint settings. */\n\nvar DELETE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'DELETE');\n/** Instantiates the create OIDC configuration endpoint settings. */\n\nvar CREATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs?oauthIdpConfigId={providerId}', 'POST') // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain the OIDC provider resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC configuration');\n  }\n});\n/** Instantiates the update OIDC configuration endpoint settings. */\n\nvar UPDATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}?updateMask={updateMask}', 'PATCH') // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain the configuration resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC configuration');\n  }\n});\n/** Instantiates the list OIDC configuration endpoint settings. */\n\nvar LIST_OAUTH_IDP_CONFIGS = new api_request_1.ApiSettings('/oauthIdpConfigs', 'GET') // Set request validator.\n.setRequestValidator(function (request) {\n  // Validate next page token.\n  if (typeof request.pageToken !== 'undefined' && !validator.isNonEmptyString(request.pageToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n  } // Validate max results.\n\n\n  if (!validator.isNumber(request.pageSize) || request.pageSize <= 0 || request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Required \\\"maxResults\\\" must be a positive integer that does not exceed \" + (MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE + \".\"));\n  }\n});\n/** Instantiates the retrieve SAML configuration endpoint settings. */\n\nvar GET_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'GET') // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain the SAML provider resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get SAML configuration');\n  }\n});\n/** Instantiates the delete SAML configuration endpoint settings. */\n\nvar DELETE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'DELETE');\n/** Instantiates the create SAML configuration endpoint settings. */\n\nvar CREATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs?inboundSamlConfigId={providerId}', 'POST') // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain the SAML provider resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML configuration');\n  }\n});\n/** Instantiates the update SAML configuration endpoint settings. */\n\nvar UPDATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}?updateMask={updateMask}', 'PATCH') // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain the configuration resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML configuration');\n  }\n});\n/** Instantiates the list SAML configuration endpoint settings. */\n\nvar LIST_INBOUND_SAML_CONFIGS = new api_request_1.ApiSettings('/inboundSamlConfigs', 'GET') // Set request validator.\n.setRequestValidator(function (request) {\n  // Validate next page token.\n  if (typeof request.pageToken !== 'undefined' && !validator.isNonEmptyString(request.pageToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n  } // Validate max results.\n\n\n  if (!validator.isNumber(request.pageSize) || request.pageSize <= 0 || request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Required \\\"maxResults\\\" must be a positive integer that does not exceed \" + (MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE + \".\"));\n  }\n});\n/**\n * Class that provides the mechanism to send requests to the Firebase Auth backend endpoints.\n */\n\nvar AbstractAuthRequestHandler =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n   * @constructor\n   */\n  function AbstractAuthRequestHandler(app) {\n    this.app = app;\n\n    if (typeof app !== 'object' || app === null || !('options' in app)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.auth() must be a valid Firebase app instance.');\n    }\n\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  /**\n   * @param {any} response The response to check for errors.\n   * @return {string|null} The error code if present; null otherwise.\n   */\n\n\n  AbstractAuthRequestHandler.getErrorCode = function (response) {\n    return validator.isNonNullObject(response) && response.error && response.error.message || null;\n  };\n\n  AbstractAuthRequestHandler.addUidToRequest = function (id, request) {\n    if (!validator.isUid(id.uid)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n    }\n\n    request.localId ? request.localId.push(id.uid) : request.localId = [id.uid];\n    return request;\n  };\n\n  AbstractAuthRequestHandler.addEmailToRequest = function (id, request) {\n    if (!validator.isEmail(id.email)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n    }\n\n    request.email ? request.email.push(id.email) : request.email = [id.email];\n    return request;\n  };\n\n  AbstractAuthRequestHandler.addPhoneToRequest = function (id, request) {\n    if (!validator.isPhoneNumber(id.phoneNumber)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n    }\n\n    request.phoneNumber ? request.phoneNumber.push(id.phoneNumber) : request.phoneNumber = [id.phoneNumber];\n    return request;\n  };\n\n  AbstractAuthRequestHandler.addProviderToRequest = function (id, request) {\n    if (!validator.isNonEmptyString(id.providerId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n    }\n\n    if (!validator.isNonEmptyString(id.providerUid)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_UID);\n    }\n\n    var federatedUserId = {\n      providerId: id.providerId,\n      rawId: id.providerUid\n    };\n    request.federatedUserId ? request.federatedUserId.push(federatedUserId) : request.federatedUserId = [federatedUserId];\n    return request;\n  };\n  /**\n   * Creates a new Firebase session cookie with the specified duration that can be used for\n   * session management (set as a server side session cookie with custom cookie policy).\n   * The session cookie JWT will have the same payload claims as the provided ID token.\n   *\n   * @param {string} idToken The Firebase ID token to exchange for a session cookie.\n   * @param {number} expiresIn The session cookie duration in milliseconds.\n   *\n   * @return {Promise<string>} A promise that resolves on success with the created session cookie.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.createSessionCookie = function (idToken, expiresIn) {\n    var request = {\n      idToken: idToken,\n      // Convert to seconds.\n      validDuration: expiresIn / 1000\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE, request).then(function (response) {\n      return response.sessionCookie;\n    });\n  };\n  /**\n   * Looks up a user by uid.\n   *\n   * @param {string} uid The uid of the user to lookup.\n   * @return {Promise<object>} A promise that resolves with the user information.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.getAccountInfoByUid = function (uid) {\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    }\n\n    var request = {\n      localId: [uid]\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  };\n  /**\n   * Looks up a user by email.\n   *\n   * @param {string} email The email of the user to lookup.\n   * @return {Promise<object>} A promise that resolves with the user information.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.getAccountInfoByEmail = function (email) {\n    if (!validator.isEmail(email)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL));\n    }\n\n    var request = {\n      email: [email]\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  };\n  /**\n   * Looks up a user by phone number.\n   *\n   * @param {string} phoneNumber The phone number of the user to lookup.\n   * @return {Promise<object>} A promise that resolves with the user information.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.getAccountInfoByPhoneNumber = function (phoneNumber) {\n    if (!validator.isPhoneNumber(phoneNumber)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER));\n    }\n\n    var request = {\n      phoneNumber: [phoneNumber]\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  };\n  /**\n   * Looks up multiple users by their identifiers (uid, email, etc).\n   *\n   * @param {UserIdentifier[]} identifiers The identifiers indicating the users\n   *     to be looked up. Must have <= 100 entries.\n   * @param {Promise<object>} A promise that resolves with the set of successfully\n   *     looked up users. Possibly empty if no users were looked up.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.getAccountInfoByIdentifiers = function (identifiers) {\n    if (identifiers.length === 0) {\n      return Promise.resolve({\n        users: []\n      });\n    } else if (identifiers.length > MAX_GET_ACCOUNTS_BATCH_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`identifiers` parameter must have <= ' + MAX_GET_ACCOUNTS_BATCH_SIZE + ' entries.');\n    }\n\n    var request = {};\n\n    for (var _i = 0, identifiers_1 = identifiers; _i < identifiers_1.length; _i++) {\n      var id = identifiers_1[_i];\n\n      if (identifier_1.isUidIdentifier(id)) {\n        request = AbstractAuthRequestHandler.addUidToRequest(id, request);\n      } else if (identifier_1.isEmailIdentifier(id)) {\n        request = AbstractAuthRequestHandler.addEmailToRequest(id, request);\n      } else if (identifier_1.isPhoneIdentifier(id)) {\n        request = AbstractAuthRequestHandler.addPhoneToRequest(id, request);\n      } else if (identifier_1.isProviderIdentifier(id)) {\n        request = AbstractAuthRequestHandler.addProviderToRequest(id, request);\n      } else {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Unrecognized identifier: ' + id);\n      }\n    }\n\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO, request);\n  };\n  /**\n   * Exports the users (single batch only) with a size of maxResults and starting from\n   * the offset as specified by pageToken.\n   *\n   * @param {number=} maxResults The page size, 1000 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param {string=} pageToken The next page token. If not specified, returns users starting\n   *     without any offset. Users are returned in the order they were created from oldest to\n   *     newest, relative to the page token offset.\n   * @return {Promise<object>} A promise that resolves with the current batch of downloaded\n   *     users and the next page token if available. For the last page, an empty list of users\n   *     and no page token are returned.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.downloadAccount = function (maxResults, pageToken) {\n    if (maxResults === void 0) {\n      maxResults = MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE;\n    } // Construct request.\n\n\n    var request = {\n      maxResults: maxResults,\n      nextPageToken: pageToken\n    }; // Remove next page token if not provided.\n\n    if (typeof request.nextPageToken === 'undefined') {\n      delete request.nextPageToken;\n    }\n\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT, request).then(function (response) {\n      // No more users available.\n      if (!response.users) {\n        response.users = [];\n      }\n\n      return response;\n    });\n  };\n  /**\n   * Imports the list of users provided to Firebase Auth. This is useful when\n   * migrating from an external authentication system without having to use the Firebase CLI SDK.\n   * At most, 1000 users are allowed to be imported one at a time.\n   * When importing a list of password users, UserImportOptions are required to be specified.\n   *\n   * @param {UserImportRecord[]} users The list of user records to import to Firebase Auth.\n   * @param {UserImportOptions=} options The user import options, required when the users provided\n   *     include password credentials.\n   * @return {Promise<UserImportResult>} A promise that resolves when the operation completes\n   *     with the result of the import. This includes the number of successful imports, the number\n   *     of failed uploads and their corresponding errors.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.uploadAccount = function (users, options) {\n    // This will throw if any error is detected in the hash options.\n    // For errors in the list of users, this will not throw and will report the errors and the\n    // corresponding user index in the user import generated response below.\n    // No need to validate raw request or raw response as this is done in UserImportBuilder.\n    var userImportBuilder = new user_import_builder_1.UserImportBuilder(users, options, function (userRequest) {\n      // Pass true to validate the uploadAccount specific fields.\n      validateCreateEditRequest(userRequest, WriteOperationType.Upload);\n    });\n    var request = userImportBuilder.buildRequest(); // Fail quickly if more users than allowed are to be imported.\n\n    if (validator.isArray(users) && users.length > MAX_UPLOAD_ACCOUNT_BATCH_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, \"A maximum of \" + MAX_UPLOAD_ACCOUNT_BATCH_SIZE + \" users can be imported at once.\");\n    } // If no remaining user in request after client side processing, there is no need\n    // to send the request to the server.\n\n\n    if (!request.users || request.users.length === 0) {\n      return Promise.resolve(userImportBuilder.buildResponse([]));\n    }\n\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_UPLOAD_ACCOUNT, request).then(function (response) {\n      // No error object is returned if no error encountered.\n      var failedUploads = response.error || []; // Rewrite response as UserImportResult and re-insert client previously detected errors.\n\n      return userImportBuilder.buildResponse(failedUploads);\n    });\n  };\n  /**\n   * Deletes an account identified by a uid.\n   *\n   * @param {string} uid The uid of the user to delete.\n   * @return {Promise<object>} A promise that resolves when the user is deleted.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.deleteAccount = function (uid) {\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    }\n\n    var request = {\n      localId: uid\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DELETE_ACCOUNT, request);\n  };\n\n  AbstractAuthRequestHandler.prototype.deleteAccounts = function (uids, force) {\n    if (uids.length === 0) {\n      return Promise.resolve({});\n    } else if (uids.length > MAX_DELETE_ACCOUNTS_BATCH_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`uids` parameter must have <= ' + MAX_DELETE_ACCOUNTS_BATCH_SIZE + ' entries.');\n    }\n\n    var request = {\n      localIds: [],\n      force: force\n    };\n    uids.forEach(function (uid) {\n      if (!validator.isUid(uid)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n      }\n\n      request.localIds.push(uid);\n    });\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS, request);\n  };\n  /**\n   * Sets additional developer claims on an existing user identified by provided UID.\n   *\n   * @param {string} uid The user to edit.\n   * @param {object} customUserClaims The developer claims to set.\n   * @return {Promise<string>} A promise that resolves when the operation completes\n   *     with the user id that was edited.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.setCustomUserClaims = function (uid, customUserClaims) {\n    // Validate user UID.\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    } else if (!validator.isObject(customUserClaims)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'CustomUserClaims argument must be an object or null.'));\n    } // Delete operation. Replace null with an empty object.\n\n\n    if (customUserClaims === null) {\n      customUserClaims = {};\n    } // Construct custom user attribute editting request.\n\n\n    var request = {\n      localId: uid,\n      customAttributes: JSON.stringify(customUserClaims)\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request).then(function (response) {\n      return response.localId;\n    });\n  };\n  /**\n   * Edits an existing user.\n   *\n   * @param {string} uid The user to edit.\n   * @param {object} properties The properties to set on the user.\n   * @return {Promise<string>} A promise that resolves when the operation completes\n   *     with the user id that was edited.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.updateExistingAccount = function (uid, properties) {\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    } else if (!validator.isNonNullObject(properties)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n    } // Build the setAccountInfo request.\n\n\n    var request = deep_copy_1.deepCopy(properties);\n    request.localId = uid; // For deleting displayName or photoURL, these values must be passed as null.\n    // They will be removed from the backend request and an additional parameter\n    // deleteAttribute: ['PHOTO_URL', 'DISPLAY_NAME']\n    // with an array of the parameter names to delete will be passed.\n    // Parameters that are deletable and their deleteAttribute names.\n    // Use client facing names, photoURL instead of photoUrl.\n\n    var deletableParams = {\n      displayName: 'DISPLAY_NAME',\n      photoURL: 'PHOTO_URL'\n    }; // Properties to delete if available.\n\n    request.deleteAttribute = [];\n\n    for (var key in deletableParams) {\n      if (request[key] === null) {\n        // Add property identifier to list of attributes to delete.\n        request.deleteAttribute.push(deletableParams[key]); // Remove property from request.\n\n        delete request[key];\n      }\n    }\n\n    if (request.deleteAttribute.length === 0) {\n      delete request.deleteAttribute;\n    } // For deleting phoneNumber, this value must be passed as null.\n    // It will be removed from the backend request and an additional parameter\n    // deleteProvider: ['phone'] with an array of providerIds (phone in this case),\n    // will be passed.\n    // Currently this applies to phone provider only.\n\n\n    if (request.phoneNumber === null) {\n      request.deleteProvider = ['phone'];\n      delete request.phoneNumber;\n    } else {\n      // Doesn't apply to other providers in admin SDK.\n      delete request.deleteProvider;\n    } // Rewrite photoURL to photoUrl.\n\n\n    if (typeof request.photoURL !== 'undefined') {\n      request.photoUrl = request.photoURL;\n      delete request.photoURL;\n    } // Rewrite disabled to disableUser.\n\n\n    if (typeof request.disabled !== 'undefined') {\n      request.disableUser = request.disabled;\n      delete request.disabled;\n    } // Construct mfa related user data.\n\n\n    if (validator.isNonNullObject(request.multiFactor)) {\n      if (request.multiFactor.enrolledFactors === null) {\n        // Remove all second factors.\n        request.mfa = {};\n      } else if (validator.isArray(request.multiFactor.enrolledFactors)) {\n        request.mfa = {\n          enrollments: []\n        };\n\n        try {\n          request.multiFactor.enrolledFactors.forEach(function (multiFactorInfo) {\n            request.mfa.enrollments.push(user_import_builder_1.convertMultiFactorInfoToServerFormat(multiFactorInfo));\n          });\n        } catch (e) {\n          return Promise.reject(e);\n        }\n\n        if (request.mfa.enrollments.length === 0) {\n          delete request.mfa.enrollments;\n        }\n      }\n\n      delete request.multiFactor;\n    }\n\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request).then(function (response) {\n      return response.localId;\n    });\n  };\n  /**\n   * Revokes all refresh tokens for the specified user identified by the uid provided.\n   * In addition to revoking all refresh tokens for a user, all ID tokens issued\n   * before revocation will also be revoked on the Auth backend. Any request with an\n   * ID token generated before revocation will be rejected with a token expired error.\n   * Note that due to the fact that the timestamp is stored in seconds, any tokens minted in\n   * the same second as the revocation will still be valid. If there is a chance that a token\n   * was minted in the last second, delay for 1 second before revoking.\n   *\n   * @param {string} uid The user whose tokens are to be revoked.\n   * @return {Promise<string>} A promise that resolves when the operation completes\n   *     successfully with the user id of the corresponding user.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.revokeRefreshTokens = function (uid) {\n    // Validate user UID.\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    }\n\n    var request = {\n      localId: uid,\n      // validSince is in UTC seconds.\n      validSince: Math.floor(new Date().getTime() / 1000)\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request).then(function (response) {\n      return response.localId;\n    });\n  };\n  /**\n   * Create a new user with the properties supplied.\n   *\n   * @param {object} properties The properties to set on the user.\n   * @return {Promise<string>} A promise that resolves when the operation completes\n   *     with the user id that was created.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.createNewAccount = function (properties) {\n    if (!validator.isNonNullObject(properties)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n    } // Build the signupNewUser request.\n\n\n    var request = deep_copy_1.deepCopy(properties); // Rewrite photoURL to photoUrl.\n\n    if (typeof request.photoURL !== 'undefined') {\n      request.photoUrl = request.photoURL;\n      delete request.photoURL;\n    } // Rewrite uid to localId if it exists.\n\n\n    if (typeof request.uid !== 'undefined') {\n      request.localId = request.uid;\n      delete request.uid;\n    } // Construct mfa related user data.\n\n\n    if (validator.isNonNullObject(request.multiFactor)) {\n      if (validator.isNonEmptyArray(request.multiFactor.enrolledFactors)) {\n        var mfaInfo_1 = [];\n\n        try {\n          request.multiFactor.enrolledFactors.forEach(function (multiFactorInfo) {\n            // Enrollment time and uid are not allowed for signupNewUser endpoint.\n            // They will automatically be provisioned server side.\n            if (multiFactorInfo.enrollmentTime) {\n              throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"enrollmentTime\" is not supported when adding second factors via \"createUser()\"');\n            } else if (multiFactorInfo.uid) {\n              throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"uid\" is not supported when adding second factors via \"createUser()\"');\n            }\n\n            mfaInfo_1.push(user_import_builder_1.convertMultiFactorInfoToServerFormat(multiFactorInfo));\n          });\n        } catch (e) {\n          return Promise.reject(e);\n        }\n\n        request.mfaInfo = mfaInfo_1;\n      }\n\n      delete request.multiFactor;\n    }\n\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SIGN_UP_NEW_USER, request).then(function (response) {\n      // Return the user id.\n      return response.localId;\n    });\n  };\n  /**\n   * Generates the out of band email action link for the email specified using the action code settings provided.\n   * Returns a promise that resolves with the generated link.\n   *\n   * @param {string} requestType The request type. This could be either used for password reset,\n   *     email verification, email link sign-in.\n   * @param {string} email The email of the user the link is being sent to.\n   * @param {ActionCodeSettings=} actionCodeSettings The optional action code setings which defines whether\n   *     the link is to be handled by a mobile app and the additional state information to be passed in the\n   *     deep link, etc. Required when requestType == 'EMAIL_SIGNIN'\n   * @return {Promise<string>} A promise that resolves with the email action link.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.getEmailActionLink = function (requestType, email, actionCodeSettings) {\n    var request = {\n      requestType: requestType,\n      email: email,\n      returnOobLink: true\n    }; // ActionCodeSettings required for email link sign-in to determine the url where the sign-in will\n    // be completed.\n\n    if (typeof actionCodeSettings === 'undefined' && requestType === 'EMAIL_SIGNIN') {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"`actionCodeSettings` is required when `requestType` === 'EMAIL_SIGNIN'\"));\n    }\n\n    if (typeof actionCodeSettings !== 'undefined' || requestType === 'EMAIL_SIGNIN') {\n      try {\n        var builder = new action_code_settings_builder_1.ActionCodeSettingsBuilder(actionCodeSettings);\n        request = deep_copy_1.deepExtend(request, builder.buildRequest());\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), FIREBASE_AUTH_GET_OOB_CODE, request).then(function (response) {\n      // Return the link.\n      return response.oobLink;\n    });\n  };\n  /**\n   * Looks up an OIDC provider configuration by provider ID.\n   *\n   * @param {string} providerId The provider identifier of the configuration to lookup.\n   * @return {Promise<OIDCConfigServerResponse>} A promise that resolves with the provider configuration information.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.getOAuthIdpConfig = function (providerId) {\n    if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_OAUTH_IDP_CONFIG, {}, {\n      providerId: providerId\n    });\n  };\n  /**\n   * Lists the OIDC configurations (single batch only) with a size of maxResults and starting from\n   * the offset as specified by pageToken.\n   *\n   * @param {number=} maxResults The page size, 100 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param {string=} pageToken The next page token. If not specified, returns OIDC configurations\n   *     without any offset. Configurations are returned in the order they were created from oldest to\n   *     newest, relative to the page token offset.\n   * @return {Promise<object>} A promise that resolves with the current batch of downloaded\n   *     OIDC configurations and the next page token if available. For the last page, an empty list of provider\n   *     configuration and no page token are returned.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.listOAuthIdpConfigs = function (maxResults, pageToken) {\n    if (maxResults === void 0) {\n      maxResults = MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE;\n    }\n\n    var request = {\n      pageSize: maxResults\n    }; // Add next page token if provided.\n\n    if (typeof pageToken !== 'undefined') {\n      request.pageToken = pageToken;\n    }\n\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_OAUTH_IDP_CONFIGS, request).then(function (response) {\n      if (!response.oauthIdpConfigs) {\n        response.oauthIdpConfigs = [];\n        delete response.nextPageToken;\n      }\n\n      return response;\n    });\n  };\n  /**\n   * Deletes an OIDC configuration identified by a providerId.\n   *\n   * @param {string} providerId The identifier of the OIDC configuration to delete.\n   * @return {Promise<void>} A promise that resolves when the OIDC provider is deleted.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.deleteOAuthIdpConfig = function (providerId) {\n    if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_OAUTH_IDP_CONFIG, {}, {\n      providerId: providerId\n    }).then(function () {// Return nothing.\n    });\n  };\n  /**\n   * Creates a new OIDC provider configuration with the properties provided.\n   *\n   * @param {AuthProviderConfig} options The properties to set on the new OIDC provider configuration to be created.\n   * @return {Promise<OIDCConfigServerResponse>} A promise that resolves with the newly created OIDC\n   *     configuration.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.createOAuthIdpConfig = function (options) {\n    // Construct backend request.\n    var request;\n\n    try {\n      request = auth_config_1.OIDCConfig.buildServerRequest(options) || {};\n    } catch (e) {\n      return Promise.reject(e);\n    }\n\n    var providerId = options.providerId;\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_OAUTH_IDP_CONFIG, request, {\n      providerId: providerId\n    }).then(function (response) {\n      if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC provider configuration');\n      }\n\n      return response;\n    });\n  };\n  /**\n   * Updates an existing OIDC provider configuration with the properties provided.\n   *\n   * @param {string} providerId The provider identifier of the OIDC configuration to update.\n   * @param {OIDCUpdateAuthProviderRequest} options The properties to update on the existing configuration.\n   * @return {Promise<OIDCConfigServerResponse>} A promise that resolves with the modified provider\n   *     configuration.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.updateOAuthIdpConfig = function (providerId, options) {\n    if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    } // Construct backend request.\n\n\n    var request;\n\n    try {\n      request = auth_config_1.OIDCConfig.buildServerRequest(options, true) || {};\n    } catch (e) {\n      return Promise.reject(e);\n    }\n\n    var updateMask = utils.generateUpdateMask(request);\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_OAUTH_IDP_CONFIG, request, {\n      providerId: providerId,\n      updateMask: updateMask.join(',')\n    }).then(function (response) {\n      if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC provider configuration');\n      }\n\n      return response;\n    });\n  };\n  /**\n   * Looks up an SAML provider configuration by provider ID.\n   *\n   * @param {string} providerId The provider identifier of the configuration to lookup.\n   * @return {Promise<SAMLConfigServerResponse>} A promise that resolves with the provider configuration information.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.getInboundSamlConfig = function (providerId) {\n    if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_INBOUND_SAML_CONFIG, {}, {\n      providerId: providerId\n    });\n  };\n  /**\n   * Lists the SAML configurations (single batch only) with a size of maxResults and starting from\n   * the offset as specified by pageToken.\n   *\n   * @param {number=} maxResults The page size, 100 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param {string=} pageToken The next page token. If not specified, returns SAML configurations starting\n   *     without any offset. Configurations are returned in the order they were created from oldest to\n   *     newest, relative to the page token offset.\n   * @return {Promise<object>} A promise that resolves with the current batch of downloaded\n   *     SAML configurations and the next page token if available. For the last page, an empty list of provider\n   *     configuration and no page token are returned.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.listInboundSamlConfigs = function (maxResults, pageToken) {\n    if (maxResults === void 0) {\n      maxResults = MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE;\n    }\n\n    var request = {\n      pageSize: maxResults\n    }; // Add next page token if provided.\n\n    if (typeof pageToken !== 'undefined') {\n      request.pageToken = pageToken;\n    }\n\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_INBOUND_SAML_CONFIGS, request).then(function (response) {\n      if (!response.inboundSamlConfigs) {\n        response.inboundSamlConfigs = [];\n        delete response.nextPageToken;\n      }\n\n      return response;\n    });\n  };\n  /**\n   * Deletes a SAML configuration identified by a providerId.\n   *\n   * @param {string} providerId The identifier of the SAML configuration to delete.\n   * @return {Promise<void>} A promise that resolves when the SAML provider is deleted.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.deleteInboundSamlConfig = function (providerId) {\n    if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_INBOUND_SAML_CONFIG, {}, {\n      providerId: providerId\n    }).then(function () {// Return nothing.\n    });\n  };\n  /**\n   * Creates a new SAML provider configuration with the properties provided.\n   *\n   * @param {AuthProviderConfig} options The properties to set on the new SAML provider configuration to be created.\n   * @return {Promise<SAMLConfigServerResponse>} A promise that resolves with the newly created SAML\n   *     configuration.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.createInboundSamlConfig = function (options) {\n    // Construct backend request.\n    var request;\n\n    try {\n      request = auth_config_1.SAMLConfig.buildServerRequest(options) || {};\n    } catch (e) {\n      return Promise.reject(e);\n    }\n\n    var providerId = options.providerId;\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_INBOUND_SAML_CONFIG, request, {\n      providerId: providerId\n    }).then(function (response) {\n      if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML provider configuration');\n      }\n\n      return response;\n    });\n  };\n  /**\n   * Updates an existing SAML provider configuration with the properties provided.\n   *\n   * @param {string} providerId The provider identifier of the SAML configuration to update.\n   * @param {SAMLUpdateAuthProviderRequest} options The properties to update on the existing configuration.\n   * @return {Promise<SAMLConfigServerResponse>} A promise that resolves with the modified provider\n   *     configuration.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.updateInboundSamlConfig = function (providerId, options) {\n    if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    } // Construct backend request.\n\n\n    var request;\n\n    try {\n      request = auth_config_1.SAMLConfig.buildServerRequest(options, true) || {};\n    } catch (e) {\n      return Promise.reject(e);\n    }\n\n    var updateMask = utils.generateUpdateMask(request);\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_INBOUND_SAML_CONFIG, request, {\n      providerId: providerId,\n      updateMask: updateMask.join(',')\n    }).then(function (response) {\n      if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML provider configuration');\n      }\n\n      return response;\n    });\n  };\n  /**\n   * Invokes the request handler based on the API settings object passed.\n   *\n   * @param {AuthResourceUrlBuilder} urlBuilder The URL builder for Auth endpoints.\n   * @param {ApiSettings} apiSettings The API endpoint settings to apply to request and response.\n   * @param {object} requestData The request data.\n   * @param {object=} additionalResourceParams Additional resource related params if needed.\n   * @return {Promise<object>} A promise that resolves with the response.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.invokeRequestHandler = function (urlBuilder, apiSettings, requestData, additionalResourceParams) {\n    var _this = this;\n\n    return urlBuilder.getUrl(apiSettings.getEndpoint(), additionalResourceParams).then(function (url) {\n      // Validate request.\n      var requestValidator = apiSettings.getRequestValidator();\n      requestValidator(requestData); // Process request.\n\n      var req = {\n        method: apiSettings.getHttpMethod(),\n        url: url,\n        headers: FIREBASE_AUTH_HEADER,\n        data: requestData,\n        timeout: FIREBASE_AUTH_TIMEOUT\n      };\n      return _this.httpClient.send(req);\n    }).then(function (response) {\n      // Validate response.\n      var responseValidator = apiSettings.getResponseValidator();\n      responseValidator(response.data); // Return entire response.\n\n      return response.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var error = err.response.data;\n        var errorCode = AbstractAuthRequestHandler.getErrorCode(error);\n\n        if (!errorCode) {\n          throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + error + '. Additionally, an ' + 'internal error occurred while attempting to extract the ' + 'errorcode from the error.');\n        }\n\n        throw error_1.FirebaseAuthError.fromServerError(errorCode,\n        /* message */\n        undefined, error);\n      }\n\n      throw err;\n    });\n  };\n  /**\n   * @return {AuthResourceUrlBuilder} The current Auth user management resource URL builder.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.getAuthUrlBuilder = function () {\n    if (!this.authUrlBuilder) {\n      this.authUrlBuilder = this.newAuthUrlBuilder();\n    }\n\n    return this.authUrlBuilder;\n  };\n  /**\n   * @return {AuthResourceUrlBuilder} The current project config resource URL builder.\n   */\n\n\n  AbstractAuthRequestHandler.prototype.getProjectConfigUrlBuilder = function () {\n    if (!this.projectConfigUrlBuilder) {\n      this.projectConfigUrlBuilder = this.newProjectConfigUrlBuilder();\n    }\n\n    return this.projectConfigUrlBuilder;\n  };\n\n  return AbstractAuthRequestHandler;\n}();\n\nexports.AbstractAuthRequestHandler = AbstractAuthRequestHandler;\n/** Instantiates the getTenant endpoint settings. */\n\nvar GET_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'GET') // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain at least the tenant name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get tenant');\n  }\n});\n/** Instantiates the deleteTenant endpoint settings. */\n\nvar DELETE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'DELETE');\n/** Instantiates the updateTenant endpoint settings. */\n\nvar UPDATE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}?updateMask={updateMask}', 'PATCH') // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain at least the tenant name.\n  if (!validator.isNonEmptyString(response.name) || !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update tenant');\n  }\n});\n/** Instantiates the listTenants endpoint settings. */\n\nvar LIST_TENANTS = new api_request_1.ApiSettings('/tenants', 'GET') // Set request validator.\n.setRequestValidator(function (request) {\n  // Validate next page token.\n  if (typeof request.pageToken !== 'undefined' && !validator.isNonEmptyString(request.pageToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n  } // Validate max results.\n\n\n  if (!validator.isNumber(request.pageSize) || request.pageSize <= 0 || request.pageSize > MAX_LIST_TENANT_PAGE_SIZE) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Required \\\"maxResults\\\" must be a positive non-zero number that does not exceed \" + (\"the allowed \" + MAX_LIST_TENANT_PAGE_SIZE + \".\"));\n  }\n});\n/** Instantiates the createTenant endpoint settings. */\n\nvar CREATE_TENANT = new api_request_1.ApiSettings('/tenants', 'POST') // Set response validator.\n.setResponseValidator(function (response) {\n  // Response should always contain at least the tenant name.\n  if (!validator.isNonEmptyString(response.name) || !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new tenant');\n  }\n});\n/**\n * Utility for sending requests to Auth server that are Auth instance related. This includes user and\n * tenant management related APIs. This extends the BaseFirebaseAuthRequestHandler class and defines\n * additional tenant management related APIs.\n */\n\nvar AuthRequestHandler =\n/** @class */\nfunction (_super) {\n  __extends(AuthRequestHandler, _super);\n  /**\n   * The FirebaseAuthRequestHandler constructor used to initialize an instance using a FirebaseApp.\n   *\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n   * @constructor.\n   */\n\n\n  function AuthRequestHandler(app) {\n    var _this = _super.call(this, app) || this;\n\n    _this.tenantMgmtResourceBuilder = new AuthResourceUrlBuilder(app, 'v2');\n    return _this;\n  }\n  /**\n   * @return {AuthResourceUrlBuilder} A new Auth user management resource URL builder instance.\n   */\n\n\n  AuthRequestHandler.prototype.newAuthUrlBuilder = function () {\n    return new AuthResourceUrlBuilder(this.app, 'v1');\n  };\n  /**\n   * @return {AuthResourceUrlBuilder} A new project config resource URL builder instance.\n   */\n\n\n  AuthRequestHandler.prototype.newProjectConfigUrlBuilder = function () {\n    return new AuthResourceUrlBuilder(this.app, 'v2');\n  };\n  /**\n   * Looks up a tenant by tenant ID.\n   *\n   * @param {string} tenantId The tenant identifier of the tenant to lookup.\n   * @return {Promise<TenantServerResponse>} A promise that resolves with the tenant information.\n   */\n\n\n  AuthRequestHandler.prototype.getTenant = function (tenantId) {\n    if (!validator.isNonEmptyString(tenantId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n    }\n\n    return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, GET_TENANT, {}, {\n      tenantId: tenantId\n    }).then(function (response) {\n      return response;\n    });\n  };\n  /**\n   * Exports the tenants (single batch only) with a size of maxResults and starting from\n   * the offset as specified by pageToken.\n   *\n   * @param {number=} maxResults The page size, 1000 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param {string=} pageToken The next page token. If not specified, returns tenants starting\n   *     without any offset. Tenants are returned in the order they were created from oldest to\n   *     newest, relative to the page token offset.\n   * @return {Promise<object>} A promise that resolves with the current batch of downloaded\n   *     tenants and the next page token if available. For the last page, an empty list of tenants\n   *     and no page token are returned.\n   */\n\n\n  AuthRequestHandler.prototype.listTenants = function (maxResults, pageToken) {\n    if (maxResults === void 0) {\n      maxResults = MAX_LIST_TENANT_PAGE_SIZE;\n    }\n\n    var request = {\n      pageSize: maxResults,\n      pageToken: pageToken\n    }; // Remove next page token if not provided.\n\n    if (typeof request.pageToken === 'undefined') {\n      delete request.pageToken;\n    }\n\n    return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, LIST_TENANTS, request).then(function (response) {\n      if (!response.tenants) {\n        response.tenants = [];\n        delete response.nextPageToken;\n      }\n\n      return response;\n    });\n  };\n  /**\n   * Deletes a tenant identified by a tenantId.\n   *\n   * @param {string} tenantId The identifier of the tenant to delete.\n   * @return {Promise<void>} A promise that resolves when the tenant is deleted.\n   */\n\n\n  AuthRequestHandler.prototype.deleteTenant = function (tenantId) {\n    if (!validator.isNonEmptyString(tenantId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n    }\n\n    return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, DELETE_TENANT, {}, {\n      tenantId: tenantId\n    }).then(function () {// Return nothing.\n    });\n  };\n  /**\n   * Creates a new tenant with the properties provided.\n   *\n   * @param {TenantOptions} tenantOptions The properties to set on the new tenant to be created.\n   * @return {Promise<TenantServerResponse>} A promise that resolves with the newly created tenant object.\n   */\n\n\n  AuthRequestHandler.prototype.createTenant = function (tenantOptions) {\n    try {\n      // Construct backend request.\n      var request = tenant_1.Tenant.buildServerRequest(tenantOptions, true);\n      return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, CREATE_TENANT, request).then(function (response) {\n        return response;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\n   * Updates an existing tenant with the properties provided.\n   *\n   * @param {string} tenantId The tenant identifier of the tenant to update.\n   * @param {TenantOptions} tenantOptions The properties to update on the existing tenant.\n   * @return {Promise<TenantServerResponse>} A promise that resolves with the modified tenant object.\n   */\n\n\n  AuthRequestHandler.prototype.updateTenant = function (tenantId, tenantOptions) {\n    if (!validator.isNonEmptyString(tenantId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n    }\n\n    try {\n      // Construct backend request.\n      var request = tenant_1.Tenant.buildServerRequest(tenantOptions, false); // Do not traverse deep into testPhoneNumbers. The entire content should be replaced\n      // and not just specific phone numbers.\n\n      var updateMask = utils.generateUpdateMask(request, ['testPhoneNumbers']);\n      return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, UPDATE_TENANT, request, {\n        tenantId: tenantId,\n        updateMask: updateMask.join(',')\n      }).then(function (response) {\n        return response;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return AuthRequestHandler;\n}(AbstractAuthRequestHandler);\n\nexports.AuthRequestHandler = AuthRequestHandler;\n/**\n * Utility for sending requests to Auth server that are tenant Auth instance related. This includes user\n * management related APIs for specified tenants.\n * This extends the BaseFirebaseAuthRequestHandler class.\n */\n\nvar TenantAwareAuthRequestHandler =\n/** @class */\nfunction (_super) {\n  __extends(TenantAwareAuthRequestHandler, _super);\n  /**\n   * The FirebaseTenantRequestHandler constructor used to initialize an instance using a\n   * FirebaseApp and a tenant ID.\n   *\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n   * @param {string} tenantId The request handler's tenant ID.\n   * @constructor\n   */\n\n\n  function TenantAwareAuthRequestHandler(app, tenantId) {\n    var _this = _super.call(this, app) || this;\n\n    _this.tenantId = tenantId;\n    return _this;\n  }\n  /**\n   * @return {AuthResourceUrlBuilder} A new Auth user management resource URL builder instance.\n   */\n\n\n  TenantAwareAuthRequestHandler.prototype.newAuthUrlBuilder = function () {\n    return new TenantAwareAuthResourceUrlBuilder(this.app, 'v1', this.tenantId);\n  };\n  /**\n   * @return {AuthResourceUrlBuilder} A new project config resource URL builder instance.\n   */\n\n\n  TenantAwareAuthRequestHandler.prototype.newProjectConfigUrlBuilder = function () {\n    return new TenantAwareAuthResourceUrlBuilder(this.app, 'v2', this.tenantId);\n  };\n  /**\n   * Imports the list of users provided to Firebase Auth. This is useful when\n   * migrating from an external authentication system without having to use the Firebase CLI SDK.\n   * At most, 1000 users are allowed to be imported one at a time.\n   * When importing a list of password users, UserImportOptions are required to be specified.\n   *\n   * Overrides the superclass methods by adding an additional check to match tenant IDs of\n   * imported user records if present.\n   *\n   * @param {UserImportRecord[]} users The list of user records to import to Firebase Auth.\n   * @param {UserImportOptions=} options The user import options, required when the users provided\n   *     include password credentials.\n   * @return {Promise<UserImportResult>} A promise that resolves when the operation completes\n   *     with the result of the import. This includes the number of successful imports, the number\n   *     of failed uploads and their corresponding errors.\n   */\n\n\n  TenantAwareAuthRequestHandler.prototype.uploadAccount = function (users, options) {\n    var _this = this; // Add additional check to match tenant ID of imported user records.\n\n\n    users.forEach(function (user, index) {\n      if (validator.isNonEmptyString(user.tenantId) && user.tenantId !== _this.tenantId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID, \"UserRecord of index \\\"\" + index + \"\\\" has mismatching tenant ID \\\"\" + user.tenantId + \"\\\"\");\n      }\n    });\n    return _super.prototype.uploadAccount.call(this, users, options);\n  };\n\n  return TenantAwareAuthRequestHandler;\n}(AbstractAuthRequestHandler);\n\nexports.TenantAwareAuthRequestHandler = TenantAwareAuthRequestHandler;","map":{"version":3,"sources":["/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/firebase-admin/lib/auth/auth-api-request.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","TenantAwareAuthRequestHandler","AuthRequestHandler","AbstractAuthRequestHandler","FIREBASE_AUTH_SIGN_UP_NEW_USER","FIREBASE_AUTH_SET_ACCOUNT_INFO","FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS","FIREBASE_AUTH_DELETE_ACCOUNT","FIREBASE_AUTH_GET_ACCOUNTS_INFO","FIREBASE_AUTH_GET_ACCOUNT_INFO","FIREBASE_AUTH_DOWNLOAD_ACCOUNT","FIREBASE_AUTH_UPLOAD_ACCOUNT","FIREBASE_AUTH_CREATE_SESSION_COOKIE","EMAIL_ACTION_REQUEST_TYPES","RESERVED_CLAIMS","validator","require","deep_copy_1","identifier_1","error_1","api_request_1","user_import_builder_1","utils","action_code_settings_builder_1","auth_config_1","tenant_1","FIREBASE_AUTH_HEADER","getSdkVersion","FIREBASE_AUTH_TIMEOUT","MAX_CLAIMS_PAYLOAD_SIZE","MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE","MAX_UPLOAD_ACCOUNT_BATCH_SIZE","MAX_GET_ACCOUNTS_BATCH_SIZE","MAX_DELETE_ACCOUNTS_BATCH_SIZE","MIN_SESSION_COOKIE_DURATION_SECS","MAX_SESSION_COOKIE_DURATION_SECS","MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE","FIREBASE_AUTH_BASE_URL_FORMAT","FIREBASE_AUTH_TENANT_URL_FORMAT","replace","MAX_LIST_TENANT_PAGE_SIZE","WriteOperationType","AuthResourceUrlBuilder","app","version","urlFormat","getUrl","api","params","_this","getProjectId","then","projectId","baseParams","baseUrl","formatString","Promise","resolve","findProjectId","isNonEmptyString","FirebaseAuthError","AuthClientErrorCode","INVALID_CREDENTIAL","TenantAwareAuthResourceUrlBuilder","_super","tenantId","call","url","validateAuthFactorInfo","request","writeOperationType","validKeys","mfaEnrollmentId","displayName","phoneInfo","enrolledAt","key","authFactorInfoIdentifier","JSON","stringify","uidRequired","Create","INVALID_UID","isString","INVALID_DISPLAY_NAME","isISODateString","INVALID_ENROLLMENT_TIME","isPhoneNumber","INVALID_PHONE_NUMBER","INVALID_ENROLLED_FACTORS","validateProviderUserInfo","rawId","providerId","email","photoUrl","INVALID_PROVIDER_ID","isEmail","INVALID_EMAIL","isURL","INVALID_PHOTO_URL","validateCreateEditRequest","uploadAccountRequest","Upload","localId","password","rawPassword","emailVerified","disabled","disableUser","deleteAttribute","deleteProvider","sanityCheck","phoneNumber","customAttributes","validSince","passwordHash","salt","createdAt","lastLoginAt","providerUserInfo","mfaInfo","mfa","INVALID_TENANT_ID","isUid","isPassword","INVALID_PASSWORD","INVALID_EMAIL_VERIFIED","INVALID_DISABLED_FIELD","isNumber","INVALID_TOKENS_VALID_AFTER_TIME","INVALID_CREATION_TIME","INVALID_LAST_SIGN_IN_TIME","developerClaims_1","parse","error","INVALID_CLAIMS","message","invalidClaims_1","forEach","blacklistedClaim","push","length","FORBIDDEN_CLAIM","join","CLAIMS_TOO_LARGE","INVALID_PASSWORD_HASH","INVALID_PASSWORD_SALT","isArray","INVALID_PROVIDER_DATA","providerUserInfoEntry","enrollments","authFactorInfoEntry","ApiSettings","setRequestValidator","idToken","INVALID_ID_TOKEN","validDuration","INVALID_SESSION_COOKIE_DURATION","setResponseValidator","response","sessionCookie","INTERNAL_ERROR","nextPageToken","INVALID_PAGE_TOKEN","maxResults","INVALID_ARGUMENT","federatedUserId","users","USER_NOT_FOUND","localIds","force","errors","batchDeleteErrorInfo","index","Update","FIREBASE_AUTH_GET_OOB_CODE","indexOf","requestType","oobLink","GET_OAUTH_IDP_CONFIG","name","DELETE_OAUTH_IDP_CONFIG","CREATE_OAUTH_IDP_CONFIG","UPDATE_OAUTH_IDP_CONFIG","LIST_OAUTH_IDP_CONFIGS","pageToken","pageSize","GET_INBOUND_SAML_CONFIG","DELETE_INBOUND_SAML_CONFIG","CREATE_INBOUND_SAML_CONFIG","UPDATE_INBOUND_SAML_CONFIG","LIST_INBOUND_SAML_CONFIGS","httpClient","AuthorizedHttpClient","getErrorCode","isNonNullObject","addUidToRequest","id","uid","addEmailToRequest","addPhoneToRequest","addProviderToRequest","providerUid","INVALID_PROVIDER_UID","createSessionCookie","expiresIn","invokeRequestHandler","getAuthUrlBuilder","getAccountInfoByUid","reject","getAccountInfoByEmail","getAccountInfoByPhoneNumber","getAccountInfoByIdentifiers","identifiers","MAXIMUM_USER_COUNT_EXCEEDED","_i","identifiers_1","isUidIdentifier","isEmailIdentifier","isPhoneIdentifier","isProviderIdentifier","downloadAccount","uploadAccount","options","userImportBuilder","UserImportBuilder","userRequest","buildRequest","buildResponse","failedUploads","deleteAccount","deleteAccounts","uids","setCustomUserClaims","customUserClaims","isObject","updateExistingAccount","properties","deepCopy","deletableParams","photoURL","multiFactor","enrolledFactors","multiFactorInfo","convertMultiFactorInfoToServerFormat","e","revokeRefreshTokens","Math","floor","Date","getTime","createNewAccount","isNonEmptyArray","mfaInfo_1","enrollmentTime","getEmailActionLink","actionCodeSettings","returnOobLink","builder","ActionCodeSettingsBuilder","deepExtend","getOAuthIdpConfig","OIDCConfig","isProviderId","getProjectConfigUrlBuilder","listOAuthIdpConfigs","oauthIdpConfigs","deleteOAuthIdpConfig","createOAuthIdpConfig","buildServerRequest","getProviderIdFromResourceName","updateOAuthIdpConfig","updateMask","generateUpdateMask","getInboundSamlConfig","SAMLConfig","listInboundSamlConfigs","inboundSamlConfigs","deleteInboundSamlConfig","createInboundSamlConfig","updateInboundSamlConfig","urlBuilder","apiSettings","requestData","additionalResourceParams","getEndpoint","requestValidator","getRequestValidator","req","method","getHttpMethod","headers","data","timeout","send","responseValidator","getResponseValidator","catch","err","HttpError","errorCode","fromServerError","undefined","authUrlBuilder","newAuthUrlBuilder","projectConfigUrlBuilder","newProjectConfigUrlBuilder","GET_TENANT","DELETE_TENANT","UPDATE_TENANT","Tenant","getTenantIdFromResourceName","LIST_TENANTS","CREATE_TENANT","tenantMgmtResourceBuilder","getTenant","listTenants","tenants","deleteTenant","createTenant","tenantOptions","updateTenant","user","MISMATCHING_TENANT_ID"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TenantAwareAuthRequestHandler = exports.AuthRequestHandler = exports.AbstractAuthRequestHandler = exports.FIREBASE_AUTH_SIGN_UP_NEW_USER = exports.FIREBASE_AUTH_SET_ACCOUNT_INFO = exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = exports.FIREBASE_AUTH_DELETE_ACCOUNT = exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = exports.FIREBASE_AUTH_GET_ACCOUNT_INFO = exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = exports.FIREBASE_AUTH_UPLOAD_ACCOUNT = exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = exports.EMAIL_ACTION_REQUEST_TYPES = exports.RESERVED_CLAIMS = void 0;\nvar validator = require(\"../utils/validator\");\nvar deep_copy_1 = require(\"../utils/deep-copy\");\nvar identifier_1 = require(\"./identifier\");\nvar error_1 = require(\"../utils/error\");\nvar api_request_1 = require(\"../utils/api-request\");\nvar user_import_builder_1 = require(\"./user-import-builder\");\nvar utils = require(\"../utils/index\");\nvar action_code_settings_builder_1 = require(\"./action-code-settings-builder\");\nvar auth_config_1 = require(\"./auth-config\");\nvar tenant_1 = require(\"./tenant\");\n/** Firebase Auth request header. */\nvar FIREBASE_AUTH_HEADER = {\n    'X-Client-Version': \"Node/Admin/\" + utils.getSdkVersion(),\n};\n/** Firebase Auth request timeout duration in milliseconds. */\nvar FIREBASE_AUTH_TIMEOUT = 25000;\n/** List of reserved claims which cannot be provided when creating a custom token. */\nexports.RESERVED_CLAIMS = [\n    'acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat',\n    'iss', 'jti', 'nbf', 'nonce', 'sub', 'firebase',\n];\n/** List of supported email action request types. */\nexports.EMAIL_ACTION_REQUEST_TYPES = [\n    'PASSWORD_RESET', 'VERIFY_EMAIL', 'EMAIL_SIGNIN',\n];\n/** Maximum allowed number of characters in the custom claims payload. */\nvar MAX_CLAIMS_PAYLOAD_SIZE = 1000;\n/** Maximum allowed number of users to batch download at one time. */\nvar MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE = 1000;\n/** Maximum allowed number of users to batch upload at one time. */\nvar MAX_UPLOAD_ACCOUNT_BATCH_SIZE = 1000;\n/** Maximum allowed number of users to batch get at one time. */\nvar MAX_GET_ACCOUNTS_BATCH_SIZE = 100;\n/** Maximum allowed number of users to batch delete at one time. */\nvar MAX_DELETE_ACCOUNTS_BATCH_SIZE = 1000;\n/** Minimum allowed session cookie duration in seconds (5 minutes). */\nvar MIN_SESSION_COOKIE_DURATION_SECS = 5 * 60;\n/** Maximum allowed session cookie duration in seconds (2 weeks). */\nvar MAX_SESSION_COOKIE_DURATION_SECS = 14 * 24 * 60 * 60;\n/** Maximum allowed number of provider configurations to batch download at one time. */\nvar MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE = 100;\n/** The Firebase Auth backend base URL format. */\nvar FIREBASE_AUTH_BASE_URL_FORMAT = 'https://identitytoolkit.googleapis.com/{version}/projects/{projectId}{api}';\n/** The Firebase Auth backend multi-tenancy base URL format. */\nvar FIREBASE_AUTH_TENANT_URL_FORMAT = FIREBASE_AUTH_BASE_URL_FORMAT.replace('projects/{projectId}', 'projects/{projectId}/tenants/{tenantId}');\n/** Maximum allowed number of tenants to download at one time. */\nvar MAX_LIST_TENANT_PAGE_SIZE = 1000;\n/**\n * Enum for the user write operation type.\n */\nvar WriteOperationType;\n(function (WriteOperationType) {\n    WriteOperationType[\"Create\"] = \"create\";\n    WriteOperationType[\"Update\"] = \"update\";\n    WriteOperationType[\"Upload\"] = \"upload\";\n})(WriteOperationType || (WriteOperationType = {}));\n/** Defines a base utility to help with resource URL construction. */\nvar AuthResourceUrlBuilder = /** @class */ (function () {\n    /**\n     * The resource URL builder constructor.\n     *\n     * @param {string} projectId The resource project ID.\n     * @param {string} version The endpoint API version.\n     * @constructor\n     */\n    function AuthResourceUrlBuilder(app, version) {\n        if (version === void 0) { version = 'v1'; }\n        this.app = app;\n        this.version = version;\n        this.urlFormat = FIREBASE_AUTH_BASE_URL_FORMAT;\n    }\n    /**\n     * Returns the resource URL corresponding to the provided parameters.\n     *\n     * @param {string=} api The backend API name.\n     * @param {object=} params The optional additional parameters to substitute in the\n     *     URL path.\n     * @return {Promise<string>} The corresponding resource URL.\n     */\n    AuthResourceUrlBuilder.prototype.getUrl = function (api, params) {\n        var _this = this;\n        return this.getProjectId()\n            .then(function (projectId) {\n            var baseParams = {\n                version: _this.version,\n                projectId: projectId,\n                api: api || '',\n            };\n            var baseUrl = utils.formatString(_this.urlFormat, baseParams);\n            // Substitute additional api related parameters.\n            return utils.formatString(baseUrl, params || {});\n        });\n    };\n    AuthResourceUrlBuilder.prototype.getProjectId = function () {\n        var _this = this;\n        if (this.projectId) {\n            return Promise.resolve(this.projectId);\n        }\n        return utils.findProjectId(this.app)\n            .then(function (projectId) {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Failed to determine project ID for Auth. Initialize the '\n                    + 'SDK with service account credentials or set project ID as an app option. '\n                    + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n            }\n            _this.projectId = projectId;\n            return projectId;\n        });\n    };\n    return AuthResourceUrlBuilder;\n}());\n/** Tenant aware resource builder utility. */\nvar TenantAwareAuthResourceUrlBuilder = /** @class */ (function (_super) {\n    __extends(TenantAwareAuthResourceUrlBuilder, _super);\n    /**\n     * The tenant aware resource URL builder constructor.\n     *\n     * @param {string} projectId The resource project ID.\n     * @param {string} version The endpoint API version.\n     * @param {string} tenantId The tenant ID.\n     * @constructor\n     */\n    function TenantAwareAuthResourceUrlBuilder(app, version, tenantId) {\n        var _this = _super.call(this, app, version) || this;\n        _this.app = app;\n        _this.version = version;\n        _this.tenantId = tenantId;\n        _this.urlFormat = FIREBASE_AUTH_TENANT_URL_FORMAT;\n        return _this;\n    }\n    /**\n     * Returns the resource URL corresponding to the provided parameters.\n     *\n     * @param {string=} api The backend API name.\n     * @param {object=} params The optional additional parameters to substitute in the\n     *     URL path.\n     * @return {Promise<string>} The corresponding resource URL.\n     */\n    TenantAwareAuthResourceUrlBuilder.prototype.getUrl = function (api, params) {\n        var _this = this;\n        return _super.prototype.getUrl.call(this, api, params)\n            .then(function (url) {\n            return utils.formatString(url, { tenantId: _this.tenantId });\n        });\n    };\n    return TenantAwareAuthResourceUrlBuilder;\n}(AuthResourceUrlBuilder));\n/**\n * Validates an AuthFactorInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request The AuthFactorInfo request object.\n * @param writeOperationType The write operation type.\n */\nfunction validateAuthFactorInfo(request, writeOperationType) {\n    var validKeys = {\n        mfaEnrollmentId: true,\n        displayName: true,\n        phoneInfo: true,\n        enrolledAt: true,\n    };\n    // Remove unsupported keys from the original request.\n    for (var key in request) {\n        if (!(key in validKeys)) {\n            delete request[key];\n        }\n    }\n    // No enrollment ID is available for signupNewUser. Use another identifier.\n    var authFactorInfoIdentifier = request.mfaEnrollmentId || request.phoneInfo || JSON.stringify(request);\n    var uidRequired = writeOperationType !== WriteOperationType.Create;\n    if ((typeof request.mfaEnrollmentId !== 'undefined' || uidRequired) &&\n        !validator.isNonEmptyString(request.mfaEnrollmentId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, \"The second factor \\\"uid\\\" must be a valid non-empty string.\");\n    }\n    if (typeof request.displayName !== 'undefined' &&\n        !validator.isString(request.displayName)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, \"The second factor \\\"displayName\\\" for \\\"\" + authFactorInfoIdentifier + \"\\\" must be a valid string.\");\n    }\n    // enrolledAt must be a valid UTC date string.\n    if (typeof request.enrolledAt !== 'undefined' &&\n        !validator.isISODateString(request.enrolledAt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLMENT_TIME, \"The second factor \\\"enrollmentTime\\\" for \\\"\" + authFactorInfoIdentifier + \"\\\" must be a valid \" +\n            \"UTC date string.\");\n    }\n    // Validate required fields depending on second factor type.\n    if (typeof request.phoneInfo !== 'undefined') {\n        // phoneNumber should be a string and a valid phone number.\n        if (!validator.isPhoneNumber(request.phoneInfo)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER, \"The second factor \\\"phoneNumber\\\" for \\\"\" + authFactorInfoIdentifier + \"\\\" must be a non-empty \" +\n                \"E.164 standard compliant identifier string.\");\n        }\n    }\n    else {\n        // Invalid second factor. For example, a phone second factor may have been provided without\n        // a phone number. A TOTP based second factor may require a secret key, etc.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS, \"MFAInfo object provided is invalid.\");\n    }\n}\n/**\n * Validates a providerUserInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param {any} request The providerUserInfo request object.\n */\nfunction validateProviderUserInfo(request) {\n    var validKeys = {\n        rawId: true,\n        providerId: true,\n        email: true,\n        displayName: true,\n        photoUrl: true,\n    };\n    // Remove invalid keys from original request.\n    for (var key in request) {\n        if (!(key in validKeys)) {\n            delete request[key];\n        }\n    }\n    if (!validator.isNonEmptyString(request.providerId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n    }\n    if (typeof request.displayName !== 'undefined' &&\n        typeof request.displayName !== 'string') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, \"The provider \\\"displayName\\\" for \\\"\" + request.providerId + \"\\\" must be a valid string.\");\n    }\n    if (!validator.isNonEmptyString(request.rawId)) {\n        // This is called localId on the backend but the developer specifies this as\n        // uid externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, \"The provider \\\"uid\\\" for \\\"\" + request.providerId + \"\\\" must be a valid non-empty string.\");\n    }\n    // email should be a string and a valid email.\n    if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL, \"The provider \\\"email\\\" for \\\"\" + request.providerId + \"\\\" must be a valid email string.\");\n    }\n    // photoUrl should be a URL.\n    if (typeof request.photoUrl !== 'undefined' &&\n        !validator.isURL(request.photoUrl)) {\n        // This is called photoUrl on the backend but the developer specifies this as\n        // photoURL externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL, \"The provider \\\"photoURL\\\" for \\\"\" + request.providerId + \"\\\" must be a valid URL string.\");\n    }\n}\n/**\n * Validates a create/edit request object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request The create/edit request object.\n * @param writeOperationType The write operation type.\n */\nfunction validateCreateEditRequest(request, writeOperationType) {\n    var uploadAccountRequest = writeOperationType === WriteOperationType.Upload;\n    // Hash set of whitelisted parameters.\n    var validKeys = {\n        displayName: true,\n        localId: true,\n        email: true,\n        password: true,\n        rawPassword: true,\n        emailVerified: true,\n        photoUrl: true,\n        disabled: true,\n        disableUser: true,\n        deleteAttribute: true,\n        deleteProvider: true,\n        sanityCheck: true,\n        phoneNumber: true,\n        customAttributes: true,\n        validSince: true,\n        // Pass tenantId only for uploadAccount requests.\n        tenantId: uploadAccountRequest,\n        passwordHash: uploadAccountRequest,\n        salt: uploadAccountRequest,\n        createdAt: uploadAccountRequest,\n        lastLoginAt: uploadAccountRequest,\n        providerUserInfo: uploadAccountRequest,\n        mfaInfo: uploadAccountRequest,\n        // Only for non-uploadAccount requests.\n        mfa: !uploadAccountRequest,\n    };\n    // Remove invalid keys from original request.\n    for (var key in request) {\n        if (!(key in validKeys)) {\n            delete request[key];\n        }\n    }\n    if (typeof request.tenantId !== 'undefined' &&\n        !validator.isNonEmptyString(request.tenantId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n    }\n    // For any invalid parameter, use the external key name in the error description.\n    // displayName should be a string.\n    if (typeof request.displayName !== 'undefined' &&\n        !validator.isString(request.displayName)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME);\n    }\n    if ((typeof request.localId !== 'undefined' || uploadAccountRequest) &&\n        !validator.isUid(request.localId)) {\n        // This is called localId on the backend but the developer specifies this as\n        // uid externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n    }\n    // email should be a string and a valid email.\n    if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n    }\n    // phoneNumber should be a string and a valid phone number.\n    if (typeof request.phoneNumber !== 'undefined' &&\n        !validator.isPhoneNumber(request.phoneNumber)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n    }\n    // password should be a string and a minimum of 6 chars.\n    if (typeof request.password !== 'undefined' &&\n        !validator.isPassword(request.password)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n    }\n    // rawPassword should be a string and a minimum of 6 chars.\n    if (typeof request.rawPassword !== 'undefined' &&\n        !validator.isPassword(request.rawPassword)) {\n        // This is called rawPassword on the backend but the developer specifies this as\n        // password externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n    }\n    // emailVerified should be a boolean.\n    if (typeof request.emailVerified !== 'undefined' &&\n        typeof request.emailVerified !== 'boolean') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL_VERIFIED);\n    }\n    // photoUrl should be a URL.\n    if (typeof request.photoUrl !== 'undefined' &&\n        !validator.isURL(request.photoUrl)) {\n        // This is called photoUrl on the backend but the developer specifies this as\n        // photoURL externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL);\n    }\n    // disabled should be a boolean.\n    if (typeof request.disabled !== 'undefined' &&\n        typeof request.disabled !== 'boolean') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n    }\n    // validSince should be a number.\n    if (typeof request.validSince !== 'undefined' &&\n        !validator.isNumber(request.validSince)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TOKENS_VALID_AFTER_TIME);\n    }\n    // createdAt should be a number.\n    if (typeof request.createdAt !== 'undefined' &&\n        !validator.isNumber(request.createdAt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREATION_TIME);\n    }\n    // lastSignInAt should be a number.\n    if (typeof request.lastLoginAt !== 'undefined' &&\n        !validator.isNumber(request.lastLoginAt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_LAST_SIGN_IN_TIME);\n    }\n    // disableUser should be a boolean.\n    if (typeof request.disableUser !== 'undefined' &&\n        typeof request.disableUser !== 'boolean') {\n        // This is called disableUser on the backend but the developer specifies this as\n        // disabled externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n    }\n    // customAttributes should be stringified JSON with no blacklisted claims.\n    // The payload should not exceed 1KB.\n    if (typeof request.customAttributes !== 'undefined') {\n        var developerClaims_1;\n        try {\n            developerClaims_1 = JSON.parse(request.customAttributes);\n        }\n        catch (error) {\n            // JSON parsing error. This should never happen as we stringify the claims internally.\n            // However, we still need to check since setAccountInfo via edit requests could pass\n            // this field.\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CLAIMS, error.message);\n        }\n        var invalidClaims_1 = [];\n        // Check for any invalid claims.\n        exports.RESERVED_CLAIMS.forEach(function (blacklistedClaim) {\n            if (Object.prototype.hasOwnProperty.call(developerClaims_1, blacklistedClaim)) {\n                invalidClaims_1.push(blacklistedClaim);\n            }\n        });\n        // Throw an error if an invalid claim is detected.\n        if (invalidClaims_1.length > 0) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.FORBIDDEN_CLAIM, invalidClaims_1.length > 1 ?\n                \"Developer claims \\\"\" + invalidClaims_1.join('\", \"') + \"\\\" are reserved and cannot be specified.\" :\n                \"Developer claim \\\"\" + invalidClaims_1[0] + \"\\\" is reserved and cannot be specified.\");\n        }\n        // Check claims payload does not exceed maxmimum size.\n        if (request.customAttributes.length > MAX_CLAIMS_PAYLOAD_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.CLAIMS_TOO_LARGE, \"Developer claims payload should not exceed \" + MAX_CLAIMS_PAYLOAD_SIZE + \" characters.\");\n        }\n    }\n    // passwordHash has to be a base64 encoded string.\n    if (typeof request.passwordHash !== 'undefined' &&\n        !validator.isString(request.passwordHash)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_HASH);\n    }\n    // salt has to be a base64 encoded string.\n    if (typeof request.salt !== 'undefined' &&\n        !validator.isString(request.salt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_SALT);\n    }\n    // providerUserInfo has to be an array of valid UserInfo requests.\n    if (typeof request.providerUserInfo !== 'undefined' &&\n        !validator.isArray(request.providerUserInfo)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_DATA);\n    }\n    else if (validator.isArray(request.providerUserInfo)) {\n        request.providerUserInfo.forEach(function (providerUserInfoEntry) {\n            validateProviderUserInfo(providerUserInfoEntry);\n        });\n    }\n    // mfaInfo is used for importUsers.\n    // mfa.enrollments is used for setAccountInfo.\n    // enrollments has to be an array of valid AuthFactorInfo requests.\n    var enrollments = null;\n    if (request.mfaInfo) {\n        enrollments = request.mfaInfo;\n    }\n    else if (request.mfa && request.mfa.enrollments) {\n        enrollments = request.mfa.enrollments;\n    }\n    if (enrollments) {\n        if (!validator.isArray(enrollments)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS);\n        }\n        enrollments.forEach(function (authFactorInfoEntry) {\n            validateAuthFactorInfo(authFactorInfoEntry, writeOperationType);\n        });\n    }\n}\n/** Instantiates the createSessionCookie endpoint settings. */\nexports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = new api_request_1.ApiSettings(':createSessionCookie', 'POST')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    // Validate the ID token is a non-empty string.\n    if (!validator.isNonEmptyString(request.idToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN);\n    }\n    // Validate the custom session cookie duration.\n    if (!validator.isNumber(request.validDuration) ||\n        request.validDuration < MIN_SESSION_COOKIE_DURATION_SECS ||\n        request.validDuration > MAX_SESSION_COOKIE_DURATION_SECS) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION);\n    }\n})\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain the session cookie.\n    if (!validator.isNonEmptyString(response.sessionCookie)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR);\n    }\n});\n/** Instantiates the uploadAccount endpoint settings. */\nexports.FIREBASE_AUTH_UPLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchCreate', 'POST');\n/** Instantiates the downloadAccount endpoint settings. */\nexports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchGet', 'GET')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    // Validate next page token.\n    if (typeof request.nextPageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.nextPageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.maxResults) ||\n        request.maxResults <= 0 ||\n        request.maxResults > MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Required \\\"maxResults\\\" must be a positive integer that does not exceed \" +\n            (MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE + \".\"));\n    }\n});\n/** Instantiates the getAccountInfo endpoint settings. */\nexports.FIREBASE_AUTH_GET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n})\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    if (!response.users) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n    }\n});\n/**\n * Instantiates the getAccountInfo endpoint settings for use when fetching info\n * for multiple accounts.\n */\nexports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n});\n/** Instantiates the deleteAccount endpoint settings. */\nexports.FIREBASE_AUTH_DELETE_ACCOUNT = new api_request_1.ApiSettings('/accounts:delete', 'POST')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    if (!request.localId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n});\nexports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = new api_request_1.ApiSettings('/accounts:batchDelete', 'POST')\n    .setRequestValidator(function (request) {\n    if (!request.localIds) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifiers');\n    }\n    if (typeof request.force === 'undefined' || request.force !== true) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing force=true field');\n    }\n})\n    .setResponseValidator(function (response) {\n    var errors = response.errors || [];\n    errors.forEach(function (batchDeleteErrorInfo) {\n        if (typeof batchDeleteErrorInfo.index === 'undefined') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.index field');\n        }\n        if (!batchDeleteErrorInfo.localId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.localId field');\n        }\n        // Allow the (error) message to be missing/undef.\n    });\n});\n/** Instantiates the setAccountInfo endpoint settings for updating existing accounts. */\nexports.FIREBASE_AUTH_SET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:update', 'POST')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    // localId is a required parameter.\n    if (typeof request.localId === 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n    // Throw error when tenantId is passed in POST body.\n    if (typeof request.tenantId !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"UpdateRequest\" property.');\n    }\n    validateCreateEditRequest(request, WriteOperationType.Update);\n})\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // If the localId is not returned, then the request failed.\n    if (!response.localId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n    }\n});\n/**\n * Instantiates the signupNewUser endpoint settings for creating a new user with or without\n * uid being specified. The backend will create a new one if not provided and return it.\n */\nexports.FIREBASE_AUTH_SIGN_UP_NEW_USER = new api_request_1.ApiSettings('/accounts', 'POST')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    // signupNewUser does not support customAttributes.\n    if (typeof request.customAttributes !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"customAttributes\\\" cannot be set when creating a new user.\");\n    }\n    // signupNewUser does not support validSince.\n    if (typeof request.validSince !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"validSince\\\" cannot be set when creating a new user.\");\n    }\n    // Throw error when tenantId is passed in POST body.\n    if (typeof request.tenantId !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"CreateRequest\" property.');\n    }\n    validateCreateEditRequest(request, WriteOperationType.Create);\n})\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // If the localId is not returned, then the request failed.\n    if (!response.localId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new user');\n    }\n});\nvar FIREBASE_AUTH_GET_OOB_CODE = new api_request_1.ApiSettings('/accounts:sendOobCode', 'POST')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    if (!validator.isEmail(request.email)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n    }\n    if (exports.EMAIL_ACTION_REQUEST_TYPES.indexOf(request.requestType) === -1) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + request.requestType + \"\\\" is not a supported email action request type.\");\n    }\n})\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // If the oobLink is not returned, then the request failed.\n    if (!response.oobLink) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create the email action link');\n    }\n});\n/** Instantiates the retrieve OIDC configuration endpoint settings. */\nvar GET_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'GET')\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain the OIDC provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get OIDC configuration');\n    }\n});\n/** Instantiates the delete OIDC configuration endpoint settings. */\nvar DELETE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'DELETE');\n/** Instantiates the create OIDC configuration endpoint settings. */\nvar CREATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs?oauthIdpConfigId={providerId}', 'POST')\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain the OIDC provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC configuration');\n    }\n});\n/** Instantiates the update OIDC configuration endpoint settings. */\nvar UPDATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}?updateMask={updateMask}', 'PATCH')\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain the configuration resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC configuration');\n    }\n});\n/** Instantiates the list OIDC configuration endpoint settings. */\nvar LIST_OAUTH_IDP_CONFIGS = new api_request_1.ApiSettings('/oauthIdpConfigs', 'GET')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    // Validate next page token.\n    if (typeof request.pageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.pageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.pageSize) ||\n        request.pageSize <= 0 ||\n        request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Required \\\"maxResults\\\" must be a positive integer that does not exceed \" +\n            (MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE + \".\"));\n    }\n});\n/** Instantiates the retrieve SAML configuration endpoint settings. */\nvar GET_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'GET')\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain the SAML provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get SAML configuration');\n    }\n});\n/** Instantiates the delete SAML configuration endpoint settings. */\nvar DELETE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'DELETE');\n/** Instantiates the create SAML configuration endpoint settings. */\nvar CREATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs?inboundSamlConfigId={providerId}', 'POST')\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain the SAML provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML configuration');\n    }\n});\n/** Instantiates the update SAML configuration endpoint settings. */\nvar UPDATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}?updateMask={updateMask}', 'PATCH')\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain the configuration resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML configuration');\n    }\n});\n/** Instantiates the list SAML configuration endpoint settings. */\nvar LIST_INBOUND_SAML_CONFIGS = new api_request_1.ApiSettings('/inboundSamlConfigs', 'GET')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    // Validate next page token.\n    if (typeof request.pageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.pageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.pageSize) ||\n        request.pageSize <= 0 ||\n        request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Required \\\"maxResults\\\" must be a positive integer that does not exceed \" +\n            (MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE + \".\"));\n    }\n});\n/**\n * Class that provides the mechanism to send requests to the Firebase Auth backend endpoints.\n */\nvar AbstractAuthRequestHandler = /** @class */ (function () {\n    /**\n     * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n     * @constructor\n     */\n    function AbstractAuthRequestHandler(app) {\n        this.app = app;\n        if (typeof app !== 'object' || app === null || !('options' in app)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.auth() must be a valid Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    /**\n     * @param {any} response The response to check for errors.\n     * @return {string|null} The error code if present; null otherwise.\n     */\n    AbstractAuthRequestHandler.getErrorCode = function (response) {\n        return (validator.isNonNullObject(response) && response.error && response.error.message) || null;\n    };\n    AbstractAuthRequestHandler.addUidToRequest = function (id, request) {\n        if (!validator.isUid(id.uid)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n        }\n        request.localId ? request.localId.push(id.uid) : request.localId = [id.uid];\n        return request;\n    };\n    AbstractAuthRequestHandler.addEmailToRequest = function (id, request) {\n        if (!validator.isEmail(id.email)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n        }\n        request.email ? request.email.push(id.email) : request.email = [id.email];\n        return request;\n    };\n    AbstractAuthRequestHandler.addPhoneToRequest = function (id, request) {\n        if (!validator.isPhoneNumber(id.phoneNumber)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n        }\n        request.phoneNumber ? request.phoneNumber.push(id.phoneNumber) : request.phoneNumber = [id.phoneNumber];\n        return request;\n    };\n    AbstractAuthRequestHandler.addProviderToRequest = function (id, request) {\n        if (!validator.isNonEmptyString(id.providerId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n        }\n        if (!validator.isNonEmptyString(id.providerUid)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_UID);\n        }\n        var federatedUserId = {\n            providerId: id.providerId,\n            rawId: id.providerUid,\n        };\n        request.federatedUserId\n            ? request.federatedUserId.push(federatedUserId)\n            : request.federatedUserId = [federatedUserId];\n        return request;\n    };\n    /**\n     * Creates a new Firebase session cookie with the specified duration that can be used for\n     * session management (set as a server side session cookie with custom cookie policy).\n     * The session cookie JWT will have the same payload claims as the provided ID token.\n     *\n     * @param {string} idToken The Firebase ID token to exchange for a session cookie.\n     * @param {number} expiresIn The session cookie duration in milliseconds.\n     *\n     * @return {Promise<string>} A promise that resolves on success with the created session cookie.\n     */\n    AbstractAuthRequestHandler.prototype.createSessionCookie = function (idToken, expiresIn) {\n        var request = {\n            idToken: idToken,\n            // Convert to seconds.\n            validDuration: expiresIn / 1000,\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE, request)\n            .then(function (response) { return response.sessionCookie; });\n    };\n    /**\n     * Looks up a user by uid.\n     *\n     * @param {string} uid The uid of the user to lookup.\n     * @return {Promise<object>} A promise that resolves with the user information.\n     */\n    AbstractAuthRequestHandler.prototype.getAccountInfoByUid = function (uid) {\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        var request = {\n            localId: [uid],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    };\n    /**\n     * Looks up a user by email.\n     *\n     * @param {string} email The email of the user to lookup.\n     * @return {Promise<object>} A promise that resolves with the user information.\n     */\n    AbstractAuthRequestHandler.prototype.getAccountInfoByEmail = function (email) {\n        if (!validator.isEmail(email)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL));\n        }\n        var request = {\n            email: [email],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    };\n    /**\n     * Looks up a user by phone number.\n     *\n     * @param {string} phoneNumber The phone number of the user to lookup.\n     * @return {Promise<object>} A promise that resolves with the user information.\n     */\n    AbstractAuthRequestHandler.prototype.getAccountInfoByPhoneNumber = function (phoneNumber) {\n        if (!validator.isPhoneNumber(phoneNumber)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER));\n        }\n        var request = {\n            phoneNumber: [phoneNumber],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    };\n    /**\n     * Looks up multiple users by their identifiers (uid, email, etc).\n     *\n     * @param {UserIdentifier[]} identifiers The identifiers indicating the users\n     *     to be looked up. Must have <= 100 entries.\n     * @param {Promise<object>} A promise that resolves with the set of successfully\n     *     looked up users. Possibly empty if no users were looked up.\n     */\n    AbstractAuthRequestHandler.prototype.getAccountInfoByIdentifiers = function (identifiers) {\n        if (identifiers.length === 0) {\n            return Promise.resolve({ users: [] });\n        }\n        else if (identifiers.length > MAX_GET_ACCOUNTS_BATCH_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`identifiers` parameter must have <= ' + MAX_GET_ACCOUNTS_BATCH_SIZE + ' entries.');\n        }\n        var request = {};\n        for (var _i = 0, identifiers_1 = identifiers; _i < identifiers_1.length; _i++) {\n            var id = identifiers_1[_i];\n            if (identifier_1.isUidIdentifier(id)) {\n                request = AbstractAuthRequestHandler.addUidToRequest(id, request);\n            }\n            else if (identifier_1.isEmailIdentifier(id)) {\n                request = AbstractAuthRequestHandler.addEmailToRequest(id, request);\n            }\n            else if (identifier_1.isPhoneIdentifier(id)) {\n                request = AbstractAuthRequestHandler.addPhoneToRequest(id, request);\n            }\n            else if (identifier_1.isProviderIdentifier(id)) {\n                request = AbstractAuthRequestHandler.addProviderToRequest(id, request);\n            }\n            else {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Unrecognized identifier: ' + id);\n            }\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO, request);\n    };\n    /**\n     * Exports the users (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param {number=} maxResults The page size, 1000 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param {string=} pageToken The next page token. If not specified, returns users starting\n     *     without any offset. Users are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @return {Promise<object>} A promise that resolves with the current batch of downloaded\n     *     users and the next page token if available. For the last page, an empty list of users\n     *     and no page token are returned.\n     */\n    AbstractAuthRequestHandler.prototype.downloadAccount = function (maxResults, pageToken) {\n        if (maxResults === void 0) { maxResults = MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE; }\n        // Construct request.\n        var request = {\n            maxResults: maxResults,\n            nextPageToken: pageToken,\n        };\n        // Remove next page token if not provided.\n        if (typeof request.nextPageToken === 'undefined') {\n            delete request.nextPageToken;\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT, request)\n            .then(function (response) {\n            // No more users available.\n            if (!response.users) {\n                response.users = [];\n            }\n            return response;\n        });\n    };\n    /**\n     * Imports the list of users provided to Firebase Auth. This is useful when\n     * migrating from an external authentication system without having to use the Firebase CLI SDK.\n     * At most, 1000 users are allowed to be imported one at a time.\n     * When importing a list of password users, UserImportOptions are required to be specified.\n     *\n     * @param {UserImportRecord[]} users The list of user records to import to Firebase Auth.\n     * @param {UserImportOptions=} options The user import options, required when the users provided\n     *     include password credentials.\n     * @return {Promise<UserImportResult>} A promise that resolves when the operation completes\n     *     with the result of the import. This includes the number of successful imports, the number\n     *     of failed uploads and their corresponding errors.\n     */\n    AbstractAuthRequestHandler.prototype.uploadAccount = function (users, options) {\n        // This will throw if any error is detected in the hash options.\n        // For errors in the list of users, this will not throw and will report the errors and the\n        // corresponding user index in the user import generated response below.\n        // No need to validate raw request or raw response as this is done in UserImportBuilder.\n        var userImportBuilder = new user_import_builder_1.UserImportBuilder(users, options, function (userRequest) {\n            // Pass true to validate the uploadAccount specific fields.\n            validateCreateEditRequest(userRequest, WriteOperationType.Upload);\n        });\n        var request = userImportBuilder.buildRequest();\n        // Fail quickly if more users than allowed are to be imported.\n        if (validator.isArray(users) && users.length > MAX_UPLOAD_ACCOUNT_BATCH_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, \"A maximum of \" + MAX_UPLOAD_ACCOUNT_BATCH_SIZE + \" users can be imported at once.\");\n        }\n        // If no remaining user in request after client side processing, there is no need\n        // to send the request to the server.\n        if (!request.users || request.users.length === 0) {\n            return Promise.resolve(userImportBuilder.buildResponse([]));\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_UPLOAD_ACCOUNT, request)\n            .then(function (response) {\n            // No error object is returned if no error encountered.\n            var failedUploads = (response.error || []);\n            // Rewrite response as UserImportResult and re-insert client previously detected errors.\n            return userImportBuilder.buildResponse(failedUploads);\n        });\n    };\n    /**\n     * Deletes an account identified by a uid.\n     *\n     * @param {string} uid The uid of the user to delete.\n     * @return {Promise<object>} A promise that resolves when the user is deleted.\n     */\n    AbstractAuthRequestHandler.prototype.deleteAccount = function (uid) {\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        var request = {\n            localId: uid,\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DELETE_ACCOUNT, request);\n    };\n    AbstractAuthRequestHandler.prototype.deleteAccounts = function (uids, force) {\n        if (uids.length === 0) {\n            return Promise.resolve({});\n        }\n        else if (uids.length > MAX_DELETE_ACCOUNTS_BATCH_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`uids` parameter must have <= ' + MAX_DELETE_ACCOUNTS_BATCH_SIZE + ' entries.');\n        }\n        var request = {\n            localIds: [],\n            force: force,\n        };\n        uids.forEach(function (uid) {\n            if (!validator.isUid(uid)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n            }\n            request.localIds.push(uid);\n        });\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS, request);\n    };\n    /**\n     * Sets additional developer claims on an existing user identified by provided UID.\n     *\n     * @param {string} uid The user to edit.\n     * @param {object} customUserClaims The developer claims to set.\n     * @return {Promise<string>} A promise that resolves when the operation completes\n     *     with the user id that was edited.\n     */\n    AbstractAuthRequestHandler.prototype.setCustomUserClaims = function (uid, customUserClaims) {\n        // Validate user UID.\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        else if (!validator.isObject(customUserClaims)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'CustomUserClaims argument must be an object or null.'));\n        }\n        // Delete operation. Replace null with an empty object.\n        if (customUserClaims === null) {\n            customUserClaims = {};\n        }\n        // Construct custom user attribute editting request.\n        var request = {\n            localId: uid,\n            customAttributes: JSON.stringify(customUserClaims),\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request)\n            .then(function (response) {\n            return response.localId;\n        });\n    };\n    /**\n     * Edits an existing user.\n     *\n     * @param {string} uid The user to edit.\n     * @param {object} properties The properties to set on the user.\n     * @return {Promise<string>} A promise that resolves when the operation completes\n     *     with the user id that was edited.\n     */\n    AbstractAuthRequestHandler.prototype.updateExistingAccount = function (uid, properties) {\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        else if (!validator.isNonNullObject(properties)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n        }\n        // Build the setAccountInfo request.\n        var request = deep_copy_1.deepCopy(properties);\n        request.localId = uid;\n        // For deleting displayName or photoURL, these values must be passed as null.\n        // They will be removed from the backend request and an additional parameter\n        // deleteAttribute: ['PHOTO_URL', 'DISPLAY_NAME']\n        // with an array of the parameter names to delete will be passed.\n        // Parameters that are deletable and their deleteAttribute names.\n        // Use client facing names, photoURL instead of photoUrl.\n        var deletableParams = {\n            displayName: 'DISPLAY_NAME',\n            photoURL: 'PHOTO_URL',\n        };\n        // Properties to delete if available.\n        request.deleteAttribute = [];\n        for (var key in deletableParams) {\n            if (request[key] === null) {\n                // Add property identifier to list of attributes to delete.\n                request.deleteAttribute.push(deletableParams[key]);\n                // Remove property from request.\n                delete request[key];\n            }\n        }\n        if (request.deleteAttribute.length === 0) {\n            delete request.deleteAttribute;\n        }\n        // For deleting phoneNumber, this value must be passed as null.\n        // It will be removed from the backend request and an additional parameter\n        // deleteProvider: ['phone'] with an array of providerIds (phone in this case),\n        // will be passed.\n        // Currently this applies to phone provider only.\n        if (request.phoneNumber === null) {\n            request.deleteProvider = ['phone'];\n            delete request.phoneNumber;\n        }\n        else {\n            // Doesn't apply to other providers in admin SDK.\n            delete request.deleteProvider;\n        }\n        // Rewrite photoURL to photoUrl.\n        if (typeof request.photoURL !== 'undefined') {\n            request.photoUrl = request.photoURL;\n            delete request.photoURL;\n        }\n        // Rewrite disabled to disableUser.\n        if (typeof request.disabled !== 'undefined') {\n            request.disableUser = request.disabled;\n            delete request.disabled;\n        }\n        // Construct mfa related user data.\n        if (validator.isNonNullObject(request.multiFactor)) {\n            if (request.multiFactor.enrolledFactors === null) {\n                // Remove all second factors.\n                request.mfa = {};\n            }\n            else if (validator.isArray(request.multiFactor.enrolledFactors)) {\n                request.mfa = {\n                    enrollments: [],\n                };\n                try {\n                    request.multiFactor.enrolledFactors.forEach(function (multiFactorInfo) {\n                        request.mfa.enrollments.push(user_import_builder_1.convertMultiFactorInfoToServerFormat(multiFactorInfo));\n                    });\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n                if (request.mfa.enrollments.length === 0) {\n                    delete request.mfa.enrollments;\n                }\n            }\n            delete request.multiFactor;\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request)\n            .then(function (response) {\n            return response.localId;\n        });\n    };\n    /**\n     * Revokes all refresh tokens for the specified user identified by the uid provided.\n     * In addition to revoking all refresh tokens for a user, all ID tokens issued\n     * before revocation will also be revoked on the Auth backend. Any request with an\n     * ID token generated before revocation will be rejected with a token expired error.\n     * Note that due to the fact that the timestamp is stored in seconds, any tokens minted in\n     * the same second as the revocation will still be valid. If there is a chance that a token\n     * was minted in the last second, delay for 1 second before revoking.\n     *\n     * @param {string} uid The user whose tokens are to be revoked.\n     * @return {Promise<string>} A promise that resolves when the operation completes\n     *     successfully with the user id of the corresponding user.\n     */\n    AbstractAuthRequestHandler.prototype.revokeRefreshTokens = function (uid) {\n        // Validate user UID.\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        var request = {\n            localId: uid,\n            // validSince is in UTC seconds.\n            validSince: Math.floor(new Date().getTime() / 1000),\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request)\n            .then(function (response) {\n            return response.localId;\n        });\n    };\n    /**\n     * Create a new user with the properties supplied.\n     *\n     * @param {object} properties The properties to set on the user.\n     * @return {Promise<string>} A promise that resolves when the operation completes\n     *     with the user id that was created.\n     */\n    AbstractAuthRequestHandler.prototype.createNewAccount = function (properties) {\n        if (!validator.isNonNullObject(properties)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n        }\n        // Build the signupNewUser request.\n        var request = deep_copy_1.deepCopy(properties);\n        // Rewrite photoURL to photoUrl.\n        if (typeof request.photoURL !== 'undefined') {\n            request.photoUrl = request.photoURL;\n            delete request.photoURL;\n        }\n        // Rewrite uid to localId if it exists.\n        if (typeof request.uid !== 'undefined') {\n            request.localId = request.uid;\n            delete request.uid;\n        }\n        // Construct mfa related user data.\n        if (validator.isNonNullObject(request.multiFactor)) {\n            if (validator.isNonEmptyArray(request.multiFactor.enrolledFactors)) {\n                var mfaInfo_1 = [];\n                try {\n                    request.multiFactor.enrolledFactors.forEach(function (multiFactorInfo) {\n                        // Enrollment time and uid are not allowed for signupNewUser endpoint.\n                        // They will automatically be provisioned server side.\n                        if (multiFactorInfo.enrollmentTime) {\n                            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"enrollmentTime\" is not supported when adding second factors via \"createUser()\"');\n                        }\n                        else if (multiFactorInfo.uid) {\n                            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"uid\" is not supported when adding second factors via \"createUser()\"');\n                        }\n                        mfaInfo_1.push(user_import_builder_1.convertMultiFactorInfoToServerFormat(multiFactorInfo));\n                    });\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n                request.mfaInfo = mfaInfo_1;\n            }\n            delete request.multiFactor;\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SIGN_UP_NEW_USER, request)\n            .then(function (response) {\n            // Return the user id.\n            return response.localId;\n        });\n    };\n    /**\n     * Generates the out of band email action link for the email specified using the action code settings provided.\n     * Returns a promise that resolves with the generated link.\n     *\n     * @param {string} requestType The request type. This could be either used for password reset,\n     *     email verification, email link sign-in.\n     * @param {string} email The email of the user the link is being sent to.\n     * @param {ActionCodeSettings=} actionCodeSettings The optional action code setings which defines whether\n     *     the link is to be handled by a mobile app and the additional state information to be passed in the\n     *     deep link, etc. Required when requestType == 'EMAIL_SIGNIN'\n     * @return {Promise<string>} A promise that resolves with the email action link.\n     */\n    AbstractAuthRequestHandler.prototype.getEmailActionLink = function (requestType, email, actionCodeSettings) {\n        var request = { requestType: requestType, email: email, returnOobLink: true };\n        // ActionCodeSettings required for email link sign-in to determine the url where the sign-in will\n        // be completed.\n        if (typeof actionCodeSettings === 'undefined' && requestType === 'EMAIL_SIGNIN') {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"`actionCodeSettings` is required when `requestType` === 'EMAIL_SIGNIN'\"));\n        }\n        if (typeof actionCodeSettings !== 'undefined' || requestType === 'EMAIL_SIGNIN') {\n            try {\n                var builder = new action_code_settings_builder_1.ActionCodeSettingsBuilder(actionCodeSettings);\n                request = deep_copy_1.deepExtend(request, builder.buildRequest());\n            }\n            catch (e) {\n                return Promise.reject(e);\n            }\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), FIREBASE_AUTH_GET_OOB_CODE, request)\n            .then(function (response) {\n            // Return the link.\n            return response.oobLink;\n        });\n    };\n    /**\n     * Looks up an OIDC provider configuration by provider ID.\n     *\n     * @param {string} providerId The provider identifier of the configuration to lookup.\n     * @return {Promise<OIDCConfigServerResponse>} A promise that resolves with the provider configuration information.\n     */\n    AbstractAuthRequestHandler.prototype.getOAuthIdpConfig = function (providerId) {\n        if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_OAUTH_IDP_CONFIG, {}, { providerId: providerId });\n    };\n    /**\n     * Lists the OIDC configurations (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param {number=} maxResults The page size, 100 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param {string=} pageToken The next page token. If not specified, returns OIDC configurations\n     *     without any offset. Configurations are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @return {Promise<object>} A promise that resolves with the current batch of downloaded\n     *     OIDC configurations and the next page token if available. For the last page, an empty list of provider\n     *     configuration and no page token are returned.\n     */\n    AbstractAuthRequestHandler.prototype.listOAuthIdpConfigs = function (maxResults, pageToken) {\n        if (maxResults === void 0) { maxResults = MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE; }\n        var request = {\n            pageSize: maxResults,\n        };\n        // Add next page token if provided.\n        if (typeof pageToken !== 'undefined') {\n            request.pageToken = pageToken;\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_OAUTH_IDP_CONFIGS, request)\n            .then(function (response) {\n            if (!response.oauthIdpConfigs) {\n                response.oauthIdpConfigs = [];\n                delete response.nextPageToken;\n            }\n            return response;\n        });\n    };\n    /**\n     * Deletes an OIDC configuration identified by a providerId.\n     *\n     * @param {string} providerId The identifier of the OIDC configuration to delete.\n     * @return {Promise<void>} A promise that resolves when the OIDC provider is deleted.\n     */\n    AbstractAuthRequestHandler.prototype.deleteOAuthIdpConfig = function (providerId) {\n        if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_OAUTH_IDP_CONFIG, {}, { providerId: providerId })\n            .then(function () {\n            // Return nothing.\n        });\n    };\n    /**\n     * Creates a new OIDC provider configuration with the properties provided.\n     *\n     * @param {AuthProviderConfig} options The properties to set on the new OIDC provider configuration to be created.\n     * @return {Promise<OIDCConfigServerResponse>} A promise that resolves with the newly created OIDC\n     *     configuration.\n     */\n    AbstractAuthRequestHandler.prototype.createOAuthIdpConfig = function (options) {\n        // Construct backend request.\n        var request;\n        try {\n            request = auth_config_1.OIDCConfig.buildServerRequest(options) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        var providerId = options.providerId;\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_OAUTH_IDP_CONFIG, request, { providerId: providerId })\n            .then(function (response) {\n            if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC provider configuration');\n            }\n            return response;\n        });\n    };\n    /**\n     * Updates an existing OIDC provider configuration with the properties provided.\n     *\n     * @param {string} providerId The provider identifier of the OIDC configuration to update.\n     * @param {OIDCUpdateAuthProviderRequest} options The properties to update on the existing configuration.\n     * @return {Promise<OIDCConfigServerResponse>} A promise that resolves with the modified provider\n     *     configuration.\n     */\n    AbstractAuthRequestHandler.prototype.updateOAuthIdpConfig = function (providerId, options) {\n        if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        // Construct backend request.\n        var request;\n        try {\n            request = auth_config_1.OIDCConfig.buildServerRequest(options, true) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        var updateMask = utils.generateUpdateMask(request);\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_OAUTH_IDP_CONFIG, request, { providerId: providerId, updateMask: updateMask.join(',') })\n            .then(function (response) {\n            if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC provider configuration');\n            }\n            return response;\n        });\n    };\n    /**\n     * Looks up an SAML provider configuration by provider ID.\n     *\n     * @param {string} providerId The provider identifier of the configuration to lookup.\n     * @return {Promise<SAMLConfigServerResponse>} A promise that resolves with the provider configuration information.\n     */\n    AbstractAuthRequestHandler.prototype.getInboundSamlConfig = function (providerId) {\n        if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_INBOUND_SAML_CONFIG, {}, { providerId: providerId });\n    };\n    /**\n     * Lists the SAML configurations (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param {number=} maxResults The page size, 100 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param {string=} pageToken The next page token. If not specified, returns SAML configurations starting\n     *     without any offset. Configurations are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @return {Promise<object>} A promise that resolves with the current batch of downloaded\n     *     SAML configurations and the next page token if available. For the last page, an empty list of provider\n     *     configuration and no page token are returned.\n     */\n    AbstractAuthRequestHandler.prototype.listInboundSamlConfigs = function (maxResults, pageToken) {\n        if (maxResults === void 0) { maxResults = MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE; }\n        var request = {\n            pageSize: maxResults,\n        };\n        // Add next page token if provided.\n        if (typeof pageToken !== 'undefined') {\n            request.pageToken = pageToken;\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_INBOUND_SAML_CONFIGS, request)\n            .then(function (response) {\n            if (!response.inboundSamlConfigs) {\n                response.inboundSamlConfigs = [];\n                delete response.nextPageToken;\n            }\n            return response;\n        });\n    };\n    /**\n     * Deletes a SAML configuration identified by a providerId.\n     *\n     * @param {string} providerId The identifier of the SAML configuration to delete.\n     * @return {Promise<void>} A promise that resolves when the SAML provider is deleted.\n     */\n    AbstractAuthRequestHandler.prototype.deleteInboundSamlConfig = function (providerId) {\n        if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_INBOUND_SAML_CONFIG, {}, { providerId: providerId })\n            .then(function () {\n            // Return nothing.\n        });\n    };\n    /**\n     * Creates a new SAML provider configuration with the properties provided.\n     *\n     * @param {AuthProviderConfig} options The properties to set on the new SAML provider configuration to be created.\n     * @return {Promise<SAMLConfigServerResponse>} A promise that resolves with the newly created SAML\n     *     configuration.\n     */\n    AbstractAuthRequestHandler.prototype.createInboundSamlConfig = function (options) {\n        // Construct backend request.\n        var request;\n        try {\n            request = auth_config_1.SAMLConfig.buildServerRequest(options) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        var providerId = options.providerId;\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_INBOUND_SAML_CONFIG, request, { providerId: providerId })\n            .then(function (response) {\n            if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML provider configuration');\n            }\n            return response;\n        });\n    };\n    /**\n     * Updates an existing SAML provider configuration with the properties provided.\n     *\n     * @param {string} providerId The provider identifier of the SAML configuration to update.\n     * @param {SAMLUpdateAuthProviderRequest} options The properties to update on the existing configuration.\n     * @return {Promise<SAMLConfigServerResponse>} A promise that resolves with the modified provider\n     *     configuration.\n     */\n    AbstractAuthRequestHandler.prototype.updateInboundSamlConfig = function (providerId, options) {\n        if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        // Construct backend request.\n        var request;\n        try {\n            request = auth_config_1.SAMLConfig.buildServerRequest(options, true) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        var updateMask = utils.generateUpdateMask(request);\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_INBOUND_SAML_CONFIG, request, { providerId: providerId, updateMask: updateMask.join(',') })\n            .then(function (response) {\n            if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML provider configuration');\n            }\n            return response;\n        });\n    };\n    /**\n     * Invokes the request handler based on the API settings object passed.\n     *\n     * @param {AuthResourceUrlBuilder} urlBuilder The URL builder for Auth endpoints.\n     * @param {ApiSettings} apiSettings The API endpoint settings to apply to request and response.\n     * @param {object} requestData The request data.\n     * @param {object=} additionalResourceParams Additional resource related params if needed.\n     * @return {Promise<object>} A promise that resolves with the response.\n     */\n    AbstractAuthRequestHandler.prototype.invokeRequestHandler = function (urlBuilder, apiSettings, requestData, additionalResourceParams) {\n        var _this = this;\n        return urlBuilder.getUrl(apiSettings.getEndpoint(), additionalResourceParams)\n            .then(function (url) {\n            // Validate request.\n            var requestValidator = apiSettings.getRequestValidator();\n            requestValidator(requestData);\n            // Process request.\n            var req = {\n                method: apiSettings.getHttpMethod(),\n                url: url,\n                headers: FIREBASE_AUTH_HEADER,\n                data: requestData,\n                timeout: FIREBASE_AUTH_TIMEOUT,\n            };\n            return _this.httpClient.send(req);\n        })\n            .then(function (response) {\n            // Validate response.\n            var responseValidator = apiSettings.getResponseValidator();\n            responseValidator(response.data);\n            // Return entire response.\n            return response.data;\n        })\n            .catch(function (err) {\n            if (err instanceof api_request_1.HttpError) {\n                var error = err.response.data;\n                var errorCode = AbstractAuthRequestHandler.getErrorCode(error);\n                if (!errorCode) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + error + '. Additionally, an ' +\n                        'internal error occurred while attempting to extract the ' +\n                        'errorcode from the error.');\n                }\n                throw error_1.FirebaseAuthError.fromServerError(errorCode, /* message */ undefined, error);\n            }\n            throw err;\n        });\n    };\n    /**\n     * @return {AuthResourceUrlBuilder} The current Auth user management resource URL builder.\n     */\n    AbstractAuthRequestHandler.prototype.getAuthUrlBuilder = function () {\n        if (!this.authUrlBuilder) {\n            this.authUrlBuilder = this.newAuthUrlBuilder();\n        }\n        return this.authUrlBuilder;\n    };\n    /**\n     * @return {AuthResourceUrlBuilder} The current project config resource URL builder.\n     */\n    AbstractAuthRequestHandler.prototype.getProjectConfigUrlBuilder = function () {\n        if (!this.projectConfigUrlBuilder) {\n            this.projectConfigUrlBuilder = this.newProjectConfigUrlBuilder();\n        }\n        return this.projectConfigUrlBuilder;\n    };\n    return AbstractAuthRequestHandler;\n}());\nexports.AbstractAuthRequestHandler = AbstractAuthRequestHandler;\n/** Instantiates the getTenant endpoint settings. */\nvar GET_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'GET')\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain at least the tenant name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get tenant');\n    }\n});\n/** Instantiates the deleteTenant endpoint settings. */\nvar DELETE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'DELETE');\n/** Instantiates the updateTenant endpoint settings. */\nvar UPDATE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}?updateMask={updateMask}', 'PATCH')\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain at least the tenant name.\n    if (!validator.isNonEmptyString(response.name) ||\n        !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update tenant');\n    }\n});\n/** Instantiates the listTenants endpoint settings. */\nvar LIST_TENANTS = new api_request_1.ApiSettings('/tenants', 'GET')\n    // Set request validator.\n    .setRequestValidator(function (request) {\n    // Validate next page token.\n    if (typeof request.pageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.pageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.pageSize) ||\n        request.pageSize <= 0 ||\n        request.pageSize > MAX_LIST_TENANT_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Required \\\"maxResults\\\" must be a positive non-zero number that does not exceed \" +\n            (\"the allowed \" + MAX_LIST_TENANT_PAGE_SIZE + \".\"));\n    }\n});\n/** Instantiates the createTenant endpoint settings. */\nvar CREATE_TENANT = new api_request_1.ApiSettings('/tenants', 'POST')\n    // Set response validator.\n    .setResponseValidator(function (response) {\n    // Response should always contain at least the tenant name.\n    if (!validator.isNonEmptyString(response.name) ||\n        !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new tenant');\n    }\n});\n/**\n * Utility for sending requests to Auth server that are Auth instance related. This includes user and\n * tenant management related APIs. This extends the BaseFirebaseAuthRequestHandler class and defines\n * additional tenant management related APIs.\n */\nvar AuthRequestHandler = /** @class */ (function (_super) {\n    __extends(AuthRequestHandler, _super);\n    /**\n     * The FirebaseAuthRequestHandler constructor used to initialize an instance using a FirebaseApp.\n     *\n     * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n     * @constructor.\n     */\n    function AuthRequestHandler(app) {\n        var _this = _super.call(this, app) || this;\n        _this.tenantMgmtResourceBuilder = new AuthResourceUrlBuilder(app, 'v2');\n        return _this;\n    }\n    /**\n     * @return {AuthResourceUrlBuilder} A new Auth user management resource URL builder instance.\n     */\n    AuthRequestHandler.prototype.newAuthUrlBuilder = function () {\n        return new AuthResourceUrlBuilder(this.app, 'v1');\n    };\n    /**\n     * @return {AuthResourceUrlBuilder} A new project config resource URL builder instance.\n     */\n    AuthRequestHandler.prototype.newProjectConfigUrlBuilder = function () {\n        return new AuthResourceUrlBuilder(this.app, 'v2');\n    };\n    /**\n     * Looks up a tenant by tenant ID.\n     *\n     * @param {string} tenantId The tenant identifier of the tenant to lookup.\n     * @return {Promise<TenantServerResponse>} A promise that resolves with the tenant information.\n     */\n    AuthRequestHandler.prototype.getTenant = function (tenantId) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n        }\n        return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, GET_TENANT, {}, { tenantId: tenantId })\n            .then(function (response) {\n            return response;\n        });\n    };\n    /**\n     * Exports the tenants (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param {number=} maxResults The page size, 1000 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param {string=} pageToken The next page token. If not specified, returns tenants starting\n     *     without any offset. Tenants are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @return {Promise<object>} A promise that resolves with the current batch of downloaded\n     *     tenants and the next page token if available. For the last page, an empty list of tenants\n     *     and no page token are returned.\n     */\n    AuthRequestHandler.prototype.listTenants = function (maxResults, pageToken) {\n        if (maxResults === void 0) { maxResults = MAX_LIST_TENANT_PAGE_SIZE; }\n        var request = {\n            pageSize: maxResults,\n            pageToken: pageToken,\n        };\n        // Remove next page token if not provided.\n        if (typeof request.pageToken === 'undefined') {\n            delete request.pageToken;\n        }\n        return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, LIST_TENANTS, request)\n            .then(function (response) {\n            if (!response.tenants) {\n                response.tenants = [];\n                delete response.nextPageToken;\n            }\n            return response;\n        });\n    };\n    /**\n     * Deletes a tenant identified by a tenantId.\n     *\n     * @param {string} tenantId The identifier of the tenant to delete.\n     * @return {Promise<void>} A promise that resolves when the tenant is deleted.\n     */\n    AuthRequestHandler.prototype.deleteTenant = function (tenantId) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n        }\n        return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, DELETE_TENANT, {}, { tenantId: tenantId })\n            .then(function () {\n            // Return nothing.\n        });\n    };\n    /**\n     * Creates a new tenant with the properties provided.\n     *\n     * @param {TenantOptions} tenantOptions The properties to set on the new tenant to be created.\n     * @return {Promise<TenantServerResponse>} A promise that resolves with the newly created tenant object.\n     */\n    AuthRequestHandler.prototype.createTenant = function (tenantOptions) {\n        try {\n            // Construct backend request.\n            var request = tenant_1.Tenant.buildServerRequest(tenantOptions, true);\n            return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, CREATE_TENANT, request)\n                .then(function (response) {\n                return response;\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    /**\n     * Updates an existing tenant with the properties provided.\n     *\n     * @param {string} tenantId The tenant identifier of the tenant to update.\n     * @param {TenantOptions} tenantOptions The properties to update on the existing tenant.\n     * @return {Promise<TenantServerResponse>} A promise that resolves with the modified tenant object.\n     */\n    AuthRequestHandler.prototype.updateTenant = function (tenantId, tenantOptions) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n        }\n        try {\n            // Construct backend request.\n            var request = tenant_1.Tenant.buildServerRequest(tenantOptions, false);\n            // Do not traverse deep into testPhoneNumbers. The entire content should be replaced\n            // and not just specific phone numbers.\n            var updateMask = utils.generateUpdateMask(request, ['testPhoneNumbers']);\n            return this.invokeRequestHandler(this.tenantMgmtResourceBuilder, UPDATE_TENANT, request, { tenantId: tenantId, updateMask: updateMask.join(',') })\n                .then(function (response) {\n                return response;\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    return AuthRequestHandler;\n}(AbstractAuthRequestHandler));\nexports.AuthRequestHandler = AuthRequestHandler;\n/**\n * Utility for sending requests to Auth server that are tenant Auth instance related. This includes user\n * management related APIs for specified tenants.\n * This extends the BaseFirebaseAuthRequestHandler class.\n */\nvar TenantAwareAuthRequestHandler = /** @class */ (function (_super) {\n    __extends(TenantAwareAuthRequestHandler, _super);\n    /**\n     * The FirebaseTenantRequestHandler constructor used to initialize an instance using a\n     * FirebaseApp and a tenant ID.\n     *\n     * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n     * @param {string} tenantId The request handler's tenant ID.\n     * @constructor\n     */\n    function TenantAwareAuthRequestHandler(app, tenantId) {\n        var _this = _super.call(this, app) || this;\n        _this.tenantId = tenantId;\n        return _this;\n    }\n    /**\n     * @return {AuthResourceUrlBuilder} A new Auth user management resource URL builder instance.\n     */\n    TenantAwareAuthRequestHandler.prototype.newAuthUrlBuilder = function () {\n        return new TenantAwareAuthResourceUrlBuilder(this.app, 'v1', this.tenantId);\n    };\n    /**\n     * @return {AuthResourceUrlBuilder} A new project config resource URL builder instance.\n     */\n    TenantAwareAuthRequestHandler.prototype.newProjectConfigUrlBuilder = function () {\n        return new TenantAwareAuthResourceUrlBuilder(this.app, 'v2', this.tenantId);\n    };\n    /**\n     * Imports the list of users provided to Firebase Auth. This is useful when\n     * migrating from an external authentication system without having to use the Firebase CLI SDK.\n     * At most, 1000 users are allowed to be imported one at a time.\n     * When importing a list of password users, UserImportOptions are required to be specified.\n     *\n     * Overrides the superclass methods by adding an additional check to match tenant IDs of\n     * imported user records if present.\n     *\n     * @param {UserImportRecord[]} users The list of user records to import to Firebase Auth.\n     * @param {UserImportOptions=} options The user import options, required when the users provided\n     *     include password credentials.\n     * @return {Promise<UserImportResult>} A promise that resolves when the operation completes\n     *     with the result of the import. This includes the number of successful imports, the number\n     *     of failed uploads and their corresponding errors.\n     */\n    TenantAwareAuthRequestHandler.prototype.uploadAccount = function (users, options) {\n        var _this = this;\n        // Add additional check to match tenant ID of imported user records.\n        users.forEach(function (user, index) {\n            if (validator.isNonEmptyString(user.tenantId) &&\n                user.tenantId !== _this.tenantId) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID, \"UserRecord of index \\\"\" + index + \"\\\" has mismatching tenant ID \\\"\" + user.tenantId + \"\\\"\");\n            }\n        });\n        return _super.prototype.uploadAccount.call(this, users, options);\n    };\n    return TenantAwareAuthRequestHandler;\n}(AbstractAuthRequestHandler));\nexports.TenantAwareAuthRequestHandler = TenantAwareAuthRequestHandler;\n"]},"metadata":{},"sourceType":"script"}