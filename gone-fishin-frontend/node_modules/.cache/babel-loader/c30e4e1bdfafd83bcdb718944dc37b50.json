{"ast":null,"code":"/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseApp = exports.FirebaseAppInternals = void 0;\n\nvar credential_internal_1 = require(\"./credential/credential-internal\");\n\nvar validator = require(\"./utils/validator\");\n\nvar deep_copy_1 = require(\"./utils/deep-copy\");\n\nvar error_1 = require(\"./utils/error\");\n/**\n * Internals of a FirebaseApp instance.\n */\n\n\nvar FirebaseAppInternals =\n/** @class */\nfunction () {\n  function FirebaseAppInternals(credential_) {\n    this.credential_ = credential_;\n    this.isDeleted_ = false;\n    this.tokenListeners_ = [];\n  }\n  /**\n   * Gets an auth token for the associated app.\n   *\n   * @param {boolean} forceRefresh Whether or not to force a token refresh.\n   * @return {Promise<FirebaseAccessToken>} A Promise that will be fulfilled with the current or\n   *   new token.\n   */\n\n\n  FirebaseAppInternals.prototype.getToken = function (forceRefresh) {\n    var _this = this;\n\n    var expired = this.cachedToken_ && this.cachedToken_.expirationTime < Date.now();\n\n    if (this.cachedTokenPromise_ && !forceRefresh && !expired) {\n      return this.cachedTokenPromise_.catch(function (error) {\n        // Update the cached token promise to avoid caching errors. Set it to resolve with the\n        // cached token if we have one (and return that promise since the token has still not\n        // expired).\n        if (_this.cachedToken_) {\n          _this.cachedTokenPromise_ = Promise.resolve(_this.cachedToken_);\n          return _this.cachedTokenPromise_;\n        } // Otherwise, set the cached token promise to null so that it will force a refresh next\n        // time getToken() is called.\n\n\n        _this.cachedTokenPromise_ = null; // And re-throw the caught error.\n\n        throw error;\n      });\n    } else {\n      // Clear the outstanding token refresh timeout. This is a noop if the timeout is undefined.\n      clearTimeout(this.tokenRefreshTimeout_); // this.credential_ may be an external class; resolving it in a promise helps us\n      // protect against exceptions and upgrades the result to a promise in all cases.\n\n      this.cachedTokenPromise_ = Promise.resolve(this.credential_.getAccessToken()).then(function (result) {\n        // Since the developer can provide the credential implementation, we want to weakly verify\n        // the return type until the type is properly exported.\n        if (!validator.isNonNullObject(result) || typeof result.expires_in !== 'number' || typeof result.access_token !== 'string') {\n          throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, \"Invalid access token generated: \\\"\" + JSON.stringify(result) + \"\\\". Valid access \" + 'tokens must be an object with the \"expires_in\" (number) and \"access_token\" ' + '(string) properties.');\n        }\n\n        var token = {\n          accessToken: result.access_token,\n          expirationTime: Date.now() + result.expires_in * 1000\n        };\n        var hasAccessTokenChanged = _this.cachedToken_ && _this.cachedToken_.accessToken !== token.accessToken;\n        var hasExpirationChanged = _this.cachedToken_ && _this.cachedToken_.expirationTime !== token.expirationTime;\n\n        if (!_this.cachedToken_ || hasAccessTokenChanged || hasExpirationChanged) {\n          _this.cachedToken_ = token;\n\n          _this.tokenListeners_.forEach(function (listener) {\n            listener(token.accessToken);\n          });\n        } // Establish a timeout to proactively refresh the token every minute starting at five\n        // minutes before it expires. Once a token refresh succeeds, no further retries are\n        // needed; if it fails, retry every minute until the token expires (resulting in a total\n        // of four retries: at 4, 3, 2, and 1 minutes).\n\n\n        var refreshTimeInSeconds = result.expires_in - 5 * 60;\n        var numRetries = 4; // In the rare cases the token is short-lived (that is, it expires in less than five\n        // minutes from when it was fetched), establish the timeout to refresh it after the\n        // current minute ends and update the number of retries that should be attempted before\n        // the token expires.\n\n        if (refreshTimeInSeconds <= 0) {\n          refreshTimeInSeconds = result.expires_in % 60;\n          numRetries = Math.floor(result.expires_in / 60) - 1;\n        } // The token refresh timeout keeps the Node.js process alive, so only create it if this\n        // instance has not already been deleted.\n\n\n        if (numRetries && !_this.isDeleted_) {\n          _this.setTokenRefreshTimeout(refreshTimeInSeconds * 1000, numRetries);\n        }\n\n        return token;\n      }).catch(function (error) {\n        var errorMessage = typeof error === 'string' ? error : error.message;\n        errorMessage = 'Credential implementation provided to initializeApp() via the ' + '\"credential\" property failed to fetch a valid Google OAuth2 access token with the ' + (\"following error: \\\"\" + errorMessage + \"\\\".\");\n\n        if (errorMessage.indexOf('invalid_grant') !== -1) {\n          errorMessage += ' There are two likely causes: (1) your server time is not properly ' + 'synced or (2) your certificate key file has been revoked. To solve (1), re-sync the ' + 'time on your server. To solve (2), make sure the key ID for your key file is still ' + 'present at https://console.firebase.google.com/iam-admin/serviceaccounts/project. If ' + 'not, generate a new key file at ' + 'https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk.';\n        }\n\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, errorMessage);\n      });\n      return this.cachedTokenPromise_;\n    }\n  };\n  /**\n   * Adds a listener that is called each time a token changes.\n   *\n   * @param {function(string)} listener The listener that will be called with each new token.\n   */\n\n\n  FirebaseAppInternals.prototype.addAuthTokenListener = function (listener) {\n    this.tokenListeners_.push(listener);\n\n    if (this.cachedToken_) {\n      listener(this.cachedToken_.accessToken);\n    }\n  };\n  /**\n   * Removes a token listener.\n   *\n   * @param {function(string)} listener The listener to remove.\n   */\n\n\n  FirebaseAppInternals.prototype.removeAuthTokenListener = function (listener) {\n    this.tokenListeners_ = this.tokenListeners_.filter(function (other) {\n      return other !== listener;\n    });\n  };\n  /**\n   * Deletes the FirebaseAppInternals instance.\n   */\n\n\n  FirebaseAppInternals.prototype.delete = function () {\n    this.isDeleted_ = true; // Clear the token refresh timeout so it doesn't keep the Node.js process alive.\n\n    clearTimeout(this.tokenRefreshTimeout_);\n  };\n  /**\n   * Establishes timeout to refresh the Google OAuth2 access token used by the SDK.\n   *\n   * @param {number} delayInMilliseconds The delay to use for the timeout.\n   * @param {number} numRetries The number of times to retry fetching a new token if the prior fetch\n   *   failed.\n   */\n\n\n  FirebaseAppInternals.prototype.setTokenRefreshTimeout = function (delayInMilliseconds, numRetries) {\n    var _this = this;\n\n    this.tokenRefreshTimeout_ = setTimeout(function () {\n      _this.getToken(\n      /* forceRefresh */\n      true).catch(function () {\n        // Ignore the error since this might just be an intermittent failure. If we really cannot\n        // refresh the token, an error will be logged once the existing token expires and we try\n        // to fetch a fresh one.\n        if (numRetries > 0) {\n          _this.setTokenRefreshTimeout(60 * 1000, numRetries - 1);\n        }\n      });\n    }, delayInMilliseconds);\n  };\n\n  return FirebaseAppInternals;\n}();\n\nexports.FirebaseAppInternals = FirebaseAppInternals;\n/**\n * Global context object for a collection of services using a shared authentication state.\n */\n\nvar FirebaseApp =\n/** @class */\nfunction () {\n  function FirebaseApp(options, name, firebaseInternals_) {\n    var _this = this;\n\n    this.firebaseInternals_ = firebaseInternals_;\n    this.services_ = {};\n    this.isDeleted_ = false;\n    this.name_ = name;\n    this.options_ = deep_copy_1.deepCopy(options);\n\n    if (!validator.isNonNullObject(this.options_)) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, \"Invalid Firebase app options passed as the first argument to initializeApp() for the \" + (\"app named \\\"\" + this.name_ + \"\\\". Options must be a non-null object.\"));\n    }\n\n    var hasCredential = ('credential' in this.options_);\n\n    if (!hasCredential) {\n      this.options_.credential = credential_internal_1.getApplicationDefault(this.options_.httpAgent);\n    }\n\n    var credential = this.options_.credential;\n\n    if (typeof credential !== 'object' || credential === null || typeof credential.getAccessToken !== 'function') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, \"Invalid Firebase app options passed as the first argument to initializeApp() for the \" + (\"app named \\\"\" + this.name_ + \"\\\". The \\\"credential\\\" property must be an object which implements \") + \"the Credential interface.\");\n    }\n\n    Object.keys(firebaseInternals_.serviceFactories).forEach(function (serviceName) {\n      // Defer calling createService() until the service is accessed\n      _this[serviceName] = _this.getService_.bind(_this, serviceName);\n    });\n    this.INTERNAL = new FirebaseAppInternals(credential);\n  }\n  /**\n   * Returns the Auth service instance associated with this app.\n   *\n   * @return {Auth} The Auth service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.auth = function () {\n    var _this = this;\n\n    return this.ensureService_('auth', function () {\n      var authService = require('./auth/auth').Auth;\n\n      return new authService(_this);\n    });\n  };\n  /**\n   * Returns the Database service for the specified URL, and the current app.\n   *\n   * @return {Database} The Database service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.database = function (url) {\n    var _this = this;\n\n    var service = this.ensureService_('database', function () {\n      var dbService = require('./database/database-internal').DatabaseService;\n\n      return new dbService(_this);\n    });\n    return service.getDatabase(url);\n  };\n  /**\n   * Returns the Messaging service instance associated with this app.\n   *\n   * @return {Messaging} The Messaging service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.messaging = function () {\n    var _this = this;\n\n    return this.ensureService_('messaging', function () {\n      var messagingService = require('./messaging/messaging').Messaging;\n\n      return new messagingService(_this);\n    });\n  };\n  /**\n   * Returns the Storage service instance associated with this app.\n   *\n   * @return {Storage} The Storage service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.storage = function () {\n    var _this = this;\n\n    return this.ensureService_('storage', function () {\n      var storageService = require('./storage/storage').Storage;\n\n      return new storageService(_this);\n    });\n  };\n\n  FirebaseApp.prototype.firestore = function () {\n    var _this = this;\n\n    var service = this.ensureService_('firestore', function () {\n      var firestoreService = require('./firestore/firestore-internal').FirestoreService;\n\n      return new firestoreService(_this);\n    });\n    return service.client;\n  };\n  /**\n   * Returns the InstanceId service instance associated with this app.\n   *\n   * @return {InstanceId} The InstanceId service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.instanceId = function () {\n    var _this = this;\n\n    return this.ensureService_('iid', function () {\n      var iidService = require('./instance-id/instance-id').InstanceId;\n\n      return new iidService(_this);\n    });\n  };\n  /**\n   * Returns the MachineLearning service instance associated with this app.\n   *\n   * @return {MachineLearning} The Machine Learning service instance of this app\n   */\n\n\n  FirebaseApp.prototype.machineLearning = function () {\n    var _this = this;\n\n    return this.ensureService_('machine-learning', function () {\n      var machineLearningService = require('./machine-learning/machine-learning').MachineLearning;\n\n      return new machineLearningService(_this);\n    });\n  };\n  /**\n   * Returns the ProjectManagement service instance associated with this app.\n   *\n   * @return {ProjectManagement} The ProjectManagement service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.projectManagement = function () {\n    var _this = this;\n\n    return this.ensureService_('project-management', function () {\n      var projectManagementService = require('./project-management/project-management').ProjectManagement;\n\n      return new projectManagementService(_this);\n    });\n  };\n  /**\n   * Returns the SecurityRules service instance associated with this app.\n   *\n   * @return {SecurityRules} The SecurityRules service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.securityRules = function () {\n    var _this = this;\n\n    return this.ensureService_('security-rules', function () {\n      var securityRulesService = require('./security-rules/security-rules').SecurityRules;\n\n      return new securityRulesService(_this);\n    });\n  };\n  /**\n   * Returns the RemoteConfig service instance associated with this app.\n   *\n   * @return {RemoteConfig} The RemoteConfig service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.remoteConfig = function () {\n    var _this = this;\n\n    return this.ensureService_('remoteConfig', function () {\n      var remoteConfigService = require('./remote-config/remote-config').RemoteConfig;\n\n      return new remoteConfigService(_this);\n    });\n  };\n\n  Object.defineProperty(FirebaseApp.prototype, \"name\", {\n    /**\n     * Returns the name of the FirebaseApp instance.\n     *\n     * @return {string} The name of the FirebaseApp instance.\n     */\n    get: function get() {\n      this.checkDestroyed_();\n      return this.name_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseApp.prototype, \"options\", {\n    /**\n     * Returns the options for the FirebaseApp instance.\n     *\n     * @return {FirebaseAppOptions} The options for the FirebaseApp instance.\n     */\n    get: function get() {\n      this.checkDestroyed_();\n      return deep_copy_1.deepCopy(this.options_);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Deletes the FirebaseApp instance.\n   *\n   * @return {Promise<void>} An empty Promise fulfilled once the FirebaseApp instance is deleted.\n   */\n\n  FirebaseApp.prototype.delete = function () {\n    var _this = this;\n\n    this.checkDestroyed_();\n    this.firebaseInternals_.removeApp(this.name_);\n    this.INTERNAL.delete();\n    return Promise.all(Object.keys(this.services_).map(function (serviceName) {\n      return _this.services_[serviceName].INTERNAL.delete();\n    })).then(function () {\n      _this.services_ = {};\n      _this.isDeleted_ = true;\n    });\n  };\n\n  FirebaseApp.prototype.ensureService_ = function (serviceName, initializer) {\n    this.checkDestroyed_();\n    var service;\n\n    if (serviceName in this.services_) {\n      service = this.services_[serviceName];\n    } else {\n      service = initializer();\n      this.services_[serviceName] = service;\n    }\n\n    return service;\n  };\n  /**\n   * Returns the service instance associated with this FirebaseApp instance (creating it on demand\n   * if needed). This is used for looking up monkeypatched service instances.\n   *\n   * @param {string} serviceName The name of the service instance to return.\n   * @return {FirebaseServiceInterface} The service instance with the provided name.\n   */\n\n\n  FirebaseApp.prototype.getService_ = function (serviceName) {\n    this.checkDestroyed_();\n\n    if (!(serviceName in this.services_)) {\n      this.services_[serviceName] = this.firebaseInternals_.serviceFactories[serviceName](this, this.extendApp_.bind(this));\n    }\n\n    return this.services_[serviceName];\n  };\n  /**\n   * Callback function used to extend an App instance at the time of service instance creation.\n   */\n\n\n  FirebaseApp.prototype.extendApp_ = function (props) {\n    deep_copy_1.deepExtend(this, props);\n  };\n  /**\n   * Throws an Error if the FirebaseApp instance has already been deleted.\n   */\n\n\n  FirebaseApp.prototype.checkDestroyed_ = function () {\n    if (this.isDeleted_) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.APP_DELETED, \"Firebase app named \\\"\" + this.name_ + \"\\\" has already been deleted.\");\n    }\n  };\n\n  return FirebaseApp;\n}();\n\nexports.FirebaseApp = FirebaseApp;","map":{"version":3,"sources":["/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/firebase-admin/lib/firebase-app.js"],"names":["Object","defineProperty","exports","value","FirebaseApp","FirebaseAppInternals","credential_internal_1","require","validator","deep_copy_1","error_1","credential_","isDeleted_","tokenListeners_","prototype","getToken","forceRefresh","_this","expired","cachedToken_","expirationTime","Date","now","cachedTokenPromise_","catch","error","Promise","resolve","clearTimeout","tokenRefreshTimeout_","getAccessToken","then","result","isNonNullObject","expires_in","access_token","FirebaseAppError","AppErrorCodes","INVALID_CREDENTIAL","JSON","stringify","token","accessToken","hasAccessTokenChanged","hasExpirationChanged","forEach","listener","refreshTimeInSeconds","numRetries","Math","floor","setTokenRefreshTimeout","errorMessage","message","indexOf","addAuthTokenListener","push","removeAuthTokenListener","filter","other","delete","delayInMilliseconds","setTimeout","options","name","firebaseInternals_","services_","name_","options_","deepCopy","INVALID_APP_OPTIONS","hasCredential","credential","getApplicationDefault","httpAgent","keys","serviceFactories","serviceName","getService_","bind","INTERNAL","auth","ensureService_","authService","Auth","database","url","service","dbService","DatabaseService","getDatabase","messaging","messagingService","Messaging","storage","storageService","Storage","firestore","firestoreService","FirestoreService","client","instanceId","iidService","InstanceId","machineLearning","machineLearningService","MachineLearning","projectManagement","projectManagementService","ProjectManagement","securityRules","securityRulesService","SecurityRules","remoteConfig","remoteConfigService","RemoteConfig","get","checkDestroyed_","enumerable","configurable","removeApp","all","map","initializer","extendApp_","props","deepExtend","APP_DELETED"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseApp = exports.FirebaseAppInternals = void 0;\nvar credential_internal_1 = require(\"./credential/credential-internal\");\nvar validator = require(\"./utils/validator\");\nvar deep_copy_1 = require(\"./utils/deep-copy\");\nvar error_1 = require(\"./utils/error\");\n/**\n * Internals of a FirebaseApp instance.\n */\nvar FirebaseAppInternals = /** @class */ (function () {\n    function FirebaseAppInternals(credential_) {\n        this.credential_ = credential_;\n        this.isDeleted_ = false;\n        this.tokenListeners_ = [];\n    }\n    /**\n     * Gets an auth token for the associated app.\n     *\n     * @param {boolean} forceRefresh Whether or not to force a token refresh.\n     * @return {Promise<FirebaseAccessToken>} A Promise that will be fulfilled with the current or\n     *   new token.\n     */\n    FirebaseAppInternals.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        var expired = this.cachedToken_ && this.cachedToken_.expirationTime < Date.now();\n        if (this.cachedTokenPromise_ && !forceRefresh && !expired) {\n            return this.cachedTokenPromise_\n                .catch(function (error) {\n                // Update the cached token promise to avoid caching errors. Set it to resolve with the\n                // cached token if we have one (and return that promise since the token has still not\n                // expired).\n                if (_this.cachedToken_) {\n                    _this.cachedTokenPromise_ = Promise.resolve(_this.cachedToken_);\n                    return _this.cachedTokenPromise_;\n                }\n                // Otherwise, set the cached token promise to null so that it will force a refresh next\n                // time getToken() is called.\n                _this.cachedTokenPromise_ = null;\n                // And re-throw the caught error.\n                throw error;\n            });\n        }\n        else {\n            // Clear the outstanding token refresh timeout. This is a noop if the timeout is undefined.\n            clearTimeout(this.tokenRefreshTimeout_);\n            // this.credential_ may be an external class; resolving it in a promise helps us\n            // protect against exceptions and upgrades the result to a promise in all cases.\n            this.cachedTokenPromise_ = Promise.resolve(this.credential_.getAccessToken())\n                .then(function (result) {\n                // Since the developer can provide the credential implementation, we want to weakly verify\n                // the return type until the type is properly exported.\n                if (!validator.isNonNullObject(result) ||\n                    typeof result.expires_in !== 'number' ||\n                    typeof result.access_token !== 'string') {\n                    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, \"Invalid access token generated: \\\"\" + JSON.stringify(result) + \"\\\". Valid access \" +\n                        'tokens must be an object with the \"expires_in\" (number) and \"access_token\" ' +\n                        '(string) properties.');\n                }\n                var token = {\n                    accessToken: result.access_token,\n                    expirationTime: Date.now() + (result.expires_in * 1000),\n                };\n                var hasAccessTokenChanged = (_this.cachedToken_ && _this.cachedToken_.accessToken !== token.accessToken);\n                var hasExpirationChanged = (_this.cachedToken_ && _this.cachedToken_.expirationTime !== token.expirationTime);\n                if (!_this.cachedToken_ || hasAccessTokenChanged || hasExpirationChanged) {\n                    _this.cachedToken_ = token;\n                    _this.tokenListeners_.forEach(function (listener) {\n                        listener(token.accessToken);\n                    });\n                }\n                // Establish a timeout to proactively refresh the token every minute starting at five\n                // minutes before it expires. Once a token refresh succeeds, no further retries are\n                // needed; if it fails, retry every minute until the token expires (resulting in a total\n                // of four retries: at 4, 3, 2, and 1 minutes).\n                var refreshTimeInSeconds = (result.expires_in - (5 * 60));\n                var numRetries = 4;\n                // In the rare cases the token is short-lived (that is, it expires in less than five\n                // minutes from when it was fetched), establish the timeout to refresh it after the\n                // current minute ends and update the number of retries that should be attempted before\n                // the token expires.\n                if (refreshTimeInSeconds <= 0) {\n                    refreshTimeInSeconds = result.expires_in % 60;\n                    numRetries = Math.floor(result.expires_in / 60) - 1;\n                }\n                // The token refresh timeout keeps the Node.js process alive, so only create it if this\n                // instance has not already been deleted.\n                if (numRetries && !_this.isDeleted_) {\n                    _this.setTokenRefreshTimeout(refreshTimeInSeconds * 1000, numRetries);\n                }\n                return token;\n            })\n                .catch(function (error) {\n                var errorMessage = (typeof error === 'string') ? error : error.message;\n                errorMessage = 'Credential implementation provided to initializeApp() via the ' +\n                    '\"credential\" property failed to fetch a valid Google OAuth2 access token with the ' +\n                    (\"following error: \\\"\" + errorMessage + \"\\\".\");\n                if (errorMessage.indexOf('invalid_grant') !== -1) {\n                    errorMessage += ' There are two likely causes: (1) your server time is not properly ' +\n                        'synced or (2) your certificate key file has been revoked. To solve (1), re-sync the ' +\n                        'time on your server. To solve (2), make sure the key ID for your key file is still ' +\n                        'present at https://console.firebase.google.com/iam-admin/serviceaccounts/project. If ' +\n                        'not, generate a new key file at ' +\n                        'https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk.';\n                }\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, errorMessage);\n            });\n            return this.cachedTokenPromise_;\n        }\n    };\n    /**\n     * Adds a listener that is called each time a token changes.\n     *\n     * @param {function(string)} listener The listener that will be called with each new token.\n     */\n    FirebaseAppInternals.prototype.addAuthTokenListener = function (listener) {\n        this.tokenListeners_.push(listener);\n        if (this.cachedToken_) {\n            listener(this.cachedToken_.accessToken);\n        }\n    };\n    /**\n     * Removes a token listener.\n     *\n     * @param {function(string)} listener The listener to remove.\n     */\n    FirebaseAppInternals.prototype.removeAuthTokenListener = function (listener) {\n        this.tokenListeners_ = this.tokenListeners_.filter(function (other) { return other !== listener; });\n    };\n    /**\n     * Deletes the FirebaseAppInternals instance.\n     */\n    FirebaseAppInternals.prototype.delete = function () {\n        this.isDeleted_ = true;\n        // Clear the token refresh timeout so it doesn't keep the Node.js process alive.\n        clearTimeout(this.tokenRefreshTimeout_);\n    };\n    /**\n     * Establishes timeout to refresh the Google OAuth2 access token used by the SDK.\n     *\n     * @param {number} delayInMilliseconds The delay to use for the timeout.\n     * @param {number} numRetries The number of times to retry fetching a new token if the prior fetch\n     *   failed.\n     */\n    FirebaseAppInternals.prototype.setTokenRefreshTimeout = function (delayInMilliseconds, numRetries) {\n        var _this = this;\n        this.tokenRefreshTimeout_ = setTimeout(function () {\n            _this.getToken(/* forceRefresh */ true)\n                .catch(function () {\n                // Ignore the error since this might just be an intermittent failure. If we really cannot\n                // refresh the token, an error will be logged once the existing token expires and we try\n                // to fetch a fresh one.\n                if (numRetries > 0) {\n                    _this.setTokenRefreshTimeout(60 * 1000, numRetries - 1);\n                }\n            });\n        }, delayInMilliseconds);\n    };\n    return FirebaseAppInternals;\n}());\nexports.FirebaseAppInternals = FirebaseAppInternals;\n/**\n * Global context object for a collection of services using a shared authentication state.\n */\nvar FirebaseApp = /** @class */ (function () {\n    function FirebaseApp(options, name, firebaseInternals_) {\n        var _this = this;\n        this.firebaseInternals_ = firebaseInternals_;\n        this.services_ = {};\n        this.isDeleted_ = false;\n        this.name_ = name;\n        this.options_ = deep_copy_1.deepCopy(options);\n        if (!validator.isNonNullObject(this.options_)) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, \"Invalid Firebase app options passed as the first argument to initializeApp() for the \" +\n                (\"app named \\\"\" + this.name_ + \"\\\". Options must be a non-null object.\"));\n        }\n        var hasCredential = ('credential' in this.options_);\n        if (!hasCredential) {\n            this.options_.credential = credential_internal_1.getApplicationDefault(this.options_.httpAgent);\n        }\n        var credential = this.options_.credential;\n        if (typeof credential !== 'object' || credential === null || typeof credential.getAccessToken !== 'function') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, \"Invalid Firebase app options passed as the first argument to initializeApp() for the \" +\n                (\"app named \\\"\" + this.name_ + \"\\\". The \\\"credential\\\" property must be an object which implements \") +\n                \"the Credential interface.\");\n        }\n        Object.keys(firebaseInternals_.serviceFactories).forEach(function (serviceName) {\n            // Defer calling createService() until the service is accessed\n            _this[serviceName] = _this.getService_.bind(_this, serviceName);\n        });\n        this.INTERNAL = new FirebaseAppInternals(credential);\n    }\n    /**\n     * Returns the Auth service instance associated with this app.\n     *\n     * @return {Auth} The Auth service instance of this app.\n     */\n    FirebaseApp.prototype.auth = function () {\n        var _this = this;\n        return this.ensureService_('auth', function () {\n            var authService = require('./auth/auth').Auth;\n            return new authService(_this);\n        });\n    };\n    /**\n     * Returns the Database service for the specified URL, and the current app.\n     *\n     * @return {Database} The Database service instance of this app.\n     */\n    FirebaseApp.prototype.database = function (url) {\n        var _this = this;\n        var service = this.ensureService_('database', function () {\n            var dbService = require('./database/database-internal').DatabaseService;\n            return new dbService(_this);\n        });\n        return service.getDatabase(url);\n    };\n    /**\n     * Returns the Messaging service instance associated with this app.\n     *\n     * @return {Messaging} The Messaging service instance of this app.\n     */\n    FirebaseApp.prototype.messaging = function () {\n        var _this = this;\n        return this.ensureService_('messaging', function () {\n            var messagingService = require('./messaging/messaging').Messaging;\n            return new messagingService(_this);\n        });\n    };\n    /**\n     * Returns the Storage service instance associated with this app.\n     *\n     * @return {Storage} The Storage service instance of this app.\n     */\n    FirebaseApp.prototype.storage = function () {\n        var _this = this;\n        return this.ensureService_('storage', function () {\n            var storageService = require('./storage/storage').Storage;\n            return new storageService(_this);\n        });\n    };\n    FirebaseApp.prototype.firestore = function () {\n        var _this = this;\n        var service = this.ensureService_('firestore', function () {\n            var firestoreService = require('./firestore/firestore-internal').FirestoreService;\n            return new firestoreService(_this);\n        });\n        return service.client;\n    };\n    /**\n     * Returns the InstanceId service instance associated with this app.\n     *\n     * @return {InstanceId} The InstanceId service instance of this app.\n     */\n    FirebaseApp.prototype.instanceId = function () {\n        var _this = this;\n        return this.ensureService_('iid', function () {\n            var iidService = require('./instance-id/instance-id').InstanceId;\n            return new iidService(_this);\n        });\n    };\n    /**\n     * Returns the MachineLearning service instance associated with this app.\n     *\n     * @return {MachineLearning} The Machine Learning service instance of this app\n     */\n    FirebaseApp.prototype.machineLearning = function () {\n        var _this = this;\n        return this.ensureService_('machine-learning', function () {\n            var machineLearningService = require('./machine-learning/machine-learning').MachineLearning;\n            return new machineLearningService(_this);\n        });\n    };\n    /**\n     * Returns the ProjectManagement service instance associated with this app.\n     *\n     * @return {ProjectManagement} The ProjectManagement service instance of this app.\n     */\n    FirebaseApp.prototype.projectManagement = function () {\n        var _this = this;\n        return this.ensureService_('project-management', function () {\n            var projectManagementService = require('./project-management/project-management').ProjectManagement;\n            return new projectManagementService(_this);\n        });\n    };\n    /**\n     * Returns the SecurityRules service instance associated with this app.\n     *\n     * @return {SecurityRules} The SecurityRules service instance of this app.\n     */\n    FirebaseApp.prototype.securityRules = function () {\n        var _this = this;\n        return this.ensureService_('security-rules', function () {\n            var securityRulesService = require('./security-rules/security-rules').SecurityRules;\n            return new securityRulesService(_this);\n        });\n    };\n    /**\n     * Returns the RemoteConfig service instance associated with this app.\n     *\n     * @return {RemoteConfig} The RemoteConfig service instance of this app.\n     */\n    FirebaseApp.prototype.remoteConfig = function () {\n        var _this = this;\n        return this.ensureService_('remoteConfig', function () {\n            var remoteConfigService = require('./remote-config/remote-config').RemoteConfig;\n            return new remoteConfigService(_this);\n        });\n    };\n    Object.defineProperty(FirebaseApp.prototype, \"name\", {\n        /**\n         * Returns the name of the FirebaseApp instance.\n         *\n         * @return {string} The name of the FirebaseApp instance.\n         */\n        get: function () {\n            this.checkDestroyed_();\n            return this.name_;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseApp.prototype, \"options\", {\n        /**\n         * Returns the options for the FirebaseApp instance.\n         *\n         * @return {FirebaseAppOptions} The options for the FirebaseApp instance.\n         */\n        get: function () {\n            this.checkDestroyed_();\n            return deep_copy_1.deepCopy(this.options_);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Deletes the FirebaseApp instance.\n     *\n     * @return {Promise<void>} An empty Promise fulfilled once the FirebaseApp instance is deleted.\n     */\n    FirebaseApp.prototype.delete = function () {\n        var _this = this;\n        this.checkDestroyed_();\n        this.firebaseInternals_.removeApp(this.name_);\n        this.INTERNAL.delete();\n        return Promise.all(Object.keys(this.services_).map(function (serviceName) {\n            return _this.services_[serviceName].INTERNAL.delete();\n        })).then(function () {\n            _this.services_ = {};\n            _this.isDeleted_ = true;\n        });\n    };\n    FirebaseApp.prototype.ensureService_ = function (serviceName, initializer) {\n        this.checkDestroyed_();\n        var service;\n        if (serviceName in this.services_) {\n            service = this.services_[serviceName];\n        }\n        else {\n            service = initializer();\n            this.services_[serviceName] = service;\n        }\n        return service;\n    };\n    /**\n     * Returns the service instance associated with this FirebaseApp instance (creating it on demand\n     * if needed). This is used for looking up monkeypatched service instances.\n     *\n     * @param {string} serviceName The name of the service instance to return.\n     * @return {FirebaseServiceInterface} The service instance with the provided name.\n     */\n    FirebaseApp.prototype.getService_ = function (serviceName) {\n        this.checkDestroyed_();\n        if (!(serviceName in this.services_)) {\n            this.services_[serviceName] = this.firebaseInternals_.serviceFactories[serviceName](this, this.extendApp_.bind(this));\n        }\n        return this.services_[serviceName];\n    };\n    /**\n     * Callback function used to extend an App instance at the time of service instance creation.\n     */\n    FirebaseApp.prototype.extendApp_ = function (props) {\n        deep_copy_1.deepExtend(this, props);\n    };\n    /**\n     * Throws an Error if the FirebaseApp instance has already been deleted.\n     */\n    FirebaseApp.prototype.checkDestroyed_ = function () {\n        if (this.isDeleted_) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.APP_DELETED, \"Firebase app named \\\"\" + this.name_ + \"\\\" has already been deleted.\");\n        }\n    };\n    return FirebaseApp;\n}());\nexports.FirebaseApp = FirebaseApp;\n"]},"metadata":{},"sourceType":"script"}