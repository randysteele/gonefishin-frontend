{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _inherits = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar deepEqual = require(\"fast-deep-equal\");\n\nvar serializer_1 = require(\"./serializer\");\n\nvar validate_1 = require(\"./validate\");\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class\n */\n\n\nvar FieldValue = /*#__PURE__*/function () {\n  /**\n   * @hideconstructor\n   */\n  function FieldValue() {\n    _classCallCheck(this, FieldValue);\n  }\n  /**\n   * Returns a sentinel for use with update() or set() with {merge:true} to mark\n   * a field for deletion.\n   *\n   * @returns {FieldValue} The sentinel value to use in your objects.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   * let data = { a: 'b', c: 'd' };\n   *\n   * documentRef.set(data).then(() => {\n   *   return documentRef.update({a: Firestore.FieldValue.delete()});\n   * }).then(() => {\n   *   // Document now only contains { c: 'd' }\n   * });\n   */\n\n\n  _createClass(FieldValue, [{\n    key: \"isEqual\",\n\n    /**\n     * Returns true if this `FieldValue` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldValue` is equal to the provided value.\n     *\n     * @example\n     * let fieldValues = [\n     *   Firestore.FieldValue.increment(-1.0),\n     *   Firestore.FieldValue.increment(-1),\n     *   Firestore.FieldValue.increment(-0.0),\n     *   Firestore.FieldValue.increment(-0),\n     *   Firestore.FieldValue.increment(0),\n     *   Firestore.FieldValue.increment(0.0),\n     *   Firestore.FieldValue.increment(1),\n     *   Firestore.FieldValue.increment(1.0)\n     * ];\n     *\n     * let equal = 0;\n     * for (let i = 0; i < fieldValues.length; ++i) {\n     *   for (let j = i + 1; j < fieldValues.length; ++j) {\n     *     if (fieldValues[i].isEqual(fieldValues[j])) {\n     *       ++equal;\n     *     }\n     *   }\n     * }\n     * console.log(`Found ${equal} equalities.`);\n     */\n    value: function isEqual(other) {\n      return this === other;\n    }\n  }], [{\n    key: \"delete\",\n    value: function _delete() {\n      return DeleteTransform.DELETE_SENTINEL;\n    }\n    /**\n     * Returns a sentinel used with set(), create() or update() to include a\n     * server-generated timestamp in the written data.\n     *\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({\n     *   time: Firestore.FieldValue.serverTimestamp()\n     * }).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   console.log(`Server time set to ${doc.get('time')}`);\n     * });\n     */\n\n  }, {\n    key: \"serverTimestamp\",\n    value: function serverTimestamp() {\n      return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to increment the the field's current value by the\n     * given value.\n     *\n     * If either current field value or the operand uses floating point\n     * precision, both values will be interpreted as floating point numbers and\n     * all arithmetic will follow IEEE 754 semantics. Otherwise, integer\n     * precision is kept and the result is capped between -2^63 and 2^63-1.\n     *\n     * If the current field value is not of type 'number', or if the field does\n     * not yet exist, the transformation will set the field to the given value.\n     *\n     * @param {number} n The value to increment by.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'counter', Firestore.FieldValue.increment(1)\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('counter') was incremented\n     * });\n     */\n\n  }, {\n    key: \"increment\",\n    value: function increment(n) {\n      // eslint-disable-next-line prefer-rest-params\n      validate_1.validateMinNumberOfArguments('FieldValue.increment', arguments, 1);\n      return new NumericIncrementTransform(n);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to union the given elements with any array value that\n     * already exists on the server. Each specified element that doesn't already\n     * exist in the array will be added to the end. If the field being modified is\n     * not already an array it will be overwritten with an array containing\n     * exactly the specified elements.\n     *\n     * @param {...*} elements The elements to union into the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayUnion('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') contains field 'foo'\n     * });\n     */\n\n  }, {\n    key: \"arrayUnion\",\n    value: function arrayUnion() {\n      for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {\n        elements[_key] = arguments[_key];\n      }\n\n      validate_1.validateMinNumberOfArguments('FieldValue.arrayUnion', elements, 1);\n      return new ArrayUnionTransform(elements);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to remove the given elements from any array value\n     * that already exists on the server. All instances of each element specified\n     * will be removed from the array. If the field being modified is not already\n     * an array it will be overwritten with an empty array.\n     *\n     * @param {...*} elements The elements to remove from the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayRemove('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') no longer contains field 'foo'\n     * });\n     */\n\n  }, {\n    key: \"arrayRemove\",\n    value: function arrayRemove() {\n      for (var _len2 = arguments.length, elements = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        elements[_key2] = arguments[_key2];\n      }\n\n      validate_1.validateMinNumberOfArguments('FieldValue.arrayRemove', elements, 1);\n      return new ArrayRemoveTransform(elements);\n    }\n  }]);\n\n  return FieldValue;\n}();\n\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @abstract\n */\n\nvar FieldTransform = /*#__PURE__*/function (_FieldValue) {\n  _inherits(FieldTransform, _FieldValue);\n\n  var _super = _createSuper(FieldTransform);\n\n  function FieldTransform() {\n    _classCallCheck(this, FieldTransform);\n\n    return _super.apply(this, arguments);\n  }\n\n  return FieldTransform;\n}(FieldValue);\n\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n */\n\nvar DeleteTransform = /*#__PURE__*/function (_FieldTransform) {\n  _inherits(DeleteTransform, _FieldTransform);\n\n  var _super2 = _createSuper(DeleteTransform);\n\n  function DeleteTransform() {\n    _classCallCheck(this, DeleteTransform);\n\n    return _super2.call(this);\n  }\n  /**\n   * Deletes are included in document masks.\n   * @private\n   */\n\n\n  _createClass(DeleteTransform, [{\n    key: \"validate\",\n    value: function validate() {}\n  }, {\n    key: \"toProto\",\n    value: function toProto() {\n      throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n    }\n  }, {\n    key: \"includeInDocumentMask\",\n    get: function get() {\n      return true;\n    }\n    /**\n     * Deletes are are omitted from document transforms.\n     * @private\n     */\n\n  }, {\n    key: \"includeInDocumentTransform\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"methodName\",\n    get: function get() {\n      return 'FieldValue.delete';\n    }\n  }]);\n\n  return DeleteTransform;\n}(FieldTransform);\n\nexports.DeleteTransform = DeleteTransform;\n/**\n * Sentinel value for a field delete.\n * @private\n */\n\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n */\n\nvar ServerTimestampTransform = /*#__PURE__*/function (_FieldTransform2) {\n  _inherits(ServerTimestampTransform, _FieldTransform2);\n\n  var _super3 = _createSuper(ServerTimestampTransform);\n\n  function ServerTimestampTransform() {\n    _classCallCheck(this, ServerTimestampTransform);\n\n    return _super3.call(this);\n  }\n  /**\n   * Server timestamps are omitted from document masks.\n   *\n   * @private\n   */\n\n\n  _createClass(ServerTimestampTransform, [{\n    key: \"validate\",\n    value: function validate() {}\n  }, {\n    key: \"toProto\",\n    value: function toProto(serializer, fieldPath) {\n      return {\n        fieldPath: fieldPath.formattedName,\n        setToServerValue: 'REQUEST_TIME'\n      };\n    }\n  }, {\n    key: \"includeInDocumentMask\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * Server timestamps are included in document transforms.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"includeInDocumentTransform\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"methodName\",\n    get: function get() {\n      return 'FieldValue.serverTimestamp';\n    }\n  }]);\n\n  return ServerTimestampTransform;\n}(FieldTransform);\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n */\n\n\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Increments a field value on the backend.\n *\n * @private\n */\n\nvar NumericIncrementTransform = /*#__PURE__*/function (_FieldTransform3) {\n  _inherits(NumericIncrementTransform, _FieldTransform3);\n\n  var _super4 = _createSuper(NumericIncrementTransform);\n\n  function NumericIncrementTransform(operand) {\n    var _this;\n\n    _classCallCheck(this, NumericIncrementTransform);\n\n    _this = _super4.call(this);\n    _this.operand = operand;\n    return _this;\n  }\n  /**\n   * Numeric transforms are omitted from document masks.\n   *\n   * @private\n   */\n\n\n  _createClass(NumericIncrementTransform, [{\n    key: \"validate\",\n    value: function validate() {\n      validate_1.validateNumber('FieldValue.increment()', this.operand);\n    }\n  }, {\n    key: \"toProto\",\n    value: function toProto(serializer, fieldPath) {\n      var encodedOperand = serializer.encodeValue(this.operand);\n      return {\n        fieldPath: fieldPath.formattedName,\n        increment: encodedOperand\n      };\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof NumericIncrementTransform && this.operand === other.operand;\n    }\n  }, {\n    key: \"includeInDocumentMask\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * Numeric transforms are included in document transforms.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"includeInDocumentTransform\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"methodName\",\n    get: function get() {\n      return 'FieldValue.increment';\n    }\n  }]);\n\n  return NumericIncrementTransform;\n}(FieldTransform);\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n */\n\n\nvar ArrayUnionTransform = /*#__PURE__*/function (_FieldTransform4) {\n  _inherits(ArrayUnionTransform, _FieldTransform4);\n\n  var _super5 = _createSuper(ArrayUnionTransform);\n\n  function ArrayUnionTransform(elements) {\n    var _this2;\n\n    _classCallCheck(this, ArrayUnionTransform);\n\n    _this2 = _super5.call(this);\n    _this2.elements = elements;\n    return _this2;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   * @private\n   */\n\n\n  _createClass(ArrayUnionTransform, [{\n    key: \"validate\",\n    value: function validate(allowUndefined) {\n      for (var i = 0; i < this.elements.length; ++i) {\n        validateArrayElement(i, this.elements[i], allowUndefined);\n      }\n    }\n  }, {\n    key: \"toProto\",\n    value: function toProto(serializer, fieldPath) {\n      var encodedElements = serializer.encodeValue(this.elements).arrayValue;\n      return {\n        fieldPath: fieldPath.formattedName,\n        appendMissingElements: encodedElements\n      };\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof ArrayUnionTransform && deepEqual(this.elements, other.elements);\n    }\n  }, {\n    key: \"includeInDocumentMask\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     */\n\n  }, {\n    key: \"includeInDocumentTransform\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"methodName\",\n    get: function get() {\n      return 'FieldValue.arrayUnion';\n    }\n  }]);\n\n  return ArrayUnionTransform;\n}(FieldTransform);\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n */\n\n\nvar ArrayRemoveTransform = /*#__PURE__*/function (_FieldTransform5) {\n  _inherits(ArrayRemoveTransform, _FieldTransform5);\n\n  var _super6 = _createSuper(ArrayRemoveTransform);\n\n  function ArrayRemoveTransform(elements) {\n    var _this3;\n\n    _classCallCheck(this, ArrayRemoveTransform);\n\n    _this3 = _super6.call(this);\n    _this3.elements = elements;\n    return _this3;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   * @private\n   */\n\n\n  _createClass(ArrayRemoveTransform, [{\n    key: \"validate\",\n    value: function validate(allowUndefined) {\n      for (var i = 0; i < this.elements.length; ++i) {\n        validateArrayElement(i, this.elements[i], allowUndefined);\n      }\n    }\n  }, {\n    key: \"toProto\",\n    value: function toProto(serializer, fieldPath) {\n      var encodedElements = serializer.encodeValue(this.elements).arrayValue;\n      return {\n        fieldPath: fieldPath.formattedName,\n        removeAllFromArray: encodedElements\n      };\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof ArrayRemoveTransform && deepEqual(this.elements, other.elements);\n    }\n  }, {\n    key: \"includeInDocumentMask\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     */\n\n  }, {\n    key: \"includeInDocumentTransform\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"methodName\",\n    get: function get() {\n      return 'FieldValue.arrayRemove';\n    }\n  }]);\n\n  return ArrayRemoveTransform;\n}(FieldTransform);\n/**\n * Validates that `value` can be used as an element inside of an array. Certain\n * field values (such as ServerTimestamps) are rejected. Nested arrays are also\n * rejected.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\n\n\nfunction validateArrayElement(arg, value, allowUndefined) {\n  if (Array.isArray(value)) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'array element'), \" Nested arrays are not supported.\"));\n  }\n\n  serializer_1.validateUserInput(arg, value, 'array element',\n  /*path=*/\n  {\n    allowDeletes: 'none',\n    allowTransforms: false,\n    allowUndefined: allowUndefined\n  },\n  /*path=*/\n  undefined,\n  /*level=*/\n  0,\n  /*inArray=*/\n  true);\n}","map":{"version":3,"sources":["/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/@google-cloud/firestore/build/src/field-value.js"],"names":["Object","defineProperty","exports","value","deepEqual","require","serializer_1","validate_1","FieldValue","other","DeleteTransform","DELETE_SENTINEL","ServerTimestampTransform","SERVER_TIMESTAMP_SENTINEL","n","validateMinNumberOfArguments","arguments","NumericIncrementTransform","elements","ArrayUnionTransform","ArrayRemoveTransform","FieldTransform","Error","serializer","fieldPath","formattedName","setToServerValue","operand","validateNumber","encodedOperand","encodeValue","increment","allowUndefined","i","length","validateArrayElement","encodedElements","arrayValue","appendMissingElements","removeAllFromArray","arg","Array","isArray","invalidArgumentMessage","validateUserInput","allowDeletes","allowTransforms","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst deepEqual = require(\"fast-deep-equal\");\nconst serializer_1 = require(\"./serializer\");\nconst validate_1 = require(\"./validate\");\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class\n */\nclass FieldValue {\n    /**\n     * @hideconstructor\n     */\n    constructor() { }\n    /**\n     * Returns a sentinel for use with update() or set() with {merge:true} to mark\n     * a field for deletion.\n     *\n     * @returns {FieldValue} The sentinel value to use in your objects.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     * let data = { a: 'b', c: 'd' };\n     *\n     * documentRef.set(data).then(() => {\n     *   return documentRef.update({a: Firestore.FieldValue.delete()});\n     * }).then(() => {\n     *   // Document now only contains { c: 'd' }\n     * });\n     */\n    static delete() {\n        return DeleteTransform.DELETE_SENTINEL;\n    }\n    /**\n     * Returns a sentinel used with set(), create() or update() to include a\n     * server-generated timestamp in the written data.\n     *\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({\n     *   time: Firestore.FieldValue.serverTimestamp()\n     * }).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   console.log(`Server time set to ${doc.get('time')}`);\n     * });\n     */\n    static serverTimestamp() {\n        return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to increment the the field's current value by the\n     * given value.\n     *\n     * If either current field value or the operand uses floating point\n     * precision, both values will be interpreted as floating point numbers and\n     * all arithmetic will follow IEEE 754 semantics. Otherwise, integer\n     * precision is kept and the result is capped between -2^63 and 2^63-1.\n     *\n     * If the current field value is not of type 'number', or if the field does\n     * not yet exist, the transformation will set the field to the given value.\n     *\n     * @param {number} n The value to increment by.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'counter', Firestore.FieldValue.increment(1)\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('counter') was incremented\n     * });\n     */\n    static increment(n) {\n        // eslint-disable-next-line prefer-rest-params\n        validate_1.validateMinNumberOfArguments('FieldValue.increment', arguments, 1);\n        return new NumericIncrementTransform(n);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to union the given elements with any array value that\n     * already exists on the server. Each specified element that doesn't already\n     * exist in the array will be added to the end. If the field being modified is\n     * not already an array it will be overwritten with an array containing\n     * exactly the specified elements.\n     *\n     * @param {...*} elements The elements to union into the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayUnion('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') contains field 'foo'\n     * });\n     */\n    static arrayUnion(...elements) {\n        validate_1.validateMinNumberOfArguments('FieldValue.arrayUnion', elements, 1);\n        return new ArrayUnionTransform(elements);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to remove the given elements from any array value\n     * that already exists on the server. All instances of each element specified\n     * will be removed from the array. If the field being modified is not already\n     * an array it will be overwritten with an empty array.\n     *\n     * @param {...*} elements The elements to remove from the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayRemove('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') no longer contains field 'foo'\n     * });\n     */\n    static arrayRemove(...elements) {\n        validate_1.validateMinNumberOfArguments('FieldValue.arrayRemove', elements, 1);\n        return new ArrayRemoveTransform(elements);\n    }\n    /**\n     * Returns true if this `FieldValue` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldValue` is equal to the provided value.\n     *\n     * @example\n     * let fieldValues = [\n     *   Firestore.FieldValue.increment(-1.0),\n     *   Firestore.FieldValue.increment(-1),\n     *   Firestore.FieldValue.increment(-0.0),\n     *   Firestore.FieldValue.increment(-0),\n     *   Firestore.FieldValue.increment(0),\n     *   Firestore.FieldValue.increment(0.0),\n     *   Firestore.FieldValue.increment(1),\n     *   Firestore.FieldValue.increment(1.0)\n     * ];\n     *\n     * let equal = 0;\n     * for (let i = 0; i < fieldValues.length; ++i) {\n     *   for (let j = i + 1; j < fieldValues.length; ++j) {\n     *     if (fieldValues[i].isEqual(fieldValues[j])) {\n     *       ++equal;\n     *     }\n     *   }\n     * }\n     * console.log(`Found ${equal} equalities.`);\n     */\n    isEqual(other) {\n        return this === other;\n    }\n}\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @abstract\n */\nclass FieldTransform extends FieldValue {\n}\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n */\nclass DeleteTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Deletes are included in document masks.\n     * @private\n     */\n    get includeInDocumentMask() {\n        return true;\n    }\n    /**\n     * Deletes are are omitted from document transforms.\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return false;\n    }\n    get methodName() {\n        return 'FieldValue.delete';\n    }\n    validate() { }\n    toProto() {\n        throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n    }\n}\nexports.DeleteTransform = DeleteTransform;\n/**\n * Sentinel value for a field delete.\n * @private\n */\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n */\nclass ServerTimestampTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Server timestamps are omitted from document masks.\n     *\n     * @private\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Server timestamps are included in document transforms.\n     *\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.serverTimestamp';\n    }\n    validate() { }\n    toProto(serializer, fieldPath) {\n        return {\n            fieldPath: fieldPath.formattedName,\n            setToServerValue: 'REQUEST_TIME',\n        };\n    }\n}\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n */\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Increments a field value on the backend.\n *\n * @private\n */\nclass NumericIncrementTransform extends FieldTransform {\n    constructor(operand) {\n        super();\n        this.operand = operand;\n    }\n    /**\n     * Numeric transforms are omitted from document masks.\n     *\n     * @private\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Numeric transforms are included in document transforms.\n     *\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.increment';\n    }\n    validate() {\n        validate_1.validateNumber('FieldValue.increment()', this.operand);\n    }\n    toProto(serializer, fieldPath) {\n        const encodedOperand = serializer.encodeValue(this.operand);\n        return { fieldPath: fieldPath.formattedName, increment: encodedOperand };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof NumericIncrementTransform &&\n                this.operand === other.operand));\n    }\n}\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n */\nclass ArrayUnionTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayUnion';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            appendMissingElements: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayUnionTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n */\nclass ArrayRemoveTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayRemove';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            removeAllFromArray: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayRemoveTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Validates that `value` can be used as an element inside of an array. Certain\n * field values (such as ServerTimestamps) are rejected. Nested arrays are also\n * rejected.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateArrayElement(arg, value, allowUndefined) {\n    if (Array.isArray(value)) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'array element')} Nested arrays are not supported.`);\n    }\n    serializer_1.validateUserInput(arg, value, 'array element', \n    /*path=*/ { allowDeletes: 'none', allowTransforms: false, allowUndefined }, \n    /*path=*/ undefined, \n    /*level=*/ 0, \n    /*inArray=*/ true);\n}\n//# sourceMappingURL=field-value.js.map"]},"metadata":{},"sourceType":"script"}