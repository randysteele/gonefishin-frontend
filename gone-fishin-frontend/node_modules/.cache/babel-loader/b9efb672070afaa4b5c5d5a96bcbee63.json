{"ast":null,"code":"/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFirestoreOptions = exports.FirestoreService = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar credential_internal_1 = require(\"../credential/credential-internal\");\n\nvar validator = require(\"../utils/validator\");\n\nvar utils = require(\"../utils/index\");\n/**\n * Internals of a Firestore instance.\n */\n\n\nvar FirestoreInternals =\n/** @class */\nfunction () {\n  function FirestoreInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n   */\n\n\n  FirestoreInternals.prototype.delete = function () {\n    // There are no resources to clean up.\n    return Promise.resolve();\n  };\n\n  return FirestoreInternals;\n}();\n\nvar FirestoreService =\n/** @class */\nfunction () {\n  function FirestoreService(app) {\n    this.INTERNAL = new FirestoreInternals();\n    this.firestoreClient = initFirestore(app);\n    this.appInternal = app;\n  }\n\n  Object.defineProperty(FirestoreService.prototype, \"app\", {\n    /**\n     * Returns the app associated with this Storage instance.\n     *\n     * @return {FirebaseApp} The app associated with this Storage instance.\n     */\n    get: function get() {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirestoreService.prototype, \"client\", {\n    get: function get() {\n      return this.firestoreClient;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FirestoreService;\n}();\n\nexports.FirestoreService = FirestoreService;\n\nfunction getFirestoreOptions(app) {\n  if (!validator.isNonNullObject(app) || !('options' in app)) {\n    throw new error_1.FirebaseFirestoreError({\n      code: 'invalid-argument',\n      message: 'First argument passed to admin.firestore() must be a valid Firebase app instance.'\n    });\n  }\n\n  var projectId = utils.getExplicitProjectId(app);\n  var credential = app.options.credential; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n  var firebaseVersion = require('../../package.json').version;\n\n  if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n    return {\n      credentials: {\n        private_key: credential.privateKey,\n        client_email: credential.clientEmail\n      },\n      // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n      // guaranteed to be available.\n      projectId: projectId,\n      firebaseVersion: firebaseVersion\n    };\n  } else if (credential_internal_1.isApplicationDefault(app.options.credential)) {\n    // Try to use the Google application default credentials.\n    // If an explicit project ID is not available, let Firestore client discover one from the\n    // environment. This prevents the users from having to set GOOGLE_CLOUD_PROJECT in GCP runtimes.\n    return validator.isNonEmptyString(projectId) ? {\n      projectId: projectId,\n      firebaseVersion: firebaseVersion\n    } : {\n      firebaseVersion: firebaseVersion\n    };\n  }\n\n  throw new error_1.FirebaseFirestoreError({\n    code: 'invalid-credential',\n    message: 'Failed to initialize Google Cloud Firestore client with the available credentials. ' + 'Must initialize the SDK with a certificate credential or application default credentials ' + 'to use Cloud Firestore API.'\n  });\n}\n\nexports.getFirestoreOptions = getFirestoreOptions;\n\nfunction initFirestore(app) {\n  var options = getFirestoreOptions(app);\n  var firestoreDatabase;\n\n  try {\n    // Lazy-load the Firestore implementation here, which in turns loads gRPC.\n    firestoreDatabase = require('@google-cloud/firestore').Firestore;\n  } catch (err) {\n    throw new error_1.FirebaseFirestoreError({\n      code: 'missing-dependencies',\n      message: 'Failed to import the Cloud Firestore client library for Node.js. ' + 'Make sure to install the \"@google-cloud/firestore\" npm package. ' + (\"Original error: \" + err)\n    });\n  }\n\n  return new firestoreDatabase(options);\n}","map":{"version":3,"sources":["/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/firebase-admin/lib/firestore/firestore-internal.js"],"names":["Object","defineProperty","exports","value","getFirestoreOptions","FirestoreService","error_1","require","credential_internal_1","validator","utils","FirestoreInternals","prototype","delete","Promise","resolve","app","INTERNAL","firestoreClient","initFirestore","appInternal","get","enumerable","configurable","isNonNullObject","FirebaseFirestoreError","code","message","projectId","getExplicitProjectId","credential","options","firebaseVersion","version","ServiceAccountCredential","credentials","private_key","privateKey","client_email","clientEmail","isApplicationDefault","isNonEmptyString","firestoreDatabase","Firestore","err"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFirestoreOptions = exports.FirestoreService = void 0;\nvar error_1 = require(\"../utils/error\");\nvar credential_internal_1 = require(\"../credential/credential-internal\");\nvar validator = require(\"../utils/validator\");\nvar utils = require(\"../utils/index\");\n/**\n * Internals of a Firestore instance.\n */\nvar FirestoreInternals = /** @class */ (function () {\n    function FirestoreInternals() {\n    }\n    /**\n     * Deletes the service and its associated resources.\n     *\n     * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n     */\n    FirestoreInternals.prototype.delete = function () {\n        // There are no resources to clean up.\n        return Promise.resolve();\n    };\n    return FirestoreInternals;\n}());\nvar FirestoreService = /** @class */ (function () {\n    function FirestoreService(app) {\n        this.INTERNAL = new FirestoreInternals();\n        this.firestoreClient = initFirestore(app);\n        this.appInternal = app;\n    }\n    Object.defineProperty(FirestoreService.prototype, \"app\", {\n        /**\n         * Returns the app associated with this Storage instance.\n         *\n         * @return {FirebaseApp} The app associated with this Storage instance.\n         */\n        get: function () {\n            return this.appInternal;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FirestoreService.prototype, \"client\", {\n        get: function () {\n            return this.firestoreClient;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return FirestoreService;\n}());\nexports.FirestoreService = FirestoreService;\nfunction getFirestoreOptions(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n        throw new error_1.FirebaseFirestoreError({\n            code: 'invalid-argument',\n            message: 'First argument passed to admin.firestore() must be a valid Firebase app instance.',\n        });\n    }\n    var projectId = utils.getExplicitProjectId(app);\n    var credential = app.options.credential;\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    var firebaseVersion = require('../../package.json').version;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return {\n            credentials: {\n                private_key: credential.privateKey,\n                client_email: credential.clientEmail,\n            },\n            // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n            // guaranteed to be available.\n            projectId: projectId,\n            firebaseVersion: firebaseVersion,\n        };\n    }\n    else if (credential_internal_1.isApplicationDefault(app.options.credential)) {\n        // Try to use the Google application default credentials.\n        // If an explicit project ID is not available, let Firestore client discover one from the\n        // environment. This prevents the users from having to set GOOGLE_CLOUD_PROJECT in GCP runtimes.\n        return validator.isNonEmptyString(projectId) ? { projectId: projectId, firebaseVersion: firebaseVersion } : { firebaseVersion: firebaseVersion };\n    }\n    throw new error_1.FirebaseFirestoreError({\n        code: 'invalid-credential',\n        message: 'Failed to initialize Google Cloud Firestore client with the available credentials. ' +\n            'Must initialize the SDK with a certificate credential or application default credentials ' +\n            'to use Cloud Firestore API.',\n    });\n}\nexports.getFirestoreOptions = getFirestoreOptions;\nfunction initFirestore(app) {\n    var options = getFirestoreOptions(app);\n    var firestoreDatabase;\n    try {\n        // Lazy-load the Firestore implementation here, which in turns loads gRPC.\n        firestoreDatabase = require('@google-cloud/firestore').Firestore;\n    }\n    catch (err) {\n        throw new error_1.FirebaseFirestoreError({\n            code: 'missing-dependencies',\n            message: 'Failed to import the Cloud Firestore client library for Node.js. '\n                + 'Make sure to install the \"@google-cloud/firestore\" npm package. '\n                + (\"Original error: \" + err),\n        });\n    }\n    return new firestoreDatabase(options);\n}\n"]},"metadata":{},"sourceType":"script"}