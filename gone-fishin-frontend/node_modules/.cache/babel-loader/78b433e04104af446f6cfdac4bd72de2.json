{"ast":null,"code":"/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SecurityRules = exports.Ruleset = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar security_rules_api_client_internal_1 = require(\"./security-rules-api-client-internal\");\n\nvar security_rules_internal_1 = require(\"./security-rules-internal\");\n\nvar RulesetMetadataListImpl =\n/** @class */\nfunction () {\n  function RulesetMetadataListImpl(response) {\n    if (!validator.isNonNullObject(response) || !validator.isArray(response.rulesets)) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid ListRulesets response: \" + JSON.stringify(response));\n    }\n\n    this.rulesets = response.rulesets.map(function (rs) {\n      return {\n        name: stripProjectIdPrefix(rs.name),\n        createTime: new Date(rs.createTime).toUTCString()\n      };\n    });\n\n    if (response.nextPageToken) {\n      this.nextPageToken = response.nextPageToken;\n    }\n  }\n\n  return RulesetMetadataListImpl;\n}();\n/**\n * Represents a set of Firebase security rules.\n */\n\n\nvar Ruleset =\n/** @class */\nfunction () {\n  function Ruleset(ruleset) {\n    if (!validator.isNonNullObject(ruleset) || !validator.isNonEmptyString(ruleset.name) || !validator.isNonEmptyString(ruleset.createTime) || !validator.isNonNullObject(ruleset.source)) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid Ruleset response: \" + JSON.stringify(ruleset));\n    }\n\n    this.name = stripProjectIdPrefix(ruleset.name);\n    this.createTime = new Date(ruleset.createTime).toUTCString();\n    this.source = ruleset.source.files || [];\n  }\n\n  return Ruleset;\n}();\n\nexports.Ruleset = Ruleset;\n/**\n * The Firebase `SecurityRules` service interface.\n *\n * Do not call this constructor directly. Instead, use\n * [`admin.securityRules()`](admin.securityRules#securityRules).\n */\n\nvar SecurityRules =\n/** @class */\nfunction () {\n  /**\n   * @param {object} app The app for this SecurityRules service.\n   * @constructor\n   */\n  function SecurityRules(app) {\n    this.app = app;\n    this.INTERNAL = new SecurityRulesInternals();\n    this.client = new security_rules_api_client_internal_1.SecurityRulesApiClient(app);\n  }\n  /**\n   * Gets the Ruleset identified by the given name. The input name should be the short name string without\n   * the project ID prefix. For example, to retrieve the `projects/project-id/rulesets/my-ruleset`, pass the\n   * short name \"my-ruleset\". Rejects with a `not-found` error if the specified Ruleset cannot be found.\n   *\n   * @param {string} name Name of the Ruleset to retrieve.\n   * @returns {Promise<Ruleset>} A promise that fulfills with the specified Ruleset.\n   */\n\n\n  SecurityRules.prototype.getRuleset = function (name) {\n    return this.client.getRuleset(name).then(function (rulesetResponse) {\n      return new Ruleset(rulesetResponse);\n    });\n  };\n  /**\n   * Gets the Ruleset currently applied to Cloud Firestore. Rejects with a `not-found` error if no Ruleset is\n   * applied on Firestore.\n   *\n   * @returns {Promise<Ruleset>} A promise that fulfills with the Firestore Ruleset.\n   */\n\n\n  SecurityRules.prototype.getFirestoreRuleset = function () {\n    return this.getRulesetForRelease(SecurityRules.CLOUD_FIRESTORE);\n  };\n  /**\n   * Creates a new ruleset from the given source, and applies it to Cloud Firestore.\n   *\n   * @param {string|Buffer} source Rules source to apply.\n   * @returns {Promise<Ruleset>} A promise that fulfills when the ruleset is created and released.\n   */\n\n\n  SecurityRules.prototype.releaseFirestoreRulesetFromSource = function (source) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      var rulesFile = _this.createRulesFileFromSource('firestore.rules', source);\n\n      return _this.createRuleset(rulesFile);\n    }).then(function (ruleset) {\n      return _this.releaseFirestoreRuleset(ruleset).then(function () {\n        return ruleset;\n      });\n    });\n  };\n  /**\n   * Makes the specified ruleset the currently applied ruleset for Cloud Firestore.\n   *\n   * @param {string|RulesetMetadata} ruleset Name of the ruleset to apply or a RulesetMetadata object containing\n   *   the name.\n   * @returns {Promise<void>} A promise that fulfills when the ruleset is released.\n   */\n\n\n  SecurityRules.prototype.releaseFirestoreRuleset = function (ruleset) {\n    return this.releaseRuleset(ruleset, SecurityRules.CLOUD_FIRESTORE);\n  };\n  /**\n   * Gets the Ruleset currently applied to a Cloud Storage bucket. Rejects with a `not-found` error if no Ruleset is\n   * applied on the bucket.\n   *\n   * @param {string=} bucket Optional name of the Cloud Storage bucket to be retrieved. If not specified,\n   *   retrieves the ruleset applied on the default bucket configured via `AppOptions`.\n   * @returns {Promise<Ruleset>} A promise that fulfills with the Cloud Storage Ruleset.\n   */\n\n\n  SecurityRules.prototype.getStorageRuleset = function (bucket) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getBucketName(bucket);\n    }).then(function (bucketName) {\n      return _this.getRulesetForRelease(SecurityRules.FIREBASE_STORAGE + \"/\" + bucketName);\n    });\n  };\n  /**\n   * Creates a new ruleset from the given source, and applies it to a Cloud Storage bucket.\n   *\n   * @param {string|Buffer} source Rules source to apply.\n   * @param {string=} bucket Optional name of the Cloud Storage bucket to apply the rules on. If not specified,\n   *   applies the ruleset on the default bucket configured via `AppOptions`.\n   * @returns {Promise<Ruleset>} A promise that fulfills when the ruleset is created and released.\n   */\n\n\n  SecurityRules.prototype.releaseStorageRulesetFromSource = function (source, bucket) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      // Bucket name is not required until the last step. But since there's a createRuleset step\n      // before then, make sure to run this check and fail early if the bucket name is invalid.\n      _this.getBucketName(bucket);\n\n      var rulesFile = _this.createRulesFileFromSource('storage.rules', source);\n\n      return _this.createRuleset(rulesFile);\n    }).then(function (ruleset) {\n      return _this.releaseStorageRuleset(ruleset, bucket).then(function () {\n        return ruleset;\n      });\n    });\n  };\n  /**\n   * Makes the specified ruleset the currently applied ruleset for a Cloud Storage bucket.\n   *\n   * @param {string|RulesetMetadata} ruleset Name of the ruleset to apply or a RulesetMetadata object containing\n   *   the name.\n   * @param {string=} bucket Optional name of the Cloud Storage bucket to apply the rules on. If not specified,\n   *   applies the ruleset on the default bucket configured via `AppOptions`.\n   * @returns {Promise<void>} A promise that fulfills when the ruleset is released.\n   */\n\n\n  SecurityRules.prototype.releaseStorageRuleset = function (ruleset, bucket) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getBucketName(bucket);\n    }).then(function (bucketName) {\n      return _this.releaseRuleset(ruleset, SecurityRules.FIREBASE_STORAGE + \"/\" + bucketName);\n    });\n  };\n  /**\n   * Creates a {@link admin.securityRules.RulesFile `RuleFile`} with the given name\n   * and source. Throws an error if any of the arguments are invalid. This is a local\n   * operation, and does not involve any network API calls.\n   *\n   * @example\n   * ```javascript\n   * const source = '// Some rules source';\n   * const rulesFile = admin.securityRules().createRulesFileFromSource(\n   *   'firestore.rules', source);\n   * ```\n   *\n   * @param name Name to assign to the rules file. This is usually a short file name that\n   *   helps identify the file in a ruleset.\n   * @param source Contents of the rules file.\n   * @return A new rules file instance.\n   */\n\n\n  SecurityRules.prototype.createRulesFileFromSource = function (name, source) {\n    if (!validator.isNonEmptyString(name)) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Name must be a non-empty string.');\n    }\n\n    var content;\n\n    if (validator.isNonEmptyString(source)) {\n      content = source;\n    } else if (validator.isBuffer(source)) {\n      content = source.toString('utf-8');\n    } else {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Source must be a non-empty string or a Buffer.');\n    }\n\n    return {\n      name: name,\n      content: content\n    };\n  };\n  /**\n   * Creates a new {@link admin.securityRules.Ruleset `Ruleset`} from the given\n   * {@link admin.securityRules.RulesFile `RuleFile`}.\n   *\n   * @param file Rules file to include in the new `Ruleset`.\n   * @returns A promise that fulfills with the newly created `Ruleset`.\n   */\n\n\n  SecurityRules.prototype.createRuleset = function (file) {\n    var ruleset = {\n      source: {\n        files: [file]\n      }\n    };\n    return this.client.createRuleset(ruleset).then(function (rulesetResponse) {\n      return new Ruleset(rulesetResponse);\n    });\n  };\n  /**\n   * Deletes the {@link admin.securityRules.Ruleset `Ruleset`} identified by the given\n   * name. The input name should be the short name string without the project ID\n   * prefix. For example, to delete the `projects/project-id/rulesets/my-ruleset`,\n   * pass the  short name \"my-ruleset\". Rejects with a `not-found` error if the\n   * specified `Ruleset` cannot be found.\n   *\n   * @param name Name of the `Ruleset` to delete.\n   * @return A promise that fulfills when the `Ruleset` is deleted.\n   */\n\n\n  SecurityRules.prototype.deleteRuleset = function (name) {\n    return this.client.deleteRuleset(name);\n  };\n  /**\n   * Retrieves a page of ruleset metadata.\n   *\n   * @param pageSize The page size, 100 if undefined. This is also the maximum allowed\n   *   limit.\n   * @param nextPageToken The next page token. If not specified, returns rulesets\n   *   starting without any offset.\n   * @return A promise that fulfills with a page of rulesets.\n   */\n\n\n  SecurityRules.prototype.listRulesetMetadata = function (pageSize, nextPageToken) {\n    if (pageSize === void 0) {\n      pageSize = 100;\n    }\n\n    return this.client.listRulesets(pageSize, nextPageToken).then(function (response) {\n      return new RulesetMetadataListImpl(response);\n    });\n  };\n\n  SecurityRules.prototype.getRulesetForRelease = function (releaseName) {\n    var _this = this;\n\n    return this.client.getRelease(releaseName).then(function (release) {\n      var rulesetName = release.rulesetName;\n\n      if (!validator.isNonEmptyString(rulesetName)) {\n        throw new security_rules_internal_1.FirebaseSecurityRulesError('not-found', \"Ruleset name not found for \" + releaseName + \".\");\n      }\n\n      return _this.getRuleset(stripProjectIdPrefix(rulesetName));\n    });\n  };\n\n  SecurityRules.prototype.releaseRuleset = function (ruleset, releaseName) {\n    if (!validator.isNonEmptyString(ruleset) && (!validator.isNonNullObject(ruleset) || !validator.isNonEmptyString(ruleset.name))) {\n      var err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'ruleset must be a non-empty name or a RulesetMetadata object.');\n      return Promise.reject(err);\n    }\n\n    var rulesetName = validator.isString(ruleset) ? ruleset : ruleset.name;\n    return this.client.updateRelease(releaseName, rulesetName).then(function () {\n      return;\n    });\n  };\n\n  SecurityRules.prototype.getBucketName = function (bucket) {\n    var bucketName = typeof bucket !== 'undefined' ? bucket : this.app.options.storageBucket;\n\n    if (!validator.isNonEmptyString(bucketName)) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Bucket name not specified or invalid. Specify a default bucket name via the ' + 'storageBucket option when initializing the app, or specify the bucket name ' + 'explicitly when calling the rules API.');\n    }\n\n    return bucketName;\n  };\n\n  SecurityRules.CLOUD_FIRESTORE = 'cloud.firestore';\n  SecurityRules.FIREBASE_STORAGE = 'firebase.storage';\n  return SecurityRules;\n}();\n\nexports.SecurityRules = SecurityRules;\n\nvar SecurityRulesInternals =\n/** @class */\nfunction () {\n  function SecurityRulesInternals() {}\n\n  SecurityRulesInternals.prototype.delete = function () {\n    return Promise.resolve();\n  };\n\n  return SecurityRulesInternals;\n}();\n\nfunction stripProjectIdPrefix(name) {\n  return name.split('/').pop();\n}","map":{"version":3,"sources":["/Users/randysteele/gone-fishin/gone-fishin-frontend/node_modules/firebase-admin/lib/security-rules/security-rules.js"],"names":["Object","defineProperty","exports","value","SecurityRules","Ruleset","validator","require","security_rules_api_client_internal_1","security_rules_internal_1","RulesetMetadataListImpl","response","isNonNullObject","isArray","rulesets","FirebaseSecurityRulesError","JSON","stringify","map","rs","name","stripProjectIdPrefix","createTime","Date","toUTCString","nextPageToken","ruleset","isNonEmptyString","source","files","app","INTERNAL","SecurityRulesInternals","client","SecurityRulesApiClient","prototype","getRuleset","then","rulesetResponse","getFirestoreRuleset","getRulesetForRelease","CLOUD_FIRESTORE","releaseFirestoreRulesetFromSource","_this","Promise","resolve","rulesFile","createRulesFileFromSource","createRuleset","releaseFirestoreRuleset","releaseRuleset","getStorageRuleset","bucket","getBucketName","bucketName","FIREBASE_STORAGE","releaseStorageRulesetFromSource","releaseStorageRuleset","content","isBuffer","toString","file","deleteRuleset","listRulesetMetadata","pageSize","listRulesets","releaseName","getRelease","release","rulesetName","err","reject","isString","updateRelease","options","storageBucket","delete","split","pop"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.2.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecurityRules = exports.Ruleset = void 0;\nvar validator = require(\"../utils/validator\");\nvar security_rules_api_client_internal_1 = require(\"./security-rules-api-client-internal\");\nvar security_rules_internal_1 = require(\"./security-rules-internal\");\nvar RulesetMetadataListImpl = /** @class */ (function () {\n    function RulesetMetadataListImpl(response) {\n        if (!validator.isNonNullObject(response) || !validator.isArray(response.rulesets)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid ListRulesets response: \" + JSON.stringify(response));\n        }\n        this.rulesets = response.rulesets.map(function (rs) {\n            return {\n                name: stripProjectIdPrefix(rs.name),\n                createTime: new Date(rs.createTime).toUTCString(),\n            };\n        });\n        if (response.nextPageToken) {\n            this.nextPageToken = response.nextPageToken;\n        }\n    }\n    return RulesetMetadataListImpl;\n}());\n/**\n * Represents a set of Firebase security rules.\n */\nvar Ruleset = /** @class */ (function () {\n    function Ruleset(ruleset) {\n        if (!validator.isNonNullObject(ruleset) ||\n            !validator.isNonEmptyString(ruleset.name) ||\n            !validator.isNonEmptyString(ruleset.createTime) ||\n            !validator.isNonNullObject(ruleset.source)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid Ruleset response: \" + JSON.stringify(ruleset));\n        }\n        this.name = stripProjectIdPrefix(ruleset.name);\n        this.createTime = new Date(ruleset.createTime).toUTCString();\n        this.source = ruleset.source.files || [];\n    }\n    return Ruleset;\n}());\nexports.Ruleset = Ruleset;\n/**\n * The Firebase `SecurityRules` service interface.\n *\n * Do not call this constructor directly. Instead, use\n * [`admin.securityRules()`](admin.securityRules#securityRules).\n */\nvar SecurityRules = /** @class */ (function () {\n    /**\n     * @param {object} app The app for this SecurityRules service.\n     * @constructor\n     */\n    function SecurityRules(app) {\n        this.app = app;\n        this.INTERNAL = new SecurityRulesInternals();\n        this.client = new security_rules_api_client_internal_1.SecurityRulesApiClient(app);\n    }\n    /**\n     * Gets the Ruleset identified by the given name. The input name should be the short name string without\n     * the project ID prefix. For example, to retrieve the `projects/project-id/rulesets/my-ruleset`, pass the\n     * short name \"my-ruleset\". Rejects with a `not-found` error if the specified Ruleset cannot be found.\n     *\n     * @param {string} name Name of the Ruleset to retrieve.\n     * @returns {Promise<Ruleset>} A promise that fulfills with the specified Ruleset.\n     */\n    SecurityRules.prototype.getRuleset = function (name) {\n        return this.client.getRuleset(name)\n            .then(function (rulesetResponse) {\n            return new Ruleset(rulesetResponse);\n        });\n    };\n    /**\n     * Gets the Ruleset currently applied to Cloud Firestore. Rejects with a `not-found` error if no Ruleset is\n     * applied on Firestore.\n     *\n     * @returns {Promise<Ruleset>} A promise that fulfills with the Firestore Ruleset.\n     */\n    SecurityRules.prototype.getFirestoreRuleset = function () {\n        return this.getRulesetForRelease(SecurityRules.CLOUD_FIRESTORE);\n    };\n    /**\n     * Creates a new ruleset from the given source, and applies it to Cloud Firestore.\n     *\n     * @param {string|Buffer} source Rules source to apply.\n     * @returns {Promise<Ruleset>} A promise that fulfills when the ruleset is created and released.\n     */\n    SecurityRules.prototype.releaseFirestoreRulesetFromSource = function (source) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            var rulesFile = _this.createRulesFileFromSource('firestore.rules', source);\n            return _this.createRuleset(rulesFile);\n        })\n            .then(function (ruleset) {\n            return _this.releaseFirestoreRuleset(ruleset)\n                .then(function () {\n                return ruleset;\n            });\n        });\n    };\n    /**\n     * Makes the specified ruleset the currently applied ruleset for Cloud Firestore.\n     *\n     * @param {string|RulesetMetadata} ruleset Name of the ruleset to apply or a RulesetMetadata object containing\n     *   the name.\n     * @returns {Promise<void>} A promise that fulfills when the ruleset is released.\n     */\n    SecurityRules.prototype.releaseFirestoreRuleset = function (ruleset) {\n        return this.releaseRuleset(ruleset, SecurityRules.CLOUD_FIRESTORE);\n    };\n    /**\n     * Gets the Ruleset currently applied to a Cloud Storage bucket. Rejects with a `not-found` error if no Ruleset is\n     * applied on the bucket.\n     *\n     * @param {string=} bucket Optional name of the Cloud Storage bucket to be retrieved. If not specified,\n     *   retrieves the ruleset applied on the default bucket configured via `AppOptions`.\n     * @returns {Promise<Ruleset>} A promise that fulfills with the Cloud Storage Ruleset.\n     */\n    SecurityRules.prototype.getStorageRuleset = function (bucket) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.getBucketName(bucket);\n        })\n            .then(function (bucketName) {\n            return _this.getRulesetForRelease(SecurityRules.FIREBASE_STORAGE + \"/\" + bucketName);\n        });\n    };\n    /**\n     * Creates a new ruleset from the given source, and applies it to a Cloud Storage bucket.\n     *\n     * @param {string|Buffer} source Rules source to apply.\n     * @param {string=} bucket Optional name of the Cloud Storage bucket to apply the rules on. If not specified,\n     *   applies the ruleset on the default bucket configured via `AppOptions`.\n     * @returns {Promise<Ruleset>} A promise that fulfills when the ruleset is created and released.\n     */\n    SecurityRules.prototype.releaseStorageRulesetFromSource = function (source, bucket) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            // Bucket name is not required until the last step. But since there's a createRuleset step\n            // before then, make sure to run this check and fail early if the bucket name is invalid.\n            _this.getBucketName(bucket);\n            var rulesFile = _this.createRulesFileFromSource('storage.rules', source);\n            return _this.createRuleset(rulesFile);\n        })\n            .then(function (ruleset) {\n            return _this.releaseStorageRuleset(ruleset, bucket)\n                .then(function () {\n                return ruleset;\n            });\n        });\n    };\n    /**\n     * Makes the specified ruleset the currently applied ruleset for a Cloud Storage bucket.\n     *\n     * @param {string|RulesetMetadata} ruleset Name of the ruleset to apply or a RulesetMetadata object containing\n     *   the name.\n     * @param {string=} bucket Optional name of the Cloud Storage bucket to apply the rules on. If not specified,\n     *   applies the ruleset on the default bucket configured via `AppOptions`.\n     * @returns {Promise<void>} A promise that fulfills when the ruleset is released.\n     */\n    SecurityRules.prototype.releaseStorageRuleset = function (ruleset, bucket) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.getBucketName(bucket);\n        })\n            .then(function (bucketName) {\n            return _this.releaseRuleset(ruleset, SecurityRules.FIREBASE_STORAGE + \"/\" + bucketName);\n        });\n    };\n    /**\n     * Creates a {@link admin.securityRules.RulesFile `RuleFile`} with the given name\n     * and source. Throws an error if any of the arguments are invalid. This is a local\n     * operation, and does not involve any network API calls.\n     *\n     * @example\n     * ```javascript\n     * const source = '// Some rules source';\n     * const rulesFile = admin.securityRules().createRulesFileFromSource(\n     *   'firestore.rules', source);\n     * ```\n     *\n     * @param name Name to assign to the rules file. This is usually a short file name that\n     *   helps identify the file in a ruleset.\n     * @param source Contents of the rules file.\n     * @return A new rules file instance.\n     */\n    SecurityRules.prototype.createRulesFileFromSource = function (name, source) {\n        if (!validator.isNonEmptyString(name)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Name must be a non-empty string.');\n        }\n        var content;\n        if (validator.isNonEmptyString(source)) {\n            content = source;\n        }\n        else if (validator.isBuffer(source)) {\n            content = source.toString('utf-8');\n        }\n        else {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Source must be a non-empty string or a Buffer.');\n        }\n        return {\n            name: name,\n            content: content,\n        };\n    };\n    /**\n     * Creates a new {@link admin.securityRules.Ruleset `Ruleset`} from the given\n     * {@link admin.securityRules.RulesFile `RuleFile`}.\n     *\n     * @param file Rules file to include in the new `Ruleset`.\n     * @returns A promise that fulfills with the newly created `Ruleset`.\n     */\n    SecurityRules.prototype.createRuleset = function (file) {\n        var ruleset = {\n            source: {\n                files: [file],\n            },\n        };\n        return this.client.createRuleset(ruleset)\n            .then(function (rulesetResponse) {\n            return new Ruleset(rulesetResponse);\n        });\n    };\n    /**\n     * Deletes the {@link admin.securityRules.Ruleset `Ruleset`} identified by the given\n     * name. The input name should be the short name string without the project ID\n     * prefix. For example, to delete the `projects/project-id/rulesets/my-ruleset`,\n     * pass the  short name \"my-ruleset\". Rejects with a `not-found` error if the\n     * specified `Ruleset` cannot be found.\n     *\n     * @param name Name of the `Ruleset` to delete.\n     * @return A promise that fulfills when the `Ruleset` is deleted.\n     */\n    SecurityRules.prototype.deleteRuleset = function (name) {\n        return this.client.deleteRuleset(name);\n    };\n    /**\n     * Retrieves a page of ruleset metadata.\n     *\n     * @param pageSize The page size, 100 if undefined. This is also the maximum allowed\n     *   limit.\n     * @param nextPageToken The next page token. If not specified, returns rulesets\n     *   starting without any offset.\n     * @return A promise that fulfills with a page of rulesets.\n     */\n    SecurityRules.prototype.listRulesetMetadata = function (pageSize, nextPageToken) {\n        if (pageSize === void 0) { pageSize = 100; }\n        return this.client.listRulesets(pageSize, nextPageToken)\n            .then(function (response) {\n            return new RulesetMetadataListImpl(response);\n        });\n    };\n    SecurityRules.prototype.getRulesetForRelease = function (releaseName) {\n        var _this = this;\n        return this.client.getRelease(releaseName)\n            .then(function (release) {\n            var rulesetName = release.rulesetName;\n            if (!validator.isNonEmptyString(rulesetName)) {\n                throw new security_rules_internal_1.FirebaseSecurityRulesError('not-found', \"Ruleset name not found for \" + releaseName + \".\");\n            }\n            return _this.getRuleset(stripProjectIdPrefix(rulesetName));\n        });\n    };\n    SecurityRules.prototype.releaseRuleset = function (ruleset, releaseName) {\n        if (!validator.isNonEmptyString(ruleset) &&\n            (!validator.isNonNullObject(ruleset) || !validator.isNonEmptyString(ruleset.name))) {\n            var err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'ruleset must be a non-empty name or a RulesetMetadata object.');\n            return Promise.reject(err);\n        }\n        var rulesetName = validator.isString(ruleset) ? ruleset : ruleset.name;\n        return this.client.updateRelease(releaseName, rulesetName)\n            .then(function () {\n            return;\n        });\n    };\n    SecurityRules.prototype.getBucketName = function (bucket) {\n        var bucketName = (typeof bucket !== 'undefined') ? bucket : this.app.options.storageBucket;\n        if (!validator.isNonEmptyString(bucketName)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Bucket name not specified or invalid. Specify a default bucket name via the ' +\n                'storageBucket option when initializing the app, or specify the bucket name ' +\n                'explicitly when calling the rules API.');\n        }\n        return bucketName;\n    };\n    SecurityRules.CLOUD_FIRESTORE = 'cloud.firestore';\n    SecurityRules.FIREBASE_STORAGE = 'firebase.storage';\n    return SecurityRules;\n}());\nexports.SecurityRules = SecurityRules;\nvar SecurityRulesInternals = /** @class */ (function () {\n    function SecurityRulesInternals() {\n    }\n    SecurityRulesInternals.prototype.delete = function () {\n        return Promise.resolve();\n    };\n    return SecurityRulesInternals;\n}());\nfunction stripProjectIdPrefix(name) {\n    return name.split('/').pop();\n}\n"]},"metadata":{},"sourceType":"script"}